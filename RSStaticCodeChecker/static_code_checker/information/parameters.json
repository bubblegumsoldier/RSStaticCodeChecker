[{"base": "Patient", "params": ["ShowDose", "ShowInterpolated", "ShowIsolines", "ShowColorWash", "ColorWashTransparency"], "method": "EditShowDoseVisualization", "description": "EditShowDoseVisualization(..)\r\n  Setting dose related visualization settings.\r\n  Parameters:\r\n    ShowDose - True if dose shall be displayed.\r\n    ShowInterpolated - True if interpolated dose shall be \r\n      displayed.\r\n    ShowIsolines - True if iso dose lines shall be displayed.\r\n    ShowColorWash - True if dose with color wash shall be \r\n      displayed.\r\n    ColorWashTransparency - A value between [0.0 1.0] where \r\n      0.0 means no transparency and 1.0 means full transparency of \r\n      dose color wash.\r\n"}, {"base": "Patient", "params": ["PoiName", "IsVisible"], "method": "SetPoiVisibility", "description": "SetPoiVisibility(..)\r\n  Setting if a POI is visible or not.\r\n  Parameters:\r\n    PoiName - The name of the POI.\r\n    IsVisible - True if the POI is visible.\r\n"}, {"base": "Patient", "params": ["EvaluationPlan", "ReferencePlan", "DistanceCriteria", "DoseCriteria", "SampleDistance", "NumberOfRefineIterations", "RefineLayers", "Limit"], "method": "CalculateGammaForFractionDose", "description": "CalculateGammaForFractionDose(..)\r\n  Method to calculate gamma using global maximum dose. It can be \r\n  used for cases when the dose grid of the evaluated plan is the \r\n  same as for the reference plan. \r\n  The method requires that for each plan there is only one study, \r\n  one treatment case, one treatment plan group and one beam set. \r\n  Gamma is calculated using the fraction dose. \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    EvaluationPlan - The name of the evaluated plan.\r\n    ReferencePlan - The name of the reference plan.\r\n    DistanceCriteria - Distance criteria in cm for the gamma \r\n      evaluation.\r\n    DoseCriteria - Dose criteria in percent for the gamma \r\n      evaluation.\r\n    SampleDistance - Distance between points that will be \r\n      evaluated by the gamma algorithm [cm].\r\n    NumberOfRefineIterations - Number of refined searches for \r\n      an optimal gamma value.\r\n    RefineLayers - Affects the distance that will be searched \r\n      for an optimal gamma value.\r\n    Limit - The maximum gamma value calculated, higher values \r\n      will be truncated.\r\n  Returns:\r\n    The gamma distribution.\r\n"}, {"base": "Patient", "params": ["ShowDoseGrid"], "method": "EditShowDoseGridVisualization", "description": "EditShowDoseGridVisualization(..)\r\n  Setting the visualization of the dose grid.\r\n  Parameters:\r\n    ShowDoseGrid - True if dose grid shall be displayed.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FractionExamination", "PlanningExamination"], "method": "SetRegistrationAsTreatmentPositionAlignment", "description": "SetRegistrationAsTreatmentPositionAlignment(..)\r\n  Sets a frame-of reference registration as treatment position \r\n  alignment.\r\n  To be able to use this functionality a frame-of-reference \r\n  registration with the fraction image set as floating image set and \r\n  the the planning image set as reference image set has to exist.\r\n  Note: A treatment position alignment corresponds to the \r\n  relationship between the planning image set and the actual \r\n  treatment position during the fraction.\r\n  Hence, only set a frame-of-reference registration corresponding to \r\n  the relationship between the planning image set and the actual \r\n  treatment position as being treatment position alignment.\r\n  Parameters:\r\n    FractionExamination - The image set acquired during \r\n      treatment.\r\n      This image set needs to be assigned to a fraction.\r\n    PlanningExamination - The planning image set of the plan \r\n      for which treatment adaptation has been initialized.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromExamination", "ToExamination", "Point"], "method": "TransformPointFromExaminationToExamination", "description": "TransformPointFromExaminationToExamination(..)\r\n  Transforms a point (in DICOM patient coordinate system) from \r\n  FromExamination to ToExamination.\r\n  Parameters:\r\n    FromExamination - Name of FromExamination.\r\n    ToExamination - Name of ToExamination.\r\n    Point - Point to transform (in DICOM patient coordinate \r\n      system).\r\n  Returns:\r\n    Transformed point (in DICOM patient coordinate system). \r\n    Returns null if no transform exists.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FloatingExaminationName", "ReferenceExaminationName", "UseOnlyTranslations", "HighWeightOnBones", "InitializeImages", "FocusRoisNames", "RegistrationName"], "method": "ComputeRigidImageRegistration", "description": "ComputeRigidImageRegistration(..)\r\n  Computes a rigid image registration.\r\n  Parameters:\r\n    FloatingExaminationName - The name of the floating \r\n      examination which is rigidly transformed.\r\n    ReferenceExaminationName - The name of the reference \r\n      examination which is not transformed.\r\n    UseOnlyTranslations - Set to \"true\" if rotations shall be \r\n      discarded in the registration process.\r\n    HighWeightOnBones - Set to \"true\" if the registration \r\n      algorithm shall focus on bony structures.\r\n    InitializeImages - Set to \"true\" if the registration \r\n      algorithm shall try to find an approximate registration before \r\n      the accurate registration is computed.\r\n    FocusRoisNames - Names of the focus ROIs.\r\n    RegistrationName - Name of the registration. Only \r\n      applicable if an additional rigid registration is computed. In \r\n      case a frame-of-reference registration is created the name \r\n      will not be used and can be left empty.\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanName", "NewPlanName"], "method": "CopyPlan", "description": "CopyPlan(..)\r\n  Copies a treatment plan.\r\n  Parameters:\r\n    PlanName - Name of the plan to copy.\r\n    NewPlanName - Desired name of the new plan.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FrameOfReference", "ExaminationName", "MetaFileName", "Modality", "FlipZAxis"], "method": "ImportMetaImageToCurrentPatient", "description": "ImportMetaImageToCurrentPatient(..)\r\n  Reads data from a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation) \r\n  and creates a new examination with a corresponding image stack for \r\n  the current patient.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Support for\r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  CenterOfRotation        = 0 0 0\r\n  AnatomicalOrientation   = RAI\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT or MET_USHORT\r\n              \r\n  Patient position will be set to HFS\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    FrameOfReference - Frame-of-reference. If empty, a new UID \r\n      will be generated.\r\n    ExaminationName - Examination name\r\n    MetaFileName - File name\r\n    Modality - \r\n    FlipZAxis - Apply a flip of the z-axis\r\n"}, {"base": "Patient.Cases.[]", "params": ["ReferenceExaminationName", "TargetExaminationName", "DeformableRegistrationGroupName", "RigidTransform", "MetaImageHeaderFileName"], "method": "ImportDeformableRegistrationFromMetaImageFile", "description": "ImportDeformableRegistrationFromMetaImageFile(..)\r\n  Action for reading a deformable registration stored as a meta \r\n  image file.\r\n  Assumes that all units are mm (corner, grid element size and \r\n  displacement)\r\n  Displacement field should be stored as float (ELEMENT_TYPE = \r\n  MET_FLOAT in header file)\r\n  Parameters:\r\n    ReferenceExaminationName - Gets or sets the name of the \r\n      reference examination.\r\n    TargetExaminationName - Gets or sets the name of the \r\n      target examination.\r\n    DeformableRegistrationGroupName - Gets or sets the name of \r\n      the deformable registration group that will be created.\r\n    RigidTransform - Gets or sets the rigid transform for the \r\n      deformable registration.\r\n      If null, the identity matrix will be assumed.\r\n      In RayStation, two frame-of-references have a unique \r\n      registration, meaning there is only support for one \r\n      frame-of-reference registration between two image sets. \r\n      In addition to the frame-of-reference registration an \r\n      additional rigid transform can be created and stored (below \r\n      refered to as \"added rigid transform\"). \r\n      The combination of the frame-of-reference registration and the \r\n      added rigid transform will be the starting point for the \r\n      deformable registration. \r\n      This means that the parameter \"RigidTransform\" need to fulfil \r\n      one of the following:If the reference image and the target \r\n      image are already rigidly registered in RayStation the \r\n      transform need to fulfil:\r\n      1. no frame-of-reference registration exists between reference \r\n      and target\r\n          -> frame-of-reference registration will be set to \r\n      \"RigidTransform\" and added rigid transform to identity \r\n      2. identical to the frame-of-reference registration between \r\n      reference and target AND no added rigid transform between the \r\n      image set exists\r\n          -> added rigid transform will be set to identity \r\n      3. identical to the combined frame-of-reference registration \r\n      and added rigid transform between the image sets\r\n      4. difference than the frame-of-reference registration between \r\n      reference and target AND no added rigid transform exists\r\n          -> added rigid transform will be set to the difference \r\n      between the frame-of-reference registration and \"RigidTransform\"\r\n      Independently of the situation, no added rigid transform can \r\n      be added once the action is finished (as only one can exist \r\n      between the same set of images)\r\n                  \r\n      If RigidTransform is empty, existing transform will be used.\r\n    MetaImageHeaderFileName - Gets or sets the file name for \r\n      the meta file in which the displacement field is given.\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanExplorationName", "TreatmentPlanNames"], "method": "CopyMultiplePlansToExploration", "description": "CopyMultiplePlansToExploration(..)\r\n  Copies one or more treatment plans to the list of exploration \r\n  plans in a plan exploration.\r\n  Parameters:\r\n    PlanExplorationName - Name of the destination exploration \r\n      where the plans will be copied.\r\n    TreatmentPlanNames - Name of the plans to copy.\r\n"}, {"base": "Patient.Cases.[]", "params": ["Anonymize", "AnonymizedName", "AnonymizedId", "ExportFolderPath", "AEHostname", "AEPort", "CallingAETitle", "CalledAETitle", "Examinations", "RtStructureSetsForExaminations", "RtStructureSetsReferencedFromBeamSets", "BeamSets", "BeamSetDoseForBeamSets", "BeamDosesForBeamSets", "SpatialRegistrationForExaminations", "TreatmentBeamDrrImages", "SetupBeamDrrImages", "DicomFilter", "IgnorePreConditionWarnings", "Useatry"], "method": "ScriptableDicomExport", "description": "ScriptableDicomExport(..)\r\n  Exports specified DICOM datasets to either disk or SCP.\r\n  Parameters:\r\n    Anonymize - Anonymize all exported datasets\r\n    AnonymizedName - Patients name to set in anonymized datasets\r\n    AnonymizedId - Patient ID to set in anonymized datasets\r\n    ExportFolderPath - Export target folder. Only used for \r\n      file exports. Leave empty for SCP export\r\n    AEHostname - SCP AE name for SCP export. Leave empty for \r\n      file export\r\n    AEPort - SCP Port for SCP export. Leave empty for file \r\n      export\r\n    CallingAETitle - Calling AE title for SCP export. Leave \r\n      empty to use hostname\r\n    CalledAETitle - Called AE title for SCP export\r\n    Examinations - List of examination that shall be exported. \r\n      Specified by Examination names\r\n      Argument snippet: Examinations = [examination.Name]\r\n    RtStructureSetsForExaminations - List of examination names \r\n      for which the structure set shall be exported.\r\n      Specified by examination names\r\n      Argument snippet: RtStructureSetsForExaminations = \r\n      [examination.Name]\r\n    RtStructureSetsReferencedFromBeamSets - List of beamset \r\n      identifiers for which the referenced structure set that shall \r\n      be exported\r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: RtStructureSetsReferencedFromBeamSets = \r\n      [\"%s:%s\"%(plan.Name, beam_set.DicomPlanLabel)]\r\n      Alternative snippet: RtStructureSetsReferencedFromBeamSets = \r\n      [beam_set.BeamSetIdentifier()]\r\n    BeamSets - List of beamset identifiers that shall be \r\n      exported\r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: BeamSets = [\"%s:%s\"%(plan.Name, \r\n      beam_set.DicomPlanLabel)]\r\n      Alternative snippet: BeamSets = [beam_set.BeamSetIdentifier()]\r\n    BeamSetDoseForBeamSets - List of beamset identifiers for \r\n      which the beam set dose shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: BeamSetDoseForBeamSets = \r\n      [\"%s:%s\"%(plan.Name, beam_set.DicomPlanLabel)]\r\n      Alternative snippet: BeamSetDoseForBeamSets = \r\n      [beam_set.BeamSetIdentifier()]\r\n    BeamDosesForBeamSets - List of beamset identifiers for \r\n      which all beam doses shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: BeamDosesForBeamSets = [\"%s:%s\"%(plan.Name, \r\n      beam_set.DicomPlanLabel)]\r\n      Alternative snippet: BeamDosesForBeamSets = \r\n      [beam_set.BeamSetIdentifier()]\r\n    SpatialRegistrationForExaminations - List of examination \r\n      pairs for which the registration object shall be exported.\r\n      The pair is specified as fromExaminationName:toExaminationName\r\n      Argument snippet: SpatialRegistrationForExaminations = \r\n      [\"%s:%s\"%(fromExamination.Name, toExamination.Name)]\r\n    TreatmentBeamDrrImages - List of beamset identifiers for \r\n      which all treatment beam DRRs shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s\"%(plan.Name, beam_set.DicomPlanLabel)]\r\n      Alternative snippet: TreatmentBeamDrrImages = \r\n      [beam_set.BeamSetIdentifier()]\r\n      If you want to specify a single beam or specific DrrSetting \r\n      other then Default, the identifier shall be specified as \r\n      PlanName:DicomPlanLabel:BeamName:DrrSettingName\r\n      (ex. \"Plan 1:BS 1:B 1:DRR 1\" for plan \"Plan 1\", with beam set \r\n      \"BS 1\", and beam \"B 1\" and DrrSetting \"DRR 1\"\r\n      The last two argument can be omitted if wanted. \r\n      Not specifying beam will take all beams in the beam set\r\n      Not specifying DrrSetting will use the setting named \"Default\"\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"\")] # \r\n      all beams with Default DrrSetting\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"DRR \r\n      1\")] # all beams with DrrSetting named \"DRR 1\"\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"\")] # only the selected beam with Default DrrSetting\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"DRR 1\")] # only the selected beam with DrrSetting named \"DRR 1\"\r\n    SetupBeamDrrImages - List of beamset identifiers for which \r\n      all setup beam DRRs shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: SetupBeamDrrImages =  [\"%s:%s\"%(plan.Name, \r\n      beam_set.DicomPlanLabel)]\r\n      Alternative snippet: SetupBeamDrrImages = \r\n      [beam_set.BeamSetIdentifier()]\r\n      If you want to specify a single beam or specific DrrSetting \r\n      other then Default, the identifier shall be specified as \r\n      PlanName:DicomPlanLabel:BeamName:DrrSettingName\r\n      (ex. \"Plan 1:BS 1:B 1:DRR 1\" for plan \"Plan 1\", with beam set \r\n      \"BS 1\", and beam \"B 1\" and DrrSetting \"DRR 1\"\r\n      The last two argument can be omitted if wanted. \r\n      Not specifying beam will take all beams in the beam set\r\n      Not specifying DrrSetting will use the setting named \"Default\"\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"\")] # \r\n      all beams with Default DrrSetting\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"DRR \r\n      1\")] # all beams with DrrSetting named \"DRR 1\"\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"\")] # only the selected beam with Default DrrSetting\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"DRR 1\")] # only the selected beam with DrrSetting named \"DRR 1\"\r\n    DicomFilter - Dicom filter to use during export. Specified \r\n      by filter name.\r\n    IgnorePreConditionWarnings - Switch for disabeling \r\n      warnings. For any clinical export, warnings must be handled by \r\n      first exporting with this argument set to False.\r\n      Use a try - except pattern to catch all warnings. After the \r\n      warnings been handled, the export can bu run again with this \r\n      attribute\r\n      set to True.\r\n      Code snippet:\r\n      try:\r\n        case.ScriptableDicomExport(...)\r\n      except SystemError as error:\r\n        HandleWarnings(error)\r\n        case.ScriptableDicomExport(... \r\n      IgnorePreConditionWarnings=True)\r\n"}, {"base": "Patient.Cases.[]", "params": ["ReferenceExaminationName", "TargetExaminationName", "DeformableRegistrationGroupName", "AddedRigidTransform", "FrameOfReferenceRigidTransform", "GridCorner", "GridVoxelSize", "GridNrVoxels", "FileNameDisplacementX", "FileNameDisplacementY", "FileNameDisplacementZ"], "method": "ImportDeformableRegistrationFromFile", "description": "ImportDeformableRegistrationFromFile(..)\r\n  Action for reading a deformable registration from file.\r\n  Displacement in x, y, and z should be stored as byte arrays\r\n  Parameters:\r\n    ReferenceExaminationName - Gets or sets the name of the \r\n      reference examination.\r\n    TargetExaminationName - Gets or sets the name of the \r\n      target examination.\r\n    DeformableRegistrationGroupName - Gets or sets the name of \r\n      the deformable registration group that will be created.\r\n    AddedRigidTransform - Gets or sets the rigid transform for \r\n      the deformable registration.\r\n      If null, the identity matrix will be used.\r\n      Note that in RayStation only one additional rigid transform \r\n      can be added between each pair of image set. \r\n      This means that if you have already created an additional \r\n      rigid transform, the same matrix should be given as \r\n      AddedRigidTransform\r\n      Furthermore, rigid transforms (if different than identity) can \r\n      only be added to explicit frame-of-reference registrations\r\n    FrameOfReferenceRigidTransform - Gets or sets the rigid \r\n      transform for the frame-of-reference registration.\r\n      If a frame-of-reference registration already exist between the \r\n      reference and target examination, \r\n      FrameOfReferenceRigidTransform should be null\r\n    GridCorner - Gets or sets the deformation grid corner.\r\n      Note that deformation vectors are defined in the corner points \r\n      of each deformation grid voxels. Hence, GridCorner should \r\n      correspond to position of the first deformation vector in your \r\n      deformation vector field\r\n    GridVoxelSize - Gets or sets the deformation grid voxel \r\n      size.\r\n    GridNrVoxels - Gets or sets the deformation grid size.\r\n      Note that deformation vectors are defined in the corner points \r\n      of each deformation grid voxels. Hence, GridNrVoxels should be \r\n      decreased with one in each direction with respect to the \r\n      number of vectors\r\n    FileNameDisplacementX - Gets or sets the file name for \r\n      displacement field in x.\r\n    FileNameDisplacementY - Gets or sets the file name for \r\n      displacement field in y.\r\n    FileNameDisplacementZ - Gets or sets the file name for \r\n      displacement field in z.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromExamination", "ToExamination"], "method": "GetTransformForExaminations", "description": "GetTransformForExaminations(..)\r\n  Gets the rigid transform between two examinations based on their \r\n  frame-of-reference registration.\r\n  Parameters:\r\n    FromExamination - Name of FromExamination\r\n    ToExamination - Name of ToExamination\r\n  Returns:\r\n    Rigid transform as double array. Returns null if no \r\n    transform exists.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FractionNumber", "SetTotalDoseEstimateReference", "DoseDistribution", "StructureRegistration"], "method": "MapDose", "description": "MapDose(..)\r\n  Action for mapping dose from the target examination of the \r\n  registration to the reference examination of the registration.\r\n  Note that it is possible to map a dose that has already been \r\n  mapped with the same registration.\r\n  This will create two evaluation doses with the same properties.\r\n  Parameters:\r\n    FractionNumber - The fraction number of the dose \r\n      distribution.\r\n      Default is zero.\r\n    SetTotalDoseEstimateReference - Indicates if total dose \r\n      estimate reference should be set.\r\n      Default is false.\r\n    DoseDistribution - The dose distribution to map.\r\n    StructureRegistration - The deformable registration to be \r\n      used for the dose mapping.\r\n      The dose distribution must be defined on the target \r\n      examination of this registration.\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanExplorationName", "ExplorationPlanName", "NewTreatmentPlanName"], "method": "CopyExplorationPlanToPlanList", "description": "CopyExplorationPlanToPlanList(..)\r\n  Copies an exploration plan to the treatment plan list.\r\n  Parameters:\r\n    PlanExplorationName - Name of the exploration that \r\n      contains the plan that shall be copied.\r\n    ExplorationPlanName - Name of the plan to copy.\r\n    NewTreatmentPlanName - Name of the new treatment plan.\r\n"}, {"base": "Patient.Cases.[]", "params": ["Isocenter", "ExaminationName"], "method": "CreateDefaultVSimPlan", "description": "CreateDefaultVSimPlan(..)\r\n  Adds a new treatment plan using the default machine specified in \r\n  ClinicDB. If the machine\r\n  is not found, the first commissioned, non deprecated linac machine \r\n  in alpabethical order is used.\r\n  Example:\r\n    To create a plan: \r\n    case.CreateDefaultVSimPlan(Isocenter={ 'x': 0.0, 'y': 0.0, 'z': \r\n    0.0 },ExaminationName=\"CT 1\")\r\n  Parameters:\r\n    Isocenter - Coordinates of isocenter\r\n    ExaminationName - The name of the examination on which the \r\n      dose grid is defined.\r\n  Returns:\r\n    Warning message, if any.\r\n"}, {"base": "Patient.Cases.[]", "params": ["ExternalMbsRoiName", "ExternalMbsRoiColor", "ModelExaminationName", "TargetExaminationNames", "SuperiorInferiorRange", "UseExistingExternalMbsModel"], "method": "OutlineMbsMesh", "description": "OutlineMbsMesh(..)\r\n  Creates an external MBS model based on the external geometry on \r\n  the \"model examination\" and stores it in the data base (for future \r\n  use).\r\n  Create external MBS meshes for the selected images based on the \r\n  external MBS model.\r\n  Parameters:\r\n    ExternalMbsRoiName - The name of the external MBS ROI to \r\n      create.\r\n    ExternalMbsRoiColor - The color of the external MBS ROI to \r\n      create.\r\n      Default value is Yellow.\r\n    ModelExaminationName - The name of the examination used to \r\n      create an outline MBS model from.\r\n    TargetExaminationNames - The name(s) of the examination(s) \r\n      for which to create an outline MBS roigeometry.\r\n    SuperiorInferiorRange - The sup-inf range interval for \r\n      which the external MBS should be defined for (on the model \r\n      examination geometry).\r\n      If SuperiorInferiorRange is set to [0,0] the range covered by \r\n      the complete external geometry will be used.\r\n      Use the script extension utility method \r\n      StructureSet.GetSuperiorInferiorRangeForExternalGeometry() for \r\n      guidance when a smaller range is wanted.\r\n    UseExistingExternalMbsModel - If to use an existing \r\n      external MBS model.\r\n      If an external MBS model exists and \r\n      UseExistingExternalMbsModel == false, the model stored in the \r\n      data base is removed and a new is created.\r\n      This option can only be used if no external MBS geometries \r\n      exist (i.e., when the external MBS ROI has been removed).\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanExplorationName", "ExplorationPlanNames"], "method": "CopyMultipleExplorationPlansToPlanList", "description": "CopyMultipleExplorationPlansToPlanList(..)\r\n  Copies one or more exploration plans from a plan exploration to \r\n  the list of treatment plans.\r\n  Parameters:\r\n    PlanExplorationName - Name of the exploration that \r\n      contains the plans that shall be copied.\r\n    ExplorationPlanNames - Name of the plans to copy.\r\n"}, {"base": "Patient.Cases.[]", "params": ["RegistrationName"], "method": "CreateInvertedDeformationField", "description": "CreateInvertedDeformationField(..)\r\n  Method that creates an inverted deformation field.\r\n  Example:\r\n    The inversion of the structure registration \"CT 1 to CT 2\" \r\n    is created by:\r\n    study.CreateInvertedDeformationField(RegistrationName=\"CT 1 to \r\n    CT 2\")\r\n  Parameters:\r\n    RegistrationName - Name of the registration to be inverted.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber", "RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumesForAccumulatedDeliveredDose", "description": "GetDoseAtRelativeVolumesForAccumulatedDeliveredDose(..)\r\n  Method for retrieving DVH points for an accumulated delivered \r\n  dose.\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger).\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to.\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes for accumulated delivered \r\n    dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber", "RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValuesForAccumulatedDeliveredDose", "description": "GetRelativeVolumeAtDoseValuesForAccumulatedDeliveredDose(..)\r\n  Method for retrieving DVH points for an accumulated delivered \r\n  dose.\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger).\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to.\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values for accumulated \r\n    delivered dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber", "RoiName", "DoseType"], "method": "GetDoseStatisticForAccumulatedDeliveredDose", "description": "GetDoseStatisticForAccumulatedDeliveredDose(..)\r\n  Method for retrieving dose statistics for accumulated delivered \r\n  dose.\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger).\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to.\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic for accumulated delivered dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber"], "method": "GetAccumulatedDeliveredDoseGrid", "description": "GetAccumulatedDeliveredDoseGrid(..)\r\n  Gets the dose grid for an accumulated delivered dose\r\n  Can only be used for Patient.TreatmentDelivery.TreatmentCourse (an \r\n  exception is thrown if applied to TreatmentCourse under \r\n  TreatmentPlan)\r\n  TreatmentFractions need to have \r\n  EstimatedDoseOnTotalDoseExamination calculated consecutivly \r\n  between FromFractionNumber and ToFractionNumber\r\n              \r\n  Experimental - use with care\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger)\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to\r\n  Returns:\r\n    DoseGrid for the accumulated delivered dose\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery", "params": ["FractionNumber"], "method": "GetBeamSetAtFractionForTreatmentDeliveryPlan", "description": "GetBeamSetAtFractionForTreatmentDeliveryPlan(..)\r\n  Gets the beamset used for a given fraction.\r\n  Example:\r\n    beamSet = \r\n    patient.TreatmentDelivery.GetBeamSetAtFractionForTreatmentDeliveryPlan(FractionNumber = nr)\r\n  Parameters:\r\n    FractionNumber - Fraction number, ranging from 1 to the \r\n      total number of fractions for the plan\r\n  Returns:\r\n    Returns beam set for selected fraction.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber"], "method": "GetAccumulatedDeliveredDoseValues", "description": "GetAccumulatedDeliveredDoseValues(..)\r\n  Gets the dose values for an accumulated delivered dose\r\n  Can only be used for Patient.TreatmentDelivery.TreatmentCourse (an \r\n  exception is thrown if applied to TreatmentCourse under \r\n  TreatmentPlan)\r\n  TreatmentFractions need to have \r\n  EstimatedDoseOnTotalDoseExamination calculated consecutivly \r\n  between FromFractionNumber and ToFractionNumber\r\n              \r\n  Experimental - use with care\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger)\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to\r\n  Returns:\r\n    Array of floats with accumulated delivered dose values\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber"], "method": "GetAccumulatedDeliveredDose", "description": "GetAccumulatedDeliveredDose(..)\r\n  Gets a dose distribution corresponding to an accumulated \r\n  delivered dose\r\n  Can only be used for Patient.TreatmentDelivery.TreatmentCourse (an \r\n  exception is thrown if applied to TreatmentCourse under \r\n  TreatmentPlan)\r\n  TreatmentFractions need to have \r\n  EstimatedDoseOnTotalDoseExamination calculated consecutivly \r\n  between FromFractionNumber and ToFractionNumber\r\n              \r\n  Experimental - use with care\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger)\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to\r\n  Returns:\r\n    DoseDistribution with accumulated delivered dose\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse", "params": ["FractionNumbers", "ExaminationNames", "StructureRegistrationNames"], "method": "ComputeDeliveryDoseWithDeformation", "description": "ComputeDeliveryDoseWithDeformation(..)\r\n  Action used to compute delivery dose and do optional deformation \r\n  of that dose\r\n  Parameters:\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames and\r\n      StructureRegistrationNames properties. This property must \r\n      contain at least one item.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers and StructureRegistrationNames\r\n      properties.\r\n    StructureRegistrationNames - The names of the provided \r\n      structure registrations. If an item in the list is empty, the \r\n      dose will\r\n      not be deformed. The number of items in this list must equal \r\n      the number of items in the\r\n      FractionNumbers and ExaminationNames properties.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Patient.Cases.[].TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Patient.Cases.[]", "params": ["ExaminationInfo"], "method": "LoadExamination", "description": "LoadExamination(..)\r\n  Sets the active/current examination. Returns a handle to the \r\n  examination.\r\n  Example:\r\n    To return a handle to the examination with name 'Exam X' \r\n    retrieved from QueryExaminationInfo:\r\n    infos = db.QueryExaminationInfo(PatientInfo = patientInfo, \r\n    Filter = {'Name': 'Exam X'})\r\n    examination = study.LoadExamination( ExaminationInfo = infos[0] )\r\n  Parameters:\r\n    ExaminationInfo - Information about the examination to be \r\n      selected. The examination info must match one and only one \r\n      examination.\r\n  Returns:\r\n    The loaded examination set.\r\n"}, {"base": "Patient.Cases.[]", "params": ["PoiGeometryNames", "CreateNewPois", "ReferenceExaminationName", "TargetExaminationNames", "Transformations"], "method": "MapPoiGeometriesRigidly", "description": "MapPoiGeometriesRigidly(..)\r\n  Map POI geometries according to selected transformation(s).\r\n  Parameters:\r\n    PoiGeometryNames - The names of the POI geometries to map.\r\n    CreateNewPois - If true: for each PoiGeometry selected to \r\n      be mapped, a new POI is created with geometries defined in \r\n      both the reference and the target image. The geometry in the \r\n      reference image is the same as the original and the geometry \r\n      in the target image is the mapped geometry. A suffix is added \r\n      to the POI name.\r\n      If false: for each PoiGeometry selected a geometry will be \r\n      created in the target image corresponding to the geometry \r\n      mapped from the reference image.\r\n      Default is false.\r\n    ReferenceExaminationName - The name of the image from \r\n      which the transformation(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    Transformations - The transformation(s) from the reference \r\n      image(s) to the target image(s).\r\n      Transformations are given in homogeneous coordinates, e.g., \r\n      the identity transform is \r\n      {'M11' : 1, 'M12': 0, 'M13': 0, 'M14': 0, \\\r\n      'M21' : 0, 'M22': 1, 'M23': 0, 'M24': 0, \\\r\n      'M31' : 0, 'M32': 0, 'M33': 1, 'M34': 0,\\\r\n      'M41' : 0, 'M42': 0, 'M43': 0, 'M44': 1}\r\n"}, {"base": "Patient.Cases.[]", "params": ["Filter"], "method": "QueryPlanInfo", "description": "QueryPlanInfo(..)\r\n  Returns info on all plans on a patient.\r\n  Example:\r\n    To return info on all plans with the exact name 'Plan1' in a \r\n    patient:\r\n    info = patient.QueryPlanInfo(Filter = {'Name': '^Plan1$'}\r\n  Parameters:\r\n    Filter - Filter using regular expressions.  \r\n                  Possible keys:\r\n                     *Id\r\n                     *Name\r\n                     *LastModified\r\n                     *IsApproved\r\n                     *ApprovalStatus\r\n  Returns:\r\n    List of plan information.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromExaminationName", "ToExaminationName", "TransformationMatrix"], "method": "SetRegistrationMatrix", "description": "SetRegistrationMatrix(..)\r\n  Sets the frame of reference registration matrix between two \r\n  frame of references.\r\n  Parameters:\r\n    FromExaminationName - The name of the from examination \r\n      that defines the from frame of reference.\r\n    ToExaminationName - The name of the to examination that \r\n      defines the to frame of reference.\r\n    TransformationMatrix - The 4x4 rigid homogeneous \r\n      transformation matrix. Must be composed of rotations and \r\n      translations only.\r\n"}, {"base": "Patient.Cases.[]", "params": ["Name", "ExaminationName", "Description", "PlannedBy"], "method": "CreatePlanExploration", "description": "CreatePlanExploration(..)\r\n  Creates a new plan exploration.\r\n  Parameters:\r\n    Name - The name of the plan exploration.\r\n    ExaminationName - The name of the planning examination to \r\n      use for the plan exploration.\r\n    Description - A description of the plan exploration.\r\n    PlannedBy - Name of the planner of this exploration.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromExamination", "ToExamination"], "method": "GetTotalTransformForExaminations", "description": "GetTotalTransformForExaminations(..)\r\n  Gets the rigid transform between two examinations based on their \r\n  frame-of-reference registration (typically created by treatment \r\n  position alignment) and additional rigid transform. \r\n  If no additional rigid transform exists, only frame-of-reference \r\n  registration is used.\r\n  Parameters:\r\n    FromExamination - Name of FromExamination\r\n    ToExamination - Name of ToExamination\r\n  Returns:\r\n    Rigid transform as double array. Returns null if no \r\n    transform exists.\r\n"}, {"base": "Patient.Cases.[]", "params": ["PoiGeometryNames", "CreateNewPois", "StructureRegistrationGroupNames", "ReferenceExaminationNames", "TargetExaminationNames", "ReverseMapping", "AbortWhenBadDisplacementField"], "method": "MapPoiGeometriesDeformably", "description": "MapPoiGeometriesDeformably(..)\r\n  Map POI geometries according to selected deformable \r\n  registration(s).\r\n  Parameters:\r\n    PoiGeometryNames - The names of the POI geometries to map.\r\n    CreateNewPois - If true: for each PoiGeometry selected to \r\n      be mapped, a new POI is created with geometries (points) \r\n      defined in both the reference and the target image. The \r\n      geometry in the reference image is the same as the original \r\n      and the geometry in the target image is the mapped geometry. A \r\n      suffix is added to the POI name.\r\n      If false: for each PoiGeometry selected, a geometry (point) is \r\n      created in the target image corresponding to the mapped \r\n      position.\r\n      Default is false.\r\n    StructureRegistrationGroupNames - The name(s) of the \r\n      deformable registration group(s) to use for mapping.\r\n    ReferenceExaminationNames - The name(s) of the image(s) \r\n      where the deformation field(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    ReverseMapping - If true, geometries defined on the target \r\n      image are mapped to the reference image.\r\n      If false, geometries defined on the reference image are mapped \r\n      to the target image.\r\n      Default value is false.\r\n    AbortWhenBadDisplacementField - If true, geometries will \r\n      not be mapped if inverted deformation grid elements are \r\n      detected.\r\n      Default value is false.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromFrameOfReference", "ToFrameOfReference"], "method": "GetTransform", "description": "GetTransform(..)\r\n  Gets the rigid transform between two frame-of-references.\r\n  Parameters:\r\n    FromFrameOfReference - From frame-of-reference\r\n    ToFrameOfReference - To frame-of-reference\r\n  Returns:\r\n    Rigid transform as double array. Returns null if no \r\n    transform exists.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["Name", "Color", "Type", "TissueName", "RbeCellTypeName", "RoiMaterial"], "method": "CreateRoi", "description": "CreateRoi(..)\r\n  Create a new ROI.\r\n  Parameters:\r\n    Name - The name of the new ROI.\r\n    Color - Display color of the ROI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * External: External patient contour.\r\n      * Ptv: Planning target volume (as defined in ICRU50).\r\n      * Ctv: Clinical target volume (as defined in ICRU50).\r\n      * Gtv: Gross tumor volume (as defined in ICRU50).\r\n      * TreatedVolume: Treated volume (as defined in ICRU50).\r\n      * IrradiatedVolume: Irradiated Volume (as defined in ICRU50).\r\n      * Bolus: Patient bolus to be used for external beam therapy.\r\n      * Avoidance: Region in which dose is to be minimized.\r\n      * Organ: Patient organ.\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Registration: Registration ROI\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * ContrastAgent: Volume into which a contrast agent has been \r\n      injected.\r\n      * Cavity: Patient anatomical cavity.\r\n      * BrachyChannel: Branchy therapy channel\r\n      * BrachyAccessory: Brachy therapy accessory device.\r\n      * BrachySourceApplicator: Brachy therapy source applicator.\r\n      * BrachyChannelShield: Brachy therapy channel shield.\r\n      * Support: External patient support device.\r\n      * Fixation: External patient fixation or immobilisation device.\r\n      * DoseRegion: ROI to be used as a dose reference.\r\n      * Control: ROI to be used in control of dose optimization and \r\n      calculation.\r\n      * FieldOfView: ROI to be used for representing the \r\n      Field-of-view in, e.g., a cone beam CT image.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n    TissueName - Name of the organ tissue. Optional.\r\n    RbeCellTypeName - Name of the organ RBE cell type. Optional.\r\n    RoiMaterial - Material that overrides ROI density. Optional.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRois", "DeformationGridVoxelSize"], "method": "CreateBiomechanicalDeformableRegistrationGroup", "description": "CreateBiomechanicalDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with biomechanical \r\n  deformable registrations for the selected reference examination \r\n  and target examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRois - The list with controlling ROIs.\r\n    DeformationGridVoxelSize - The deformation grid voxel size \r\n      in the DICOM patient-based coordinate system.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["BaseOnMaterial", "Name", "MassDensityOverride"], "method": "CreateMaterial", "description": "CreateMaterial(..)\r\n  Action for creating a new material based on another material. \r\n  Elemental atomic numbers, elemental masses, elemental weights and \r\n  mean excitation energy will be copied from the other material, \r\n  only density can be set.\r\n  Parameters:\r\n    BaseOnMaterial - The original material.\r\n    Name - Name must be unique, not consist of more than 16 \r\n      characters, not be empty and not only consist of whitespaces.\r\n    MassDensityOverride - The density of the new material.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["SourceTemplateName", "SourceExaminationsNames", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "UseMultiAtlas", "RigidInitializationVoxelSize"], "method": "CreateStructuresFromAtlas", "description": "CreateStructuresFromAtlas(..)\r\n  Create structures from template using atlas-based initialization.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationsNames - List of source (template) \r\n      examination names.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    UseMultiAtlas - \r\n    RigidInitializationVoxelSize - Voxel size used for \r\n      initialization of atlases images in rigid registration step.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["SourceTemplateName", "SourceExaminationName", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "InitializationOption"], "method": "CreateStructuresFromTemplate", "description": "CreateStructuresFromTemplate(..)\r\n  Create structures from template.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationName - The name of the source (template) \r\n      examination.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    InitializationOption - Initialization option. Possible \r\n      values;\r\n      * EmptyGeometries\r\n      * AlignImageCenters\r\n      * RigidRegistration\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["Names", "Colors"], "method": "CreateMarkerPois", "description": "CreateMarkerPois(..)\r\n  Identifies breast fiducials in a CT data set and creates the \r\n  corresponding marker POIs.\r\n  Parameters:\r\n    Names - The names of the marker POIs. Keys are: \r\n      \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". Values \r\n      defaults to: \"Superior\":\"MED\", \"Inferior\":\"INF\", \r\n      \"Medial\":\"MED\" and \"Lateral\":\"LAT\".\r\n    Colors - The display colors of the marker POIs. Use named \r\n      colors such as 'Red' or an ARGB value such as '#FFFF0000'. \r\n      Keys are: \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". \r\n      Values defaults to: \"Superior\":\"Purple\", \"Inferior\":\"Red\", \r\n      \"Medial\":\"Yellow\" and \"Lateral\":\"Blue\".\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["ROI", "Indices", "Vertices"], "method": "SetRoiGeometryRepresentationToTriangleMesh", "description": "SetRoiGeometryRepresentationToTriangleMesh(..)\r\n  Set the ROI geometry to a triangle mesh.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ROI - Name of the ROI that the triangle mesh shall be \r\n      assigned to.\r\n    Indices - Array with triangle mesh indices.\r\n    Vertices - Array with triangle mesh vertices.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["ReferenceRoiName", "TargetRoiName"], "method": "RoiSurfaceToSurfaceDistanceBasedOnDT", "description": "RoiSurfaceToSurfaceDistanceBasedOnDT(..)\r\n  Measures the distance between the surfaces of two ROI geometries \r\n  using a distance transform based approach. \r\n  Each point (/voxel) on the surface of the target roi will be \r\n  assigned the minimum distance to a point (/voxel) on the surface \r\n  of the reference roi. \r\n  Note that the measurements are not symmetric\r\n  A dictionary with average, max and min distances are returned\r\n  Parameters:\r\n    ReferenceRoiName - Name of roi from which surface to \r\n      compute the distance\r\n    TargetRoiName - Name of roi to which surface to compute \r\n      the distance\r\n  Returns:\r\n    A dictionary with \"Average\", \"Max\", and \"Min\" distances\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].ApprovedStructureSets.[].ApprovedRoiStructures.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].ApprovedStructureSets.[].ApprovedRoiStructures.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[].ApprovedStructureSets.[].ApprovedRoiStructures.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["PoiBaseName", "DelimitingRoiName", "LowDensityThreshold"], "method": "CreatePoisFromFiducialMarkers", "description": "CreatePoisFromFiducialMarkers(..)\r\n  Identifies fiducials in a CT data set and creates the \r\n  corresponding POIs.\r\n  User can select to identify fiducials inside a ROI or inside the \r\n  patient outline.\r\n  Parameters:\r\n    PoiBaseName - The base name of the marker POIs. POIs will \r\n      be labelled POI_id\r\n    DelimitingRoiName - Name of delimiting ROI. If left empty, \r\n      the External ROI will be used.\r\n    LowDensityThreshold - \r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["MetaFileName", "RoiNamesAndLabels", "UseGreaterOrEqual"], "method": "ImportSegmentationAsMetaImage", "description": "ImportSegmentationAsMetaImage(..)\r\n  Import segmentation as meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    RoiNamesAndLabels - Dictionary containing wanted ROI names \r\n      and their corresponding labels in the meta image\r\n    UseGreaterOrEqual - Default false. If true, ROI will be \r\n      equal to all voxels with values >= label\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["RoiA", "RoiB", "ComputeDistanceToAgreementMeasures"], "method": "ComparisonOfRoiGeometries", "description": "ComparisonOfRoiGeometries(..)\r\n   Computes overlap measures between two geometries for comparison.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Mean DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Max DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n  Parameters:\r\n    RoiA - The name of the ROI geometry A.\r\n    RoiB - The name of the ROI geometry B.\r\n    ComputeDistanceToAgreementMeasures - Determines if Mean \r\n      DTA and Max DTA are computed (computation time will increase).\r\n      If set to false, Mean DTA and Max DTA will not have \r\n      corresponding key/value entries in the return value.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["RoiNames", "RemoveHoles3D", "RemoveSmallContours", "AreaThreshold", "ReduceMaxNumberOfPointsInContours", "MaxNumberOfPoints", "CreateCopyOfRoi"], "method": "SimplifyContours", "description": "SimplifyContours(..)\r\n  Action for simplifying contours.\r\n  Parameters:\r\n    RoiNames - List of ROI names.\r\n    RemoveHoles3D - Remove holes in 3D.\r\n    RemoveSmallContours - Remove small contours.\r\n    AreaThreshold - Area threshold [cm^2].\r\n    ReduceMaxNumberOfPointsInContours - Reduce the number of \r\n      points in contours.\r\n    MaxNumberOfPoints - Max number of points.\r\n    CreateCopyOfRoi - Create copy of ROI.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["ModelExaminationName", "ThresholdLevel", "FieldOfViewRoiName", "ExternalMbsRoiName", "SupInfRange"], "method": "OutlineBodyOnCBCT", "description": "OutlineBodyOnCBCT(..)\r\n  Creates geometry for the External ROI for a limited \r\n  field-of-view CBCT examination.\r\n  Parameters:\r\n    ModelExaminationName - The name of the examination that \r\n      will be used as the model. Typically, the planning CT.\r\n      The External ROI must have geometry defined for this \r\n      examination.\r\n    ThresholdLevel - The threshold level used to guide an MBS \r\n      mesh based on the geometry of the External ROI for the \r\n      model examination. This value should be chosen such that \r\n      larger values correspond to \r\n      anatomy in the CBCT examination.\r\n    FieldOfViewRoiName - The name of the field-of-view ROI \r\n      geometry. This ROI defines the region in which\r\n      MBS adaptation is performed for the MBS mesh based on the \r\n      external geometry in the model\r\n      examination.\r\n    ExternalMbsRoiName - The name of the external MBS ROI.\r\n    SupInfRange - The sup/inf range used when creating the \r\n      model (in cm).\r\n      Should be given in CBCT coordinates.\r\n      If (0,0) is given, the whole external on the model examination \r\n      will be used.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["FromROI", "ToROI"], "method": "CopyRoiGeometryToAnotherROI", "description": "CopyRoiGeometryToAnotherROI(..)\r\n  Copy the ROI geometry of an ROI to another ROI.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromROI - Name of the ROI with the geometry to copy.\r\n    ToROI - Name of the ROI the geometry shall be copied to.\r\n"}, {"base": "Patient.Cases.[].PatientModel.StructureSets.[]", "params": ["ModelGeometry", "RoiGeometry", "NewRoi"], "method": "AdaptMeshToGeometryAndStoreAsNewRoi", "description": "AdaptMeshToGeometryAndStoreAsNewRoi(..)\r\n  Utility method for gold atlas data (part of gentle radiotherapy \r\n  project).\r\n  A geometry which is a triangle mesh (\"ModelGeometry\") is adapted \r\n  to another geometry of any shape (RoiGeometry). \r\n  The adapted triangle mesh is stored as a geometry for a ROI which \r\n  is created by the method (NewRoi).\r\n  Parameters:\r\n    ModelGeometry - Name of RoiGeometry (which has \r\n      representation Triangle Mesh) to use as model\r\n    RoiGeometry - Name of RoiGeometry to which the model \r\n      should be adapted\r\n    NewRoi - Name of RoiGeometry where to store the adapted \r\n      triangle mesh\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["Examination", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "ExternalName"], "method": "DetectBreastMarkers", "description": "DetectBreastMarkers(..)\r\n  For auto breast planning only.\r\n  Detect the SUP, INF, MED, LAT and ANT markers, and create external \r\n  ROI.\r\n  Parameters:\r\n    Examination - The name of the examination.\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    ExternalName - External ROI.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["SourceExamination", "TargetExaminationNames", "RoiNames"], "method": "CopyRoiGeometries", "description": "CopyRoiGeometries(..)\r\n  Copies RoiGeometries between structure sets.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExaminationNames - List of target examination names.\r\n    RoiNames - List of ROI names.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["Examination", "RoiNames", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMeshes", "description": "AdaptMbsMeshes(..)\r\n  Adapts MBS meshes to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    RoiNames - The ROI names.\r\n    CustomStatistics - Lookup table for custom image region \r\n      statistics per ROI.\r\n    CustomSettings - Lookup table for custom settings per ROI.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["RoiNames", "Examination", "Algorithm", "AreEmptyDependenciesAllowed"], "method": "UpdateDerivedGeometries", "description": "UpdateDerivedGeometries(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    RoiNames - The ROIs to update.\r\n    Examination - The target examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    AreEmptyDependenciesAllowed - If empty dependencies are \r\n      not allowed the resulting derived status will be set to 'Needs \r\n      update'\r\n      if any of the geometries that an ROI depends on are empty.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["Examination", "Point", "Volume", "Name", "Color", "Type"], "method": "CreatePoi", "description": "CreatePoi(..)\r\n  Create a new POI.\r\n  Parameters:\r\n    Examination - The examination on which the POI will be \r\n      defined. If Examination is null, Point and Volume will \r\n      disregarded.\r\n    Point - POI coordinates. Disregarded if Examination is null.\r\n    Volume - Volume of the point [cm^3]. Disregarded if \r\n      Examination is null.\r\n      In most cases a point has a zero volume, but if the point is \r\n      used to represent a detector for example, the volume can be \r\n      set to the volume of the detector.\r\n    Name - The name of the new POI.\r\n    Color - Display color of the POI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * Registration.\r\n      * Control: To be used in control of dose optimization and \r\n      calculation.\r\n      * DoseRegion: To be used as a dose reference.\r\n      * LocalizationPoint: Laser coordinate system origin.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryNames", "SmoothingRadius", "DesiredTriangleEdgeLength", "CreateNewRois"], "method": "CreateControllingRoiGeometries", "description": "CreateControllingRoiGeometries(..)\r\n  Creates controlling ROI geometries for reference and target \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination for \r\n      which to create the controlling roi meshes.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create controlling roi geometries based on the meshes \r\n      created on the reference examination.\r\n    RoiGeometryNames - The name of the roi geometry which the \r\n      controlling roi should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done\r\n    DesiredTriangleEdgeLength - Desired edge length (in cm) \r\n      for the triangles in the mesh created on the reference \r\n      examination.\r\n      Voxel size 0.1 x 0.1 x 0.1 will be used and a typical value \r\n      for DesiredTriangleEdgeLength is 0.3\r\n    CreateNewRois - If true, the controlling roi meshes will \r\n      be placed in a new roi.\r\n      If false, the controlling roi meshes will overwrite existing \r\n      roi geometries.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["SourceExamination", "TargetExamination", "RoiName"], "method": "CopyRoiGeometry", "description": "CopyRoiGeometry(..)\r\n  Copies an RoiGeometry from a source structure set to a target \r\n  structure set.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExamination - The target examination.\r\n    RoiName - The ROI name.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["ReferenceExaminationName", "TargetExaminationName", "FinalResolution", "DiscardImageInformation", "UsesControllingROIs", "DeformationStrategy"], "method": "GetAlgorithmSettingsForHybridDIR", "description": "GetAlgorithmSettingsForHybridDIR(..)\r\n  Gets the hybrid deformable registration algorithm settings used \r\n  when running \"Create hybrid deformable registrations\" from UI.\r\n  The resulting HybridAlgorithmSettingsData dictionary can be used \r\n  as input parameter to the scriptable action \r\n  CreateHybridDeformableRegistrationGroup, either as is or modified.\r\n  Parameters:\r\n    ReferenceExaminationName - Name of the reference \r\n      examination.\r\n    TargetExaminationName - Name of the target examination.\r\n    FinalResolution - \r\n    DiscardImageInformation - If to discard image information.\r\n    UsesControllingROIs - If to use controlling ROIs.\r\n    DeformationStrategy - Name of the deformation strategy \r\n      (\"Default\" or \"InternalLung\")\r\n  Returns:\r\n    A HybridAlgorithmSettingsData object (dictionary with \r\n    settings name and value).\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["MbsRois", "CreateNewRois", "Examination", "UseAtlasBasedInitialization"], "method": "MBSAutoInitializer", "description": "MBSAutoInitializer(..)\r\n  Initialize MBS meshes.\r\n  Parameters:\r\n    MbsRois - The list of MBS models. Each item in this list \r\n      maps case type / model to ROI name and color.\r\n      If CreateNewRois is false, RoiName must refer to an existing \r\n      ROI and RoiColor is ignored.\r\n      Example: [{ 'CaseType': \"PelvicMale\", 'ModelName': \"Bladder\", \r\n      'RoiName': \"Bladder_MBS\", 'RoiColor': \"Yellow\" },\r\n                { 'CaseType': \"PelvicMale\", 'ModelName': \"Rectum\", \r\n      'RoiName': \"Rectum\", 'RoiColor': \"Brown\" }]\r\n    CreateNewRois - True if new ROIs should be created. If it \r\n      is false, each item in MbsRois must refer to an existing ROI.\r\n    Examination - The examination.\r\n    UseAtlasBasedInitialization - True if atlas based \r\n      initialization should be used.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["PatientModelTemplate", "Examination"], "method": "AutoBreastAtlas", "description": "AutoBreastAtlas(..)\r\n  For auto breast planning only.\r\n  Create aHEART, aRTLUNG, aLTLUNG from a structure template atlas, \r\n  unless they already exist.\r\n  Parameters:\r\n    PatientModelTemplate - Name of the atlas for lung and heart.\r\n    Examination - Name of the examination.\r\n"}, {"base": "Patient.Cases.[].PatientModel", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRoiNames", "ControllingPoiNames", "FocusRoiNames", "AlgorithmSettings"], "method": "CreateHybridDeformableRegistrationGroup", "description": "CreateHybridDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with hybrid deformable \r\n  registrations for the selected reference examination and target \r\n  examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRoiNames - The list with ROI names for the \r\n      controlling ROIs.\r\n    ControllingPoiNames - The list with POI names for the \r\n      controlling POIs.\r\n    FocusRoiNames - The list with ROI names for the focus ROIs.\r\n    AlgorithmSettings - The algorithm settings.\r\n                  \r\n      Properties:\r\n                  \r\n        * NumberOfResolutionLevels\r\n          The number of resolution levels.\r\n        * InitialResolution\r\n          The deformation grid resolution (cm) at the initial \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.5, 0.5, 0.5).\r\n        * FinalResolution\r\n          The deformation grid resolution (cm) at the final \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.25, 0.25, 0.25).\r\n        * InitialGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the initial resolution \r\n      level. Typical value 2.0.\r\n        * FinalGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the final resolution \r\n      level. Typical value 0.333.\r\n        * InitialGridRegularizationWeight\r\n          The grid regularization weight at the initial resolution \r\n      level. Typical value 1500.0.\r\n        * FinalGridRegularizationWeight\r\n          The grid regularization weight at the final resolution \r\n      level. Typical value 400.0.\r\n        * ControllingRoiWeight\r\n          The controlling ROI weight. Typical value 0.5.\r\n        * ControllingPoiWeight\r\n          The controlling POI weight. Typical value 0.1.\r\n        * MaxNumberOfIterationsPerResolutionLevel\r\n          The maximum number of iterations per resolution level. \r\n      Typical value 1000.\r\n        * ImageSimilarityMeasure\r\n          The image similarity measure. Possible values: \r\n      \"CorrelationCoefficient\", \"MutualInformation\", \r\n      \"MixedCorrelationMutual\", \"None\".\r\n        * DeformationStrategy. Possible values: \"Default\", \r\n      \"InternalLung\".\r\n        * ConvergenceTolerance\r\n          The tolerance for convergence. Typical value 1e-5.\r\n      Example: \r\n                  \r\n        AlgorithmSettings = \r\n        {\r\n          'NumberOfResolutionLevels': 3,\r\n          'InitialResolution': { 'x': 0.5, 'y': 0.5, 'z': 0.5 },\r\n          'FinalResolution': { 'x': 0.25, 'y': 0.25, 'z': 0.25 },\r\n          'InitialGaussianSmoothingSigma': 2.0,\r\n          'FinalGaussianSmoothingSigma': 0.333,\r\n          'InitialGridRegularizationWeight': 1500.0,\r\n          'FinalGridRegularizationWeight': 400.0,\r\n          'ControllingRoiWeight': 0.5,\r\n          'ControllingPoiWeight': 0.1,\r\n          'MaxNumberOfIterationsPerResolutionLevel': 1000, \r\n          'ImageSimilarityMeasure': \"CorrelationCoefficient\",\r\n          'DeformationStrategy': \"DeformationStrategy\",\r\n          'ConvergenceTolerance': 1e-5\r\n        }\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[]", "params": ["ReferenceImageName", "TargetImageName", "RigidTransformation", "RoiNames"], "method": "ImageSimilarityForRigidRegistration", "description": "ImageSimilarityForRigidRegistration(..)\r\n  Compute image similarity between two images (reference and \r\n  target). A rigid transformation is applied to the reference image. \r\n  Use Patient.GetTransformForExaminations() with FromExamination as \r\n  reference and ToExamination as target to \r\n  get the transform corresponding to the frame-of-reference \r\n  registration.\r\n              \r\n  Only voxels inside the selected rois on the reference image are \r\n  considered. If no rois are selected, external geometry will be used\r\n   (i.e., consistent with rigid image registration algorithm)\r\n  Parameters:\r\n    ReferenceImageName - Name of the reference image. The \r\n      rigid transformation will be applied to this image.\r\n    TargetImageName - Name of the target image.\r\n    RigidTransformation - Rigid transformation as a double \r\n      array.\r\n    RoiNames - Names of the rois over which you want to \r\n      compute image similarity. If left empty the external geometry \r\n      will be used\r\n  Returns:\r\n    A dictionary with 'CorrelationCoefficient'\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromFrameOfReference", "ToFrameOfReference", "Point"], "method": "TransformPointFromFoRToFoR", "description": "TransformPointFromFoRToFoR(..)\r\n  Transforms a point (in DICOM patient coordinate system) from \r\n  FromFrameOfReference to ToFrameOfReference.\r\n  Parameters:\r\n    FromFrameOfReference - From frame-of-reference\r\n    ToFrameOfReference - To frame-of-reference\r\n    Point - Point to transform (in DICOM patient coordinate \r\n      system)\r\n  Returns:\r\n    Transformed point (in DICOM patient coordinate system). \r\n    Returns null if no transform exists.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromExaminationName", "ToExaminationName", "RigidTransformation", "RotationCenter", "RollDegrees", "PitchDegrees", "YawDegrees", "Translation"], "method": "SetRigidTransformation", "description": "SetRigidTransformation(..)\r\n  Sets the rigid transformation between two examinations.\r\n  Parameters:\r\n    FromExaminationName - The name of the from examination \r\n      that defines the from frame of reference.\r\n    ToExaminationName - The name of the to examination that \r\n      defines the to frame of reference.\r\n    RigidTransformation - The rigid transformation. Defined by \r\n      three rotation angles, a rotation center, and a translation.\r\n        RotationCenter - The pivot point for rotations [cm]. In \r\n      DICOM coordinates.\r\n        RollDegrees - Rotation about the Inferior-Superios axis \r\n      (DICOM: z, IEC: y).\r\n        PitchDegrees - Rotation about the Right-Left axis (DICOM: x, \r\n      IEC: x).\r\n        YawDegrees - Rotation about the Posterior-Anterior axis \r\n      (DICOM: -y, IEC: z).\r\n        Translation - The translation [cm]. In DICOM coordinates.\r\n                  \r\n      Example:\r\n        RigidTransformation = \r\n        { \r\n          'YawDegrees': 0.5, \r\n          'PitchDegrees': -3.1, \r\n          'RollDegrees': 7.32, \r\n          'Translation': { 'x': 1.1, 'y': -3.2, 'z': 2.8 }, \r\n          'RotationCenter': { 'x': 0, 'y': 0, 'z': 0 } \r\n        }\r\n                  \r\n      The order of transformations is \r\n        (1) negative rotation center shift\r\n        (2) yaw rotation about posterior-anterior axis\r\n        (3) pitch rotation about right-left axis,\r\n        (4) roll rotation about inferior-superior axis,\r\n        (5) positive rotation center shift\r\n        (6) translation\r\n                  \r\n      The matrix representing the rigid transformation is\r\n                  \r\n        M = T * Tc * R_roll * R_pitch * R_yaw * T-c, \r\n                  \r\n      where T is a translation matrix representing Translation, Tc \r\n      and T-c are translation matrices \r\n      representing rotation center shifts, and R_roll, R_pitch, and \r\n      R_yaw are rotation matrices \r\n      representing the respective rotations.\r\n"}, {"base": "Patient.Cases.[]", "params": ["Dose1", "Dose2", "Weight1", "Weight2", "DoseName"], "method": "SumTwoDoses", "description": "SumTwoDoses(..)\r\n  Sums two dose distributions.\r\n  Parameters:\r\n    Dose1 - The first dose distribution.\r\n    Dose2 - The second dose distribution.\r\n    Weight1 - The weight of the first dose distribution. Must \r\n      be a positive number.\r\n    Weight2 - The weight of the second dose distribution. Must \r\n      be a positive number.\r\n    DoseName - The name of the summed dose. Cannot be empty.\r\n"}, {"base": "Patient.Cases.[]", "params": ["RoiGeometryNames", "CreateNewRois", "StructureRegistrationGroupNames", "ReferenceExaminationNames", "TargetExaminationNames", "ReverseMapping", "AbortWhenBadDisplacementField"], "method": "MapRoiGeometriesDeformably", "description": "MapRoiGeometriesDeformably(..)\r\n  Map ROI geometries according to selected deformable \r\n  registration(s).\r\n  Parameters:\r\n    RoiGeometryNames - The names of the ROI geometries to map.\r\n    CreateNewRois - If true: for each RoiGeometry selected to \r\n      be mapped, a new ROI is created with geometries defined in \r\n      both the reference and the target image. The geometry in the \r\n      reference image is the same as the original and the geometry \r\n      in the target image is the mapped geometry. A suffix is added \r\n      to the ROI name.\r\n      If false: for each RoiGeometry selected a geometry is created \r\n      in the target image corresponding to the geometry mapped from \r\n      the reference image.\r\n      Default is false.\r\n    StructureRegistrationGroupNames - The name(s) of the \r\n      deformable registration group(s) to use for mapping.\r\n    ReferenceExaminationNames - The name(s) of the image(s) \r\n      where the deformation field(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    ReverseMapping - If true, geometries defined on the target \r\n      image are mapped to the reference image.\r\n      If false, geometries defined on the reference image are mapped \r\n      to the target image.\r\n      Default value is false.\r\n    AbortWhenBadDisplacementField - If true, geometries will \r\n      not be mapped if inverted deformation grid elements are \r\n      detected.\r\n      Default value is false.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[]", "params": ["ValidationDataSet", "PhantomName", "Plan", "Name", "Modality", "MachineName", "TreatmentTechnique", "Beams", "Name", "MonitorUnits", "SourceToSurfaceDistance", "BeamQualityName", "ApplicatorName", "IsoCenterToSurfaceDistance", "SnoutName", "SnoutPosition", "PrescribedSOBPRange", "PrescribedSOBPWidth", "SpotTuneID", "SpotSpacing", "NominalEnergy", "FieldSize", "SpotPositions", "SpotWeights", "Compensator", "MaterialName", "Thickness", "BlockAperture", "Type", "Dimension", "Position", "MaxRadius", "Thickness", "NominalBeamEnergy", "FirstScattererThickness", "RidgeFilter", "DoseComputationParameters", "DoseEngineName", "DoseGridResolution", "NumberOfHistoriesPerCM2"], "method": "CreateTreatmentPlanFromValidationDataSet", "description": "CreateTreatmentPlanFromValidationDataSet(..)\r\n  Creates an electron or ion treatment plan from a data set.\r\n  This action is experimental - use with care\r\n  Parameters:\r\n    ValidationDataSet - Validation data set should be in the \r\n      form of a dictionary with the fields listed below. Some fields \r\n      are specific for either electron or ion plans.\r\n                  \r\n      PhantomName           - The name of the phantom to be used in \r\n      the plan\r\n      Plan                  - This field contains information about \r\n      the treatment plan which will be created\r\n        Name                - The name of the created plan\r\n        Modality            - Treatment modality\r\n        MachineName         - The name of the machine to be used in \r\n      the plan\r\n        TreatmentTechnique  - Treatment technique: \r\n      \"ApplicatorAndCutout\" for electrons, \"DoubleScattering\", \r\n      \"UniformScanning\", \"Wobbling\", \"PencilBeamScanning\" or \r\n      \"LineScanning\" for ions (only PBS for carbon ions) \r\n        Beams               - List of beams with each beam \r\n      containing the information below\r\n          Name                        - Name of the beam\r\n          MonitorUnits                - Number of monitor units\r\n          SourceToSurfaceDistance     - Source to surface distance \r\n      in [cm] (only for electrons)\r\n          BeamQualityName             - Beam quality, e.g. \"E04\" \r\n      where the nominal energy is 4 MeV (only for electrons)\r\n          ApplicatorName              - Name of the applicator to be \r\n      used in the plan (only for electrons)\r\n          IsoCenterToSurfaceDistance  - Isocenter to phantom surface \r\n      distance in [cm] (only for ions)\r\n          SnoutName                   - The name of the snout to be \r\n      used (only for ions)\r\n          SnoutPosition               - The snout position in [cm] \r\n      (only for ions)\r\n          PrescribedSOBPRange         - The prescribed SOBP range in \r\n      [cm] (only for passive ions)\r\n          PrescribedSOBPWidth         - The prescribed SOBP \r\n      modulation width in [cm] (only for passive ions)\r\n          SpotTuneID                  - The fixed spot tune ID (only \r\n      for scanned ions)\r\n          SpotSpacing                 - The distance in [cm] between \r\n      spots (only for scanned ions)\r\n          NominalEnergy               - Nominal ion beam energy in \r\n      [MeV] (only for scanned ions)\r\n          FieldSize                   - The side in [cm] of a \r\n      scanned quadratic field (only for scanned ions)\r\n          SpotPositions               - The position of the spots \r\n      (only for scanned ions)\r\n          SpotWeights                 - The weight of each point in \r\n      SpotPositions (only for scanned ions)\r\n          Compensator                 - This field contains \r\n      information about range compensator (optional for passive \r\n      ions, may be omitted)\r\n            MaterialName              - Name of the range \r\n      compensator's material\r\n            Thickness                 - Thickness in [cm] of the \r\n      range compensator\r\n          BlockAperture               - The block aperture in a ions \r\n      plan (required for passive ions) or cutout in an electron plan \r\n      (optional for electrons, may be omitted)\r\n            Type                      - Type of block: \"Quadratic\", \r\n      \"Rectangular\" or \"SquareRoundCorners\"\r\n            Dimension                 - Dimension of block in [cm], \r\n      e.g. [10, 10] (for quadratic) or [10,20] (for rectangular) or \r\n      [15, 0] (for circular blocks) \r\n            Position                  - Lower corner position of \r\n      block in [cm]. Can only be used for blocks with Type == \r\n      \"Rectangular\". Format [x,y]\r\n            MaxRadius                 - Maximum allowed radius in \r\n      the isocenter plane in [cm]. Should be used for blocks with \r\n      Type == \"SquareRoundCorners\"\r\n            Thickness                 - The thickness of the block \r\n      in [cm]\r\n          NominalBeamEnergy           - The nominal beam energy \r\n      [MeV] (only for Sumitomo Wobbling beams)\r\n          FirstScattererThickness     - The first scatter thickness, \r\n      i.e total thickness of used lollipops [cm] (only for Sumitomo \r\n      Wobbling beams)\r\n          RidgeFilter                 - The name of the ridge filter \r\n      to be used (only for Sumitomo Wobbling beams)\r\n      DoseComputationParameters       - This field contains \r\n      information about the dose computation parameters\r\n          DoseEngineName              - The name of the dose engine \r\n      to be used: \"ElectronMonteCarlo\" (only for electrons), \r\n      \"IonPencilBeam\" (only for passive ions) or \r\n      \"SpotWeightPencilBeam\" (only for pbs ions) \r\n          DoseGridResolution          - The side of a cubic voxel in \r\n      [cm]\r\n          NumberOfHistoriesPerCM2     - The number of histories per \r\n      cm2 (must be specified for both electrons and ions, it is \r\n      however only used for the ElectronMonteCarlo dose engine)\r\n"}, {"base": "Patient.Cases.[]", "params": ["FractionNumber", "AdaptToPlanName", "UseTreatmentDeliveryAsSource", "PlanName", "PlannedBy", "Comment", "ExaminationName", "AllowDuplicateNames"], "method": "AddNewAdaptivePlan", "description": "AddNewAdaptivePlan(..)\r\n  Action for creating a new adapted plan.\r\n              \r\n  Prerequisite: deformable image registration (DIR) with new \r\n  planning image as reference image and original planning image as \r\n  target image. \r\n  The DIR should be approved for dose accumulation.\r\n              \r\n  Example:\r\n  # add new adapted plan from fraction 10 to a plan with one beam \r\n  set using planning image \"RESCAN\"\r\n  patient = get_current(\"Patient\")\r\n  case = get_current(\"Case\")\r\n  plan=get_current(\"Plan\")\r\n  beam_set=get_current(\"BeamSet\")\r\n  adapt_from_fx = 10\r\n  adapted_ct = \"RESCAN\"\r\n  tot_nr_fx = len([tf for tf in \r\n  plan.TreatmentCourse.TreatmentFractions])\r\n              \r\n  adapted_plan = case.AddNewAdaptivePlan(FractionNumber= \r\n  adapt_from_fx, AdaptToPlanName= plan.Name, \r\n  UseTreatmentDeliveryAsSource= True,\r\n  PlanName= \"Adapted plan\", PlannedBy= None, Comment= \"\", \r\n  ExaminationName= adapted_ct, AllowDuplicateNames= False)\r\n  treatment_technique = beam_set.GetTreatmentTechniqueType()\r\n              \r\n  beam_set_settings = {'NumberOfRemainingFractions': tot_nr_fx - \r\n  adapt_from_fx, 'MachineName': \r\n  beam_set.MachineReference.MachineName, \r\n  'CreateSetupBeams': true, 'DicomPlanLabelOfOriginalBeamSet': \r\n  beam_set.DicomPlanLabel, 'ClearBeamModifiers': false, \r\n  'RemoveBeams': false, 'TreatmentTechnique': treatment_technique}\r\n  adapted_plan.AddBeamSetsToAdaptedPlan(AdaptedBeamSets=[beam_set_settings])\r\n  \r\n  adapted_beam_set = adapted_plan.BeamSets[0]\r\n  prescription = beam_set.Prescription.PrimaryDosePrescription\r\n  adapted_beam_set.AddDosePrescriptionToRoi(\r\n  RoiName=prescription.OnStructure.Name,\r\n  DoseVolume=prescription.DoseVolume,\r\n  PrescriptionType=prescription.PrescriptionType,\r\n  DoseValue=prescription.DoseValue,\r\n  RelativePrescriptionLevel=prescription.RelativePrescriptionLevel,\r\n  AutoScaleDose=False)\r\n  Parameters:\r\n    FractionNumber - Fraction for which to start the delivery \r\n      of the adapted plan. \r\n      FractionNumber has to be less or equal to the number of \r\n      fractions for the original plan + 1.\r\n      If 'UseTreatmentDeliveryAsSource', FractionNumber needs to be \r\n      larger than the number of delivered fractions\r\n    AdaptToPlanName - Name of the plan for which adaptation \r\n      should be done\r\n    UseTreatmentDeliveryAsSource - Sets if background dose \r\n      during optimization should be \r\n      - delivered accumulated dose (as computed in DoseTracking \r\n      workspace and store as TreatmentCourse under \r\n      TreatmentDelivery) [TRUE], or\r\n      - planned accumulated dose [FALSE]\r\n    PlanName - Name of the new plan.\r\n    PlannedBy - Name of the planner.\r\n    Comment - Comments of the new plan.\r\n    ExaminationName - The name of the planning image set \r\n      defined for the new plan\r\n    AllowDuplicateNames - Skip uniqueness test for name (used \r\n      by fallback plans).\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanInfo"], "method": "LoadPlan", "description": "LoadPlan(..)\r\n  Loads a plan from a patient. Returns a handle to the plan.\r\n  Example:\r\n    To return a handle to the first plan in a list retrieved \r\n    from QueryPlanInfo:\r\n    plans = patient.QueryPlanInfo(PlanInfo = {'Name': 'Plan1'} )\r\n    plan = db.LoadPlan( PlanInfo = plans[0] )\r\n  Parameters:\r\n    PlanInfo - Information about the plan to be selected. The \r\n      plan info must match one and only one patient.\r\n  Returns:\r\n    The loaded plan.\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanName", "Examination", "PlannedBy", "DoseGridResolution", "NumberOfFractions", "TreatmentMachine", "CreateSetupBeams", "UniformDoseToTarget", "TargetName", "TargetColor"], "method": "CreateBreastPlan", "description": "CreateBreastPlan(..)\r\n  For auto breast planning only.\r\n  Creates plan and beam set, sets up prescription, creates dose grid\r\n  Parameters:\r\n    PlanName - Name of the new plan.\r\n    Examination - Name of the examination set to be used.\r\n    PlannedBy - Planned by\r\n    DoseGridResolution - Dose grid resolution.\r\n    NumberOfFractions - Number of fractions.\r\n    TreatmentMachine - Name of the Treatment machine.\r\n    CreateSetupBeams - Create setup beams.\r\n    UniformDoseToTarget - Prescription in cGy to CTV.\r\n    TargetName - Name of the target ROI ('aCTV').\r\n    TargetColor - Color of the target ROI.\r\n"}, {"base": "Patient.Cases.[]", "params": ["StructureRegistration"], "method": "DeleteDeformableRegistration", "description": "DeleteDeformableRegistration(..)\r\n  Deletes a deformable registration.\r\n  Note: only deformable registrations with no dependent doses can be \r\n  deleted.\r\n  Parameters:\r\n    StructureRegistration - registration to be deleted\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromFrameOfReference", "ToFrameOfReference"], "method": "DeleteRegistrationCreatedByTreatmentPositionAlignment", "description": "DeleteRegistrationCreatedByTreatmentPositionAlignment(..)\r\n  Method for deleting frame-of-reference registration created by \r\n  treatment position alignment.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromFrameOfReference - From frame-of-reference\r\n    ToFrameOfReference - To frame-of-reference string\r\n"}, {"base": "Patient.Cases.[]", "params": ["SettingsData"], "method": "CreateOrUpdateSettings", "description": "CreateOrUpdateSettings(..)\r\n  Creates (if not exists) or updates (if exists) \r\n  AutoBreastSettings on specified TreatmentCase.\r\n  Parameters:\r\n    SettingsData - Gets or sets an object representing the \r\n      settings that will be used.\r\n      If not set, default settings will be used.\r\n"}, {"base": "Patient.Cases.[].Examinations.[]", "params": ["TransformationMatrix", "CenterOfRotation"], "method": "GetAffineTransformationParametersGivenCenterOfRotation", "description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n"}, {"base": "Patient.Cases.[].Examinations.[]", "params": ["MetaFileName"], "method": "ExportExaminationAsMetaImage", "description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n"}, {"base": "Patient.Cases.[].Examinations.[]", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "method": "CreateTransformedExamination", "description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n"}, {"base": "Patient.Cases.[].Examinations.[]", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "method": "SetTreatmentPositionAlignmentRegistration", "description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n"}, {"base": "Patient.Cases.[].Examinations.[].EquipmentInfo", "params": ["HU", "Rho"], "method": "SetImageSpecificCtToDensityTable", "description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n"}, {"base": "Patient.Cases.[].Examinations.[].EquipmentInfo", "params": ["DensityThresholds"], "method": "SetCtToDensityTableForCbctImage", "description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n"}, {"base": "Patient.Cases.[].Examinations.[].EquipmentInfo", "params": ["ImagingSystemName"], "method": "SetImagingSystemReference", "description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n"}, {"base": "Patient.Cases.[].Examinations.[].EquipmentInfo", "params": ["FromExaminationName"], "method": "CopyCtToDensityTableFromAnotherCbctImage", "description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n"}, {"base": "Patient.Cases.[].Examinations.[]", "params": ["Group", "Element"], "method": "GetStoredDicomTagValueForVerification", "description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n"}, {"base": "Patient.Cases.[].Examinations.[]", "params": ["MinCorner", "MaxCorner"], "method": "CropImageStackAndStoreAsNewExamination", "description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n"}, {"base": "Patient.Cases.[].Examinations.[]", "params": ["FileName"], "method": "WriteStoredDicomDataSetToFileForVerification", "description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n"}, {"base": "Patient.Cases.[].Examinations.[].Series.[].ImageStack", "params": ["RoiName"], "method": "GetIntensityStatistics", "description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n"}, {"base": "Patient.Cases.[].Examinations.[].Series.[].ImageStack", "params": ["DoseGrid", "Scaling"], "method": "GetResampledPETValues", "description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n"}, {"base": "Patient.Cases.[].Examinations.[].Series.[].ImageStack", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "method": "GetImageStackHistogram", "description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n"}, {"base": "Patient.Cases.[].Examinations.[].Series.[].ImageStack", "params": ["DoseGrid", "Reference", "LookUp"], "method": "GetResampledAndScaledPixelData", "description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n"}, {"base": "Patient.Cases.[].Examinations.[].Series.[].ImageStack", "params": ["DoseGrid"], "method": "GetResampledPixelData", "description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n"}, {"base": "Patient.Cases.[]", "params": ["ExaminationName", "NewExaminationName"], "method": "CopyExamination", "description": "CopyExamination(..)\r\n  Method that copies the examination with name ExaminationName to \r\n  a new examination with name\r\n  NewExaminationName.\r\n  Parameters:\r\n    ExaminationName - Name of the examination to copy.\r\n    NewExaminationName - Name of the new copied examination. \r\n      Must be unique and cannot exceed 64 characters.\r\n"}, {"base": "Patient.Cases.[]", "params": ["RoiGeometryNames", "CreateNewRois", "ReferenceExaminationName", "TargetExaminationNames", "Transformations"], "method": "MapRoiGeometriesRigidly", "description": "MapRoiGeometriesRigidly(..)\r\n  Map ROI geometries according to selected transformation(s).\r\n  Parameters:\r\n    RoiGeometryNames - The names of the ROI geometries to map.\r\n    CreateNewRois - If true: for each RoiGeometry selected to \r\n      be mapped, a new ROI is created with geometries defined in \r\n      both the reference and the target image. The geometry in the \r\n      reference image is the same as the original and the geometry \r\n      in the target image is the mapped geometry. A suffix is added \r\n      to the ROI name.\r\n      If false: for each RoiGeometry selected a geometry is created \r\n      in the target image corresponding to the geometry mapped from \r\n      the reference image.\r\n      Default is false.\r\n    ReferenceExaminationName - The name of the image from \r\n      which the transformation(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    Transformations - The transformation(s) from the reference \r\n      image(s) to the target image(s).\r\n      Transformations are given in homogeneous coordinates, e.g., \r\n      the identity transform is \r\n      {'M11' : 1, 'M12': 0, 'M13': 0, 'M14': 0, \\\r\n      'M21' : 0, 'M22': 1, 'M23': 0, 'M24': 0, \\\r\n      'M31' : 0, 'M32': 0, 'M33': 1, 'M34': 0,\\\r\n      'M41' : 0, 'M42': 0, 'M43': 0, 'M44': 1}\r\n"}, {"base": "Patient.Cases.[]", "params": ["ExaminationName", "ExaminationGroupName", "ProjectionMethod"], "method": "Create4DCTProjection", "description": "Create4DCTProjection(..)\r\n  Creates a projection of a 4DCT using minimum-, maximum- or \r\n  average intensity projection.\r\n  Parameters:\r\n    ExaminationName - Name of the output examination.\r\n    ExaminationGroupName - Name of the input examination group.\r\n    ProjectionMethod - The projection method. Possible values:\r\n      * MaximumIntensity\r\n      * MinimumIntensity\r\n      * AverageIntensity\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromExamination", "ToExamination", "Point"], "method": "TransformPointFromExaminationToExaminationUsingTotalTransform", "description": "TransformPointFromExaminationToExaminationUsingTotalTransform(..)\r\n  Transforms a point (in DICOM patient coordinate system) from \r\n  FromExamination to ToExamination using the total transform \r\n  (combining frame-of-reference registration with additional rigid \r\n  transform if such exists).\r\n  Parameters:\r\n    FromExamination - Name of FromExamination\r\n    ToExamination - Name of ToExamination\r\n    Point - Point to transform (in DICOM patient coordinate \r\n      system)\r\n  Returns:\r\n    Transformed point (in DICOM patient coordinate system). \r\n    Returns null if no transform exists.\r\n"}, {"base": "Patient.Cases.[]", "params": ["FromImageName", "ToImageName", "RoiGeometryName", "RigidTransformation"], "method": "SimilarityForRigidlyMappedRoiGeometry", "description": "SimilarityForRigidlyMappedRoiGeometry(..)\r\n   Maps a RoiGeometry RG in the \"from\" image to the \"to\" image \r\n  using a rigid transform, resulting in RG_map, \r\n   and computes similarity measures between RG_map, below denoted \r\n  ROIB, and RG, below denoted ROIA, in the target image.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned\r\n   Unit is cm\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned\r\n   Unit is cm\r\n   \r\n   Use Patient.GetTransformForExaminations or \r\n  Patient.GetTotalTransformForExaminations to get the rigid \r\n  transformation.\r\n  Parameters:\r\n    FromImageName - Name of the from image.\r\n    ToImageName - Name of the to image.\r\n    RoiGeometryName - Name of RoiGeometry to investigate.\r\n    RigidTransformation - Rigid transformation as a double \r\n      array.\r\n  Returns:\r\n    Dictionary with measure name and value.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["Name", "ExaminationName", "MachineName", "Modality", "TreatmentTechnique", "*Conformal", "*SMLC", "*VMAT", "*DMLC", "*StaticArc", "*TomoHelical", "*ProtonPencilBeamScanning", "*LineScanning", "*UniformScanning", "*Wobbling", "*SingleScattering", "*DoubleScattering", "*ApplicatorAndCutout", "*CarbonPencilBeamScanning", "PatientPosition", "NumberOfFractions", "CreateSetupBeams", "UseLocalizationPointAsSetupIsocenter", "Comment", "RbeModelReference", "EnableDynamicTrackingForVero"], "method": "AddNewBeamSet", "description": "AddNewBeamSet(..)\r\n  Adds a new beam set.\r\n  Parameters:\r\n    Name - The name of the new beam set.\r\n    ExaminationName - The name of the examination on which the \r\n      beam set is defined.\r\n    MachineName - The name on the treatment machine. The \r\n      latest commissioned version og this machine will be used.\r\n    Modality - The treatment modality.\r\n      * Photons\r\n      * Protons\r\n      * Carbon\r\n      * Electrons\r\n    TreatmentTechnique - Treatment technique.\r\n      * Conformal                - Photons 3DCRT treatment technique.\r\n      * SMLC                     - Photons SMLC treatment technique.\r\n      * VMAT                     - Photons VMAT treatment technique\r\n      * DMLC                     - Photons DMLC.\r\n      * StaticArc                - Photons static arc.\r\n      * TomoHelical              - Photons tomo helical.\r\n      * ProtonPencilBeamScanning - Protons pencil beam scanning.\r\n      * LineScanning             - Protons line scanning.\r\n      * UniformScanning          - Protons uniform scanning.\r\n      * Wobbling                 - Protons wobbling scanning.\r\n      * SingleScattering         - Protons single scattering.\r\n      * DoubleScattering         - Protons double scattering.\r\n      * ApplicatorAndCutout      - Electrons applicator and cutout.\r\n      * CarbonPencilBeamScanning - Carbon pencil beam scanning.\r\n    PatientPosition - Specifies the position of the patient \r\n      relative to the treatment/image equipment space.\r\n      * HeadFirstProne\r\n      * HeadFirstSupine\r\n      * FeetFirstProne\r\n      * FeetFirstSupine\r\n      * HeadFirstDecubitusLeft\r\n      * HeadFirstDecubitusRight\r\n      * FeetFirstDecubitusLeft\r\n      * FeetFirstDecubitusRight\r\n    NumberOfFractions - The number of fractions in the new \r\n      beam set.\r\n    CreateSetupBeams - Whether setup beams shall be created in \r\n      this beam set.\r\n    UseLocalizationPointAsSetupIsocenter - True to use \r\n      localization point instead of isocenter from treatment beams \r\n      for the setup beams\r\n    Comment - The beam set comment\r\n    RbeModelReference - The RBE model to use for an ion \r\n      radiation set; or null if no RBE model is used\r\n    EnableDynamicTrackingForVero - Indicates if Dynamic \r\n      tracking for the Vero Linac is enabled or disabled\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["Filter"], "method": "QueryBeamSetInfo", "description": "QueryBeamSetInfo(..)\r\n  Returns info on all beam sets on a treatment plan.\r\n  Example:\r\n    To return info on all beam sets with the exact name \r\n    'BeamSet1' in a treatment plan:\r\n    info = treatmentPlan.QueryBeamSetInfo(Filter = {'Name': \r\n    '^BeamSet1$'}\r\n  Parameters:\r\n    Filter - Filter using regular expressions.  \r\n                  Possible keys:\r\n                     *Id\r\n                     *Name\r\n                     *ApprovalStatus\r\n                     *IsImmutable\r\n                     *IsClinical\r\n                     *HasDose\r\n                     *DoseAlgorithm\r\n                     *AlgorithmVersion\r\n  Returns:\r\n    List of beam set information.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["BeamSetNames"], "method": "SetBeamSetsToOptimizeSimultaneously", "description": "SetBeamSetsToOptimizeSimultaneously(..)\r\n  Sets beam sets to be optimized simultaneously\r\n  Parameters:\r\n    BeamSetNames - The name of the beam sets that should be \r\n      optimized simultaneously\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["Coordinate"], "method": "SetDefaultViewPosition", "description": "SetDefaultViewPosition(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Coordinate - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["DependentBeamSetName", "BackgroundBeamSetName", "DependencyUpdate"], "method": "UpdateDependency", "description": "UpdateDependency(..)\r\n  Changes the way a beam set depends on the other beam set. When a \r\n  beam set is set as dependent, the other beam set dose is used as \r\n  background dose.\r\n  Any prescriptions or optimization functions \r\n  defined on the dependent beam set will be removed.\r\n  Parameters:\r\n    DependentBeamSetName - The beam set that will be or is \r\n      dependent.\r\n    BackgroundBeamSetName - The beam set that will be the \r\n      background beam set.\r\n    DependencyUpdate - How dependency should be updated.\r\n      * CreateDependency\r\n      * RemoveDependency\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["TreatmentDelivery"], "method": "PreparePlanForDelivery", "description": "PreparePlanForDelivery(..)\r\n  Action for preparing a treatment plan for delivery. Will copy \r\n  fractions from planning treatment course to delivery.\r\n  Parameters:\r\n    TreatmentDelivery - The TreatmentDelivery object that will \r\n      be used for treatment delivery.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["RoiNamesAndMaterialNames", "OverwriteExisting"], "method": "SetDensityDistribution", "description": "SetDensityDistribution(..)\r\n  Action for setting a density distribution based on a set of rois \r\n  and corresponding materials. \r\n  At least the external roi needs to be included in the list.\r\n  Only overrides inside external are considered.\r\n  Parameters:\r\n    RoiNamesAndMaterialNames - Dictionary with ROIs and their \r\n      materials\r\n    OverwriteExisting - If the density disitribution is \r\n      already defined and has the same version number as current, it \r\n      can be overwritten by setting OverwriteExisting to true.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["AdaptedBeamSets", "NumberOfRemainingFractions", "MachineName", "CreateSetupBeams", "ClearBeamModifiers", "RemoveBeams", "NOTE"], "method": "AddBeamSetsToAdaptedPlan", "description": "AddBeamSetsToAdaptedPlan(..)\r\n  Action for adding beamsets to an adapted plan.\r\n  Prerequisite:\r\n    Can only be used on adapted plans with no beam set(s)\r\n              \r\n  Example:\r\n  # add new adapted plan from fraction 10 to a plan with one beam \r\n  set using planning image \"RESCAN\"\r\n  patient = get_current(\"Patient\")\r\n  case = get_current(\"Case\")\r\n  plan=get_current(\"Plan\")\r\n  beam_set=get_current(\"BeamSet\")\r\n  adapt_from_fx = 10\r\n  adapted_ct = \"RESCAN\"\r\n  tot_nr_fx = len([tf for tf in \r\n  plan.TreatmentCourse.TreatmentFractions])\r\n              \r\n  adapted_plan = case.AddNewAdaptivePlan(FractionNumber= \r\n  adapt_from_fx, AdaptToPlanName= plan.Name, \r\n  UseTreatmentDeliveryAsSource= True,\r\n  PlanName= \"Adapted plan\", PlannedBy= None, Comment= \"\", \r\n  ExaminationName= adapted_ct, AllowDuplicateNames= False)\r\n  treatment_technique = beam_set.GetTreatmentTechniqueType()\r\n              \r\n  beam_set_settings = {'NumberOfRemainingFractions': tot_nr_fx - \r\n  adapt_from_fx, 'MachineName': \r\n  beam_set.MachineReference.MachineName, \r\n  'CreateSetupBeams': true, 'DicomPlanLabelOfOriginalBeamSet': \r\n  beam_set.DicomPlanLabel, 'ClearBeamModifiers': false, \r\n  'RemoveBeams': false, 'TreatmentTechnique': treatment_technique}\r\n  adapted_plan.AddBeamSetsToAdaptedPlan(AdaptedBeamSets=[beam_set_settings])\r\n  \r\n  adapted_beam_set = adapted_plan.BeamSets[0]\r\n  prescription = beam_set.Prescription.PrimaryDosePrescription\r\n  adapted_beam_set.AddDosePrescriptionToRoi(\r\n  RoiName=prescription.OnStructure.Name,\r\n  DoseVolume=prescription.DoseVolume,\r\n  PrescriptionType=prescription.PrescriptionType,\r\n  DoseValue=prescription.DoseValue,\r\n  RelativePrescriptionLevel=prescription.RelativePrescriptionLevel,\r\n  AutoScaleDose=False)\r\n  Parameters:\r\n    AdaptedBeamSets - List of AdaptedBeamSetSettings\r\n      Settings is stored as a dictionary on form \r\n      \"NumberOfRemainingFractions\", \"MachineName\",\r\n      \"CreateSetupBeams\", \"DicomPlanLabelOfOriginalBeamSet\",\r\n      \"ClearBeamModifiers\", \"RemoveBeams\", \"TreatmentTechnique\"\r\n                  \r\n      NumberOfRemainingFractions - Number of remaining fractions.\r\n      MachineName - Name of the machine. The last commissioned \r\n      machine in the database will be used.\r\n      CreateSetupBeams - Set to true if setupbeams shall be created.\r\n      ClearBeamModifiers - Set to true if beam contents shall be \r\n      cleared.\r\n      RemoveBeams - Set to true if all beams should be removed.\r\n      NOTE - If both RemoveBeams and ClearBeamModifiers are true, \r\n      beams will be removed. If both are false nothing will be done.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["AdaptToRadiationSet", "RemoveBeams", "ClearBeamModifiers", "Name", "ExaminationName", "MachineName", "Modality", "TreatmentTechnique", "*Conformal", "*SMLC", "*VMAT", "*DMLC", "*StaticArc", "*TomoHelical", "*ProtonPencilBeamScanning", "*LineScanning", "*UniformScanning", "*Wobbling", "*SingleScattering", "*DoubleScattering", "*ApplicatorAndCutout", "*CarbonPencilBeamScanning", "PatientPosition", "NumberOfFractions", "CreateSetupBeams", "UseLocalizationPointAsSetupIsocenter", "Comment", "RbeModelReference", "EnableDynamicTrackingForVero"], "method": "AddNewAdaptedBeamSet", "description": "AddNewAdaptedBeamSet(..)\r\n  Composite action for adding\r\n  Parameters:\r\n    AdaptToRadiationSet - Radiation set to adapt to.\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n    Name - The name of the new beam set.\r\n    ExaminationName - The name of the examination on which the \r\n      beam set is defined.\r\n    MachineName - The name on the treatment machine. The \r\n      latest commissioned version og this machine will be used.\r\n    Modality - The treatment modality.\r\n      * Photons\r\n      * Protons\r\n      * Carbon\r\n      * Electrons\r\n    TreatmentTechnique - Treatment technique.\r\n      * Conformal                - Photons 3DCRT treatment technique.\r\n      * SMLC                     - Photons SMLC treatment technique.\r\n      * VMAT                     - Photons VMAT treatment technique\r\n      * DMLC                     - Photons DMLC.\r\n      * StaticArc                - Photons static arc.\r\n      * TomoHelical              - Photons tomo helical.\r\n      * ProtonPencilBeamScanning - Protons pencil beam scanning.\r\n      * LineScanning             - Protons line scanning.\r\n      * UniformScanning          - Protons uniform scanning.\r\n      * Wobbling                 - Protons wobbling scanning.\r\n      * SingleScattering         - Protons single scattering.\r\n      * DoubleScattering         - Protons double scattering.\r\n      * ApplicatorAndCutout      - Electrons applicator and cutout.\r\n      * CarbonPencilBeamScanning - Carbon pencil beam scanning.\r\n    PatientPosition - Specifies the position of the patient \r\n      relative to the treatment/image equipment space.\r\n      * HeadFirstProne\r\n      * HeadFirstSupine\r\n      * FeetFirstProne\r\n      * FeetFirstSupine\r\n      * HeadFirstDecubitusLeft\r\n      * HeadFirstDecubitusRight\r\n      * FeetFirstDecubitusLeft\r\n      * FeetFirstDecubitusRight\r\n    NumberOfFractions - The number of fractions in the new \r\n      beam set.\r\n    CreateSetupBeams - Whether setup beams shall be created in \r\n      this beam set.\r\n    UseLocalizationPointAsSetupIsocenter - True to use \r\n      localization point instead of isocenter from treatment beams \r\n      for the setup beams\r\n    Comment - The beam set comment\r\n    RbeModelReference - The RBE model to use for an ion \r\n      radiation set; or null if no RBE model is used\r\n    EnableDynamicTrackingForVero - Indicates if Dynamic \r\n      tracking for the Vero Linac is enabled or disabled\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["Coordinates"], "method": "SetReportViewPositions", "description": "SetReportViewPositions(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource", "params": ["FractionNumbers", "ExaminationNames", "StructureRegistrationNames"], "method": "ComputeDeliveryDoseWithDeformation", "description": "ComputeDeliveryDoseWithDeformation(..)\r\n  Action used to compute delivery dose and do optional deformation \r\n  of that dose\r\n  Parameters:\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames and\r\n      StructureRegistrationNames properties. This property must \r\n      contain at least one item.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers and StructureRegistrationNames\r\n      properties.\r\n    StructureRegistrationNames - The names of the provided \r\n      structure registrations. If an item in the list is empty, the \r\n      dose will\r\n      not be deformed. The number of items in this list must equal \r\n      the number of items in the\r\n      FractionNumbers and ExaminationNames properties.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[]", "params": ["FunctionType", "DoseBasedRoiFunction", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "EditOptimizationFunction", "description": "EditOptimizationFunction(..)\r\n  Edits an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    DoseBasedRoiFunction - The objective constituent or a \r\n      constraint that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[]", "params": ["CompositeParameters", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "AddResearchOptimizationFunction", "description": "AddResearchOptimizationFunction(..)\r\n  Creates and adds a research objective constituent.\r\n  Parameters:\r\n    CompositeParameters - String that holds parameters for a \r\n      composite research function.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[]", "params": ["FunctionType", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddOptimizationFunction", "description": "AddOptimizationFunction(..)\r\n  Creates and adds an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[]", "params": ["Function", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "EditResearchOptimizationFunction", "description": "EditResearchOptimizationFunction(..)\r\n  Edits a research objective constituent.\r\n  Parameters:\r\n    Function - The objective constituent that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[]", "params": ["Template"], "method": "ApplyOptimizationTemplate", "description": "ApplyOptimizationTemplate(..)\r\n  Copies optimization functions from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[]", "params": ["FunctionType", "ReferenceDoseDistribution", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddReferenceOptimizationFunction", "description": "AddReferenceOptimizationFunction(..)\r\n  Creates and adds a reference optimization function\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MaxRefDose\r\n      * MaxRefDvh\r\n      * MinRefDose\r\n      * MinRefDvh\r\n      * RefDoseFallOff\r\n    ReferenceDoseDistribution - The reference dose distribution.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[]", "params": ["UseVoxelBasedMimickingForTargets", "UseVoxelBasedMimickingForOrgansAtRisk", "OrgansAtRiskToImprove", "TargetsToMaintain", "OrgansAtRiskToMaintain"], "method": "RunReduceOARDoseOptimization", "description": "RunReduceOARDoseOptimization(..)\r\n  Runs a reduce organ-at-risk optimization.\r\n  Auto-generated reference dose functions are used to reduce the \r\n  dose in \r\n  the organs-at-risk regions while maintaining dose homogeneity in \r\n  the target regions.\r\n  Parameters:\r\n    UseVoxelBasedMimickingForTargets - Indicates if voxel \r\n      based mimicking constraints should be used for target ROIs.\r\n      If false, DVH based mimicking constraints is used for target \r\n      ROIs.\r\n      Default is false.\r\n    UseVoxelBasedMimickingForOrgansAtRisk - Indicates if \r\n      voxel-based mimicking constraints should be used for \r\n      organ-at-risk ROIs.\r\n      If false, DVH-based mimicking constraints is used for \r\n      organ-at-risk ROIs.\r\n      Default is false.\r\n    OrgansAtRiskToImprove - Names of the ROIs that should be \r\n      considered as objectives in the optimization problem.\r\n      Must be a subset of OrgansAtRiskToMaintain.\r\n      Default is ROIs defined in OrgansAtRiskToMaintain.\r\n    TargetsToMaintain - Names of the ROIs that should be \r\n      considered as target ROIs in the optimization problem.\r\n      The optimization uses mimicking constraints to maintain the \r\n      uniformity of the dose for these ROIs.\r\n      Must be disjoint with OrgansAtRiskToMaintain.\r\n      Default is all ROIs with target optimization functions in the \r\n      original optimization problem.\r\n    OrgansAtRiskToMaintain - Names of the ROIs that should be \r\n      considered as organs-at-risk in the optimization problem.\r\n      The optimization uses mimicking constraints to avoid \r\n      increasing the dose for these ROIs.\r\n      Must be disjoint with TargetsToMaintain.\r\n      Default is all ROIs without target optimization functions in \r\n      the original optimization problem.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].OptimizationParameters.TreatmentSetupSettings.[].BeamSettings.[]", "params": ["OptimizationTypes", "SelectCollimatorAngle", "AllowBeamSplit", "JawMotion", "LeftJaw", "RightJaw", "TopJaw", "BottomJaw"], "method": "EditBeamOptimizationSettings", "description": "EditBeamOptimizationSettings(..)\r\n  Edits the beam optimization settings for selected beam\r\n  Parameters:\r\n    OptimizationTypes - Enumerator describing how a beam may \r\n      be optimized.\r\n      That is, in which manner the optimization should be performed.\r\n      The enumerator array is a combination of different allowed \r\n      optimizations.\r\n    SelectCollimatorAngle - If true, select collimator angle \r\n      at sequencing.\r\n    AllowBeamSplit - Indicates if a beam split should be \r\n      attempted when the field is to wide for current machine \r\n      contraints.\r\n    JawMotion - Can be any of the following strings:\r\n      \"Fixed\"\r\n      \"Automatic\"\r\n      \"Lock to limits\"\r\n      \"Use limits as max\"\r\n    LeftJaw - Left jaw [X1].\r\n    RightJaw - Right jaw [X2].\r\n    TopJaw - Top jaw [Y1].\r\n    BottomJaw - Bottom jaw [Y2].\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].OptimizationParameters.TreatmentSetupSettings.[].BeamSettings.[].ArcConversionPropertiesPerBeam", "params": ["ConformalArcStyle", "CreateDualArcs", "FinalGantrySpacing", "MaxArcDeliveryTime", "BurstGantrySpacing", "MaxArcMU"], "method": "EditArcBasedBeamOptimizationSettings", "description": "EditArcBasedBeamOptimizationSettings(..)\r\n  Edit the arc based beam optimization settings for selected beam\r\n  Parameters:\r\n    ConformalArcStyle - If true the VMAT beam is converted \r\n      using conformal style based on target projections from all \r\n      directions.\r\n    CreateDualArcs - True if dual arcs shall be used.\r\n    FinalGantrySpacing - The distance between the gantry \r\n      angles of two neighboring segments (control points) [deg].\r\n    MaxArcDeliveryTime - The maximum delivery time for the arc \r\n      beam [s].\r\n    BurstGantrySpacing - The gantry distance for which the \r\n      beam is on using a machine in burst mode (Beam on interval).\r\n      Otherwise for a machine NOT in burst mode; not applicable (set \r\n      this property to null to indicate that)\r\n      [deg].\r\n    MaxArcMU - The maximum total MU for the arc beam.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].OptimizationParameters", "params": ["PositionUncertaintyAnterior", "PositionUncertaintyPosterior", "PositionUncertaintySuperior", "PositionUncertaintyInferior", "PositionUncertaintyLeft", "PositionUncertaintyRight", "DensityUncertainty", "IndependentBeams", "ComputeExactScenarioDoses", "NamesOfNonPlanningExaminations"], "method": "SaveRobustnessParameters", "description": "SaveRobustnessParameters(..)\r\n  Saves robustness parameters.\r\n  Parameters:\r\n    PositionUncertaintyAnterior - The \r\n      PositionUncertaintyAnterior that shall be copied.\r\n    PositionUncertaintyPosterior - The \r\n      PositionUncertaintyPosterior that shall be copied.\r\n    PositionUncertaintySuperior - The \r\n      PositionUncertaintySuperior that shall be copied.\r\n    PositionUncertaintyInferior - The \r\n      PositionUncertaintyInferior that shall be copied.\r\n    PositionUncertaintyLeft - The PositionUncertaintyLeft that \r\n      shall be copied.\r\n    PositionUncertaintyRight - The PositionUncertaintyRight \r\n      that shall be copied.\r\n    DensityUncertainty - The DensityUncertainty that shall be \r\n      copied.\r\n    IndependentBeams - The IndependentBeams that shall be \r\n      copied.\r\n    ComputeExactScenarioDoses - The ComputeExactScenarioDoses \r\n      that shall be copied.\r\n    NamesOfNonPlanningExaminations - Examinations that shall \r\n      be considered, disregarding the planning examination.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["BeamSetNames"], "method": "UnsetBeamSetsToOptimizeSimultaneously", "description": "UnsetBeamSetsToOptimizeSimultaneously(..)\r\n  Sets beam sets that were set to be optimized simultaneously to \r\n  be optimized separately\r\n  Parameters:\r\n    BeamSetNames - The name of the beam sets sat should be \r\n      optimized separately\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Name", "Type", "Transmission"], "method": "SetPhotonBlock", "description": "SetPhotonBlock(..)\r\n  Sets a block on this photon beam. Returns the beam.\r\n  Parameters:\r\n    Name - Name of the block.\r\n    Type - Type of the block\r\n    Transmission - Block transmission\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Isocenter", "params": ["Name", "Color", "Position"], "method": "EditIsocenter", "description": "EditIsocenter(..)\r\n  Edits any or all of the following isocenter parameters for the \r\n  beam.\r\n              \r\n  Examples: \r\n  Edit only the name:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New iso\")\r\n  Edit the name, color and position:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New Name\", \r\n  Color=\"Red\", Isocenter={'x':0, 'y':0, 'z':7} )\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n    Color - Color of the isocenter\r\n    Position - Position of the isocenter\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["ID", "Transmission"], "method": "SetBlockTray", "description": "SetBlockTray(..)\r\n  Sets a block tray on this photon beam. Returns the beam.\r\n  Parameters:\r\n    ID - Id of the block tray\r\n    Transmission - Transmission of the block tray\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionationPattern", "params": ["ScheduleString", "NumberOfFractionsPerDay"], "method": "EditDefaultPattern", "description": "EditDefaultPattern(..)\r\n  Edit the default pattern of the fractionation pattern.\r\n  The start schedule is specified using a string of 1's and 0's, \r\n  where a 1 represents a fraction to be delivered and a 0 represents \r\n  a skipped fraction, \r\n  and a number that specifies the number of fractions per day in the \r\n  schedule.\r\n  Example:\r\n    Set a default pattern where two fractions are delivered \r\n    every weekday the first week and no fractions are delivered the \r\n    second week.\r\n    fractionationPattern.EditDefaultPattern(ScheduleString='1111111111000000000000000000', NumberOfFractionsPerDay=2)\r\n  Parameters:\r\n    ScheduleString - The schedule string. Must be a multiple \r\n      of 7 and the number of fractions per day.\r\n    NumberOfFractionsPerDay - The number of fractions per day \r\n      in the schedule string.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[].BeamSets.[]", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["PlanName", "NewBeamSetName"], "method": "CopyPlanAndAddAsNewBeamSet", "description": "CopyPlanAndAddAsNewBeamSet(..)\r\n  Copies a plan (with one beam set) and adds it as new beam set to \r\n  another plan.\r\n  The same prerequisites as when adding a new beam set to the \r\n  current plan, i.e.,\r\n   - same planning image\r\n   - same patient position\r\n   - same dose grid size, corner and resolution\r\n   - supported delivery technique\r\n   - commissioned machine\r\n              \r\n  A deep clone of the radiation set is done. Objective functions are \r\n  not copied over.\r\n  Parameters:\r\n    PlanName - Name of the plan to copy.\r\n    NewBeamSetName - The name of the new beam set.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["BeamSetInfo"], "method": "LoadBeamSet", "description": "LoadBeamSet(..)\r\n  Loads a beam set from a treatment plan. Returns a handle to the \r\n  beam set.\r\n  Example:\r\n    To return a handle to the first beam set in a list retrieved \r\n    from QueryBeamSetInfo:\r\n    infos = treatmentPlan.QueryBeamSetInfo( Filter = {'Name': \r\n    'Plan1'} )\r\n    plan = treatmentPlan.LoadBeamSet( BeamSetInfo = infos[0] )\r\n  Parameters:\r\n    BeamSetInfo - Information about the plan to be selected. \r\n      The beam set info must match one and only one beam set.\r\n  Returns:\r\n    The loaded beam set.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["ImageMETAHdrFileName", "OverwriteExisting"], "method": "SetDensityDistributionFromImportedMetaImage", "description": "SetDensityDistributionFromImportedMetaImage(..)\r\n  Action for set a density distribution from information stored as \r\n  a meta image (http://www.itk.org/Wiki/ITK/MetaIO/Documentation) \r\n  Tags: \r\n   - Offset\r\n   - DimSize\r\n   - ElementSize \r\n  Should correspond to Corner in mm, NrOfVoxels, and VoxelSize in \r\n  mm, respectively, of the dose grid for which the density \r\n  distribution is defined.\r\n  Data is assumed to be stored in dicom coordinate system.\r\n  ElementType should be MET_DOUBLE\r\n  Parameters:\r\n    ImageMETAHdrFileName - \r\n    OverwriteExisting - \r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["Corner", "VoxelSize", "NumberOfVoxels"], "method": "UpdateDoseGrid", "description": "UpdateDoseGrid(..)\r\n  Updates the dose grid of a plan.\r\n  Parameters:\r\n    Corner - The dose grid corner in DICOM patient coordinates.\r\n    VoxelSize - The voxel sizes in DICOM patient coordinate \r\n      directions [cm].\r\n    NumberOfVoxels - The number of voxels in DICOM patient \r\n      coordinate directions.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["TargetLinacName", "TargetPlanBaseName", "TargetOverOARWeights"], "method": "PlanMimic", "description": "PlanMimic(..)\r\n  Setup a BeamSet giving a similar dose to the source TreatmentPlan.\r\n  Parameters:\r\n    TargetLinacName - The name of the linac that the backup \r\n      plan should target.\r\n    TargetPlanBaseName - The name of the new backup plan.\r\n    TargetOverOARWeights - The Target-over-OAR weights to use.\r\n"}, {"base": "Patient.Cases.[].TreatmentPlans.[]", "params": ["VoxelSize"], "method": "SetDefaultDoseGrid", "description": "SetDefaultDoseGrid(..)\r\n  Sets the dose grid of the plan to cover the external ROI, the \r\n  plan bolus, and support and fixture ROIs.\r\n  Parameters:\r\n    VoxelSize - The voxel sizes in DICOM patient coordinate \r\n      directions [cm].\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanName", "NewExplorationPlanName", "PlanExplorationName"], "method": "CopyPlanToExploration", "description": "CopyPlanToExploration(..)\r\n  Creates a copy of the specified plan, converts it to an \r\n  exploration plan and appends it to the exploration plan list.\r\n  Parameters:\r\n    PlanName - Name of the plan to copy.\r\n    NewExplorationPlanName - Desired name of the new \r\n      exploration plan.\r\n    PlanExplorationName - Name of the exploration that shall \r\n      contain the copied plan.\r\n"}, {"base": "Patient.Cases.[]", "params": ["PlanName", "PlannedBy", "Comment", "ExaminationName", "AllowDuplicateNames"], "method": "AddNewPlan", "description": "AddNewPlan(..)\r\n  Adds a new treatment plan.\r\n  Parameters:\r\n    PlanName - Name of the new plan.\r\n    PlannedBy - Name of the planner.\r\n    Comment - Comments of the new plan.\r\n    ExaminationName - The name of the planning image set \r\n      defined for the new plan\r\n    AllowDuplicateNames - Skip uniqueness test for name (used \r\n      by fallback plans).\r\n"}, {"base": "Patient.Cases.[]", "params": ["ReferenceExaminationName", "TargetExaminationName", "RegistrationName", "RigidTransformDF", "RigidTransformFoR", "FromFrameOfReference", "ToFrameOfReference", "GridCorner", "GridVoxelSize", "NrOfVoxels", "DisplacementField"], "method": "CreateNewDeformableRegistration", "description": "CreateNewDeformableRegistration(..)\r\n  Action for adding a new deformable registration based on \r\n  information stored in files. Used from scripting (see \r\n  Dev01\\CoreApps\\ScriptClient\\InternalScripts\\import_deformableregistration.py).\r\n  Parameters:\r\n    ReferenceExaminationName - Gets or sets the name of the \r\n      reference examination.\r\n    TargetExaminationName - Gets or sets the name of the \r\n      target examination.\r\n    RegistrationName - Gets or sets the name of the structure \r\n      registration.\r\n    RigidTransformDF - Gets or sets the rigid transform for \r\n      the deformable registration.\r\n    RigidTransformFoR - Gets or sets the rigid transform for \r\n      the frame-of-reference registration.\r\n    FromFrameOfReference - Gets or sets the the from \r\n      frame-of-reference\r\n    ToFrameOfReference - Gets or sets the the to \r\n      frame-of-reference\r\n    GridCorner - Gets or sets the deformation grid corner.\r\n    GridVoxelSize - Gets or sets the deformation grid voxel \r\n      size.\r\n    NrOfVoxels - Gets or sets the deformation grid size.\r\n    DisplacementField - Gets or sets the displacement field.\r\n"}, {"base": "Patient", "params": ["RoiLineWidth"], "method": "EditRoiLineWidthVisualization", "description": "EditRoiLineWidthVisualization(..)\r\n  Specifies the ROI line width.\r\n  Parameters:\r\n    RoiLineWidth - A value between [1 5] defining the roi line \r\n      width. Default width is 2.\r\n"}, {"base": "Patient", "params": ["CaseName", "Node", "Port", "CallingAE", "CalledAE", "SeriesFilter", "ImportFilters"], "method": "ImportDicomDataFromRepository", "description": "ImportDicomDataFromRepository(..)\r\n  Imports DICOM data from a repository into this patient.\r\n  Example:\r\n    To import all series with SeriesNumber 45 to case 'CASE 1':\r\n    >> warnings = patient.ImportDicomDataFromRepository(CaseName = \r\n    \"CASE 1\", Node = \"node\", Port = 134, CallingAE = \"callingAE\", \r\n    CalledAE = \"calledAE\", SeriesFilter = {'SeriesNumber': '^45$'}, \r\n    ImportFilters = [\"RTPlan: Remove 0 MU beams\"] )\r\n    >> print warnings\r\n  Parameters:\r\n    CaseName - The name of the target case or null/empty if \r\n      new case shall be created.\r\n    Node - The Node.\r\n    Port - The port to use.\r\n    CallingAE - The CallingAE.\r\n    CalledAE - The CalledAE.\r\n    SeriesFilter - Filter on the series to import. Using \r\n      regular expressions.\r\n      Possible keys in SeriesFilter:\r\n        * Modality\r\n        * PatientID\r\n        * StudyUID\r\n        * StudyDescription\r\n        * SeriesUID\r\n        * SeriesDescriptiont\r\n        * FrameOfReferenceUid\r\n        * SopClassUid\r\n        * CreationDate\r\n        * SeriesDate\r\n        * SeriesTime\r\n        * SeriesNumber\r\n    ImportFilters - List of import filters to run (must be \r\n      installed in RayStation).\r\n  Returns:\r\n    Returns a string with warnings from the import.\r\n"}, {"base": "Patient", "params": ["CaseName", "Path", "SeriesFilter", "ImportFilters"], "method": "ImportDicomDataFromPath", "description": "ImportDicomDataFromPath(..)\r\n  Imports DICOM data from a folder into this patient.\r\n  Example:\r\n    To import all series with SeriesNumber 45 to case 'CASE 1':\r\n    >> warnings = patient.ImportDicomDataFromPath(CaseName = \"CASE \r\n    1\", Path = r\"c:/DicomData\", SeriesFilter = {'SeriesNumber': \r\n    '^45$'}, ImportFilters = [\"RTPlan: Remove 0 MU beams\"])\r\n    >> print warnings\r\n  Parameters:\r\n    CaseName - The name of the target case or null/empty if \r\n      new case shall be created.\r\n    Path - The path containing DICOM data.\r\n    SeriesFilter - Filter on the series to import. Using \r\n      regular expressions.\r\n      Possible keys in SeriesFilter:\r\n        * Modality\r\n        * PatientID\r\n        * StudyUID\r\n        * StudyDescription\r\n        * SeriesUID\r\n        * SeriesDescriptiont\r\n        * FrameOfReferenceUid\r\n        * SopClassUid\r\n        * CreationDate\r\n        * SeriesDate\r\n        * SeriesTime\r\n        * SeriesNumber\r\n    ImportFilters - List of import filters to run (must be \r\n      installed in RayStation).\r\n  Returns:\r\n    Returns a string with any warnings from the import.\r\n"}, {"base": "Patient", "params": ["RoiName", "Mode"], "method": "Set2DvisualizationForRoi", "description": "Set2DvisualizationForRoi(..)\r\n  Setting the 2D visualization of a ROI.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    Mode - The 2D visualization mode (case-insensitive): off, \r\n      contour, filled and filled contour.\r\n"}, {"base": "Patient", "params": ["RoiName", "IsVisible"], "method": "SetRoiVisibility", "description": "SetRoiVisibility(..)\r\n  Setting if a ROI is visible or not.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    IsVisible - True if the ROI is visible.\r\n"}, {"base": "Plan", "params": ["Name", "ExaminationName", "MachineName", "Modality", "TreatmentTechnique", "*Conformal", "*SMLC", "*VMAT", "*DMLC", "*StaticArc", "*TomoHelical", "*ProtonPencilBeamScanning", "*LineScanning", "*UniformScanning", "*Wobbling", "*SingleScattering", "*DoubleScattering", "*ApplicatorAndCutout", "*CarbonPencilBeamScanning", "PatientPosition", "NumberOfFractions", "CreateSetupBeams", "UseLocalizationPointAsSetupIsocenter", "Comment", "RbeModelReference", "EnableDynamicTrackingForVero"], "method": "AddNewBeamSet", "description": "AddNewBeamSet(..)\r\n  Adds a new beam set.\r\n  Parameters:\r\n    Name - The name of the new beam set.\r\n    ExaminationName - The name of the examination on which the \r\n      beam set is defined.\r\n    MachineName - The name on the treatment machine. The \r\n      latest commissioned version og this machine will be used.\r\n    Modality - The treatment modality.\r\n      * Photons\r\n      * Protons\r\n      * Carbon\r\n      * Electrons\r\n    TreatmentTechnique - Treatment technique.\r\n      * Conformal                - Photons 3DCRT treatment technique.\r\n      * SMLC                     - Photons SMLC treatment technique.\r\n      * VMAT                     - Photons VMAT treatment technique\r\n      * DMLC                     - Photons DMLC.\r\n      * StaticArc                - Photons static arc.\r\n      * TomoHelical              - Photons tomo helical.\r\n      * ProtonPencilBeamScanning - Protons pencil beam scanning.\r\n      * LineScanning             - Protons line scanning.\r\n      * UniformScanning          - Protons uniform scanning.\r\n      * Wobbling                 - Protons wobbling scanning.\r\n      * SingleScattering         - Protons single scattering.\r\n      * DoubleScattering         - Protons double scattering.\r\n      * ApplicatorAndCutout      - Electrons applicator and cutout.\r\n      * CarbonPencilBeamScanning - Carbon pencil beam scanning.\r\n    PatientPosition - Specifies the position of the patient \r\n      relative to the treatment/image equipment space.\r\n      * HeadFirstProne\r\n      * HeadFirstSupine\r\n      * FeetFirstProne\r\n      * FeetFirstSupine\r\n      * HeadFirstDecubitusLeft\r\n      * HeadFirstDecubitusRight\r\n      * FeetFirstDecubitusLeft\r\n      * FeetFirstDecubitusRight\r\n    NumberOfFractions - The number of fractions in the new \r\n      beam set.\r\n    CreateSetupBeams - Whether setup beams shall be created in \r\n      this beam set.\r\n    UseLocalizationPointAsSetupIsocenter - True to use \r\n      localization point instead of isocenter from treatment beams \r\n      for the setup beams\r\n    Comment - The beam set comment\r\n    RbeModelReference - The RBE model to use for an ion \r\n      radiation set; or null if no RBE model is used\r\n    EnableDynamicTrackingForVero - Indicates if Dynamic \r\n      tracking for the Vero Linac is enabled or disabled\r\n"}, {"base": "Plan", "params": ["Filter"], "method": "QueryBeamSetInfo", "description": "QueryBeamSetInfo(..)\r\n  Returns info on all beam sets on a treatment plan.\r\n  Example:\r\n    To return info on all beam sets with the exact name \r\n    'BeamSet1' in a treatment plan:\r\n    info = treatmentPlan.QueryBeamSetInfo(Filter = {'Name': \r\n    '^BeamSet1$'}\r\n  Parameters:\r\n    Filter - Filter using regular expressions.  \r\n                  Possible keys:\r\n                     *Id\r\n                     *Name\r\n                     *ApprovalStatus\r\n                     *IsImmutable\r\n                     *IsClinical\r\n                     *HasDose\r\n                     *DoseAlgorithm\r\n                     *AlgorithmVersion\r\n  Returns:\r\n    List of beam set information.\r\n"}, {"base": "Plan", "params": ["BeamSetNames"], "method": "SetBeamSetsToOptimizeSimultaneously", "description": "SetBeamSetsToOptimizeSimultaneously(..)\r\n  Sets beam sets to be optimized simultaneously\r\n  Parameters:\r\n    BeamSetNames - The name of the beam sets that should be \r\n      optimized simultaneously\r\n"}, {"base": "Plan", "params": ["Coordinate"], "method": "SetDefaultViewPosition", "description": "SetDefaultViewPosition(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Coordinate - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Plan", "params": ["DependentBeamSetName", "BackgroundBeamSetName", "DependencyUpdate"], "method": "UpdateDependency", "description": "UpdateDependency(..)\r\n  Changes the way a beam set depends on the other beam set. When a \r\n  beam set is set as dependent, the other beam set dose is used as \r\n  background dose.\r\n  Any prescriptions or optimization functions \r\n  defined on the dependent beam set will be removed.\r\n  Parameters:\r\n    DependentBeamSetName - The beam set that will be or is \r\n      dependent.\r\n    BackgroundBeamSetName - The beam set that will be the \r\n      background beam set.\r\n    DependencyUpdate - How dependency should be updated.\r\n      * CreateDependency\r\n      * RemoveDependency\r\n"}, {"base": "Plan", "params": ["TreatmentDelivery"], "method": "PreparePlanForDelivery", "description": "PreparePlanForDelivery(..)\r\n  Action for preparing a treatment plan for delivery. Will copy \r\n  fractions from planning treatment course to delivery.\r\n  Parameters:\r\n    TreatmentDelivery - The TreatmentDelivery object that will \r\n      be used for treatment delivery.\r\n"}, {"base": "Plan", "params": ["RoiNamesAndMaterialNames", "OverwriteExisting"], "method": "SetDensityDistribution", "description": "SetDensityDistribution(..)\r\n  Action for setting a density distribution based on a set of rois \r\n  and corresponding materials. \r\n  At least the external roi needs to be included in the list.\r\n  Only overrides inside external are considered.\r\n  Parameters:\r\n    RoiNamesAndMaterialNames - Dictionary with ROIs and their \r\n      materials\r\n    OverwriteExisting - If the density disitribution is \r\n      already defined and has the same version number as current, it \r\n      can be overwritten by setting OverwriteExisting to true.\r\n"}, {"base": "Plan", "params": ["AdaptedBeamSets", "NumberOfRemainingFractions", "MachineName", "CreateSetupBeams", "ClearBeamModifiers", "RemoveBeams", "NOTE"], "method": "AddBeamSetsToAdaptedPlan", "description": "AddBeamSetsToAdaptedPlan(..)\r\n  Action for adding beamsets to an adapted plan.\r\n  Prerequisite:\r\n    Can only be used on adapted plans with no beam set(s)\r\n              \r\n  Example:\r\n  # add new adapted plan from fraction 10 to a plan with one beam \r\n  set using planning image \"RESCAN\"\r\n  patient = get_current(\"Patient\")\r\n  case = get_current(\"Case\")\r\n  plan=get_current(\"Plan\")\r\n  beam_set=get_current(\"BeamSet\")\r\n  adapt_from_fx = 10\r\n  adapted_ct = \"RESCAN\"\r\n  tot_nr_fx = len([tf for tf in \r\n  plan.TreatmentCourse.TreatmentFractions])\r\n              \r\n  adapted_plan = case.AddNewAdaptivePlan(FractionNumber= \r\n  adapt_from_fx, AdaptToPlanName= plan.Name, \r\n  UseTreatmentDeliveryAsSource= True,\r\n  PlanName= \"Adapted plan\", PlannedBy= None, Comment= \"\", \r\n  ExaminationName= adapted_ct, AllowDuplicateNames= False)\r\n  treatment_technique = beam_set.GetTreatmentTechniqueType()\r\n              \r\n  beam_set_settings = {'NumberOfRemainingFractions': tot_nr_fx - \r\n  adapt_from_fx, 'MachineName': \r\n  beam_set.MachineReference.MachineName, \r\n  'CreateSetupBeams': true, 'DicomPlanLabelOfOriginalBeamSet': \r\n  beam_set.DicomPlanLabel, 'ClearBeamModifiers': false, \r\n  'RemoveBeams': false, 'TreatmentTechnique': treatment_technique}\r\n  adapted_plan.AddBeamSetsToAdaptedPlan(AdaptedBeamSets=[beam_set_settings])\r\n  \r\n  adapted_beam_set = adapted_plan.BeamSets[0]\r\n  prescription = beam_set.Prescription.PrimaryDosePrescription\r\n  adapted_beam_set.AddDosePrescriptionToRoi(\r\n  RoiName=prescription.OnStructure.Name,\r\n  DoseVolume=prescription.DoseVolume,\r\n  PrescriptionType=prescription.PrescriptionType,\r\n  DoseValue=prescription.DoseValue,\r\n  RelativePrescriptionLevel=prescription.RelativePrescriptionLevel,\r\n  AutoScaleDose=False)\r\n  Parameters:\r\n    AdaptedBeamSets - List of AdaptedBeamSetSettings\r\n      Settings is stored as a dictionary on form \r\n      \"NumberOfRemainingFractions\", \"MachineName\",\r\n      \"CreateSetupBeams\", \"DicomPlanLabelOfOriginalBeamSet\",\r\n      \"ClearBeamModifiers\", \"RemoveBeams\", \"TreatmentTechnique\"\r\n                  \r\n      NumberOfRemainingFractions - Number of remaining fractions.\r\n      MachineName - Name of the machine. The last commissioned \r\n      machine in the database will be used.\r\n      CreateSetupBeams - Set to true if setupbeams shall be created.\r\n      ClearBeamModifiers - Set to true if beam contents shall be \r\n      cleared.\r\n      RemoveBeams - Set to true if all beams should be removed.\r\n      NOTE - If both RemoveBeams and ClearBeamModifiers are true, \r\n      beams will be removed. If both are false nothing will be done.\r\n"}, {"base": "Plan", "params": ["AdaptToRadiationSet", "RemoveBeams", "ClearBeamModifiers", "Name", "ExaminationName", "MachineName", "Modality", "TreatmentTechnique", "*Conformal", "*SMLC", "*VMAT", "*DMLC", "*StaticArc", "*TomoHelical", "*ProtonPencilBeamScanning", "*LineScanning", "*UniformScanning", "*Wobbling", "*SingleScattering", "*DoubleScattering", "*ApplicatorAndCutout", "*CarbonPencilBeamScanning", "PatientPosition", "NumberOfFractions", "CreateSetupBeams", "UseLocalizationPointAsSetupIsocenter", "Comment", "RbeModelReference", "EnableDynamicTrackingForVero"], "method": "AddNewAdaptedBeamSet", "description": "AddNewAdaptedBeamSet(..)\r\n  Composite action for adding\r\n  Parameters:\r\n    AdaptToRadiationSet - Radiation set to adapt to.\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n    Name - The name of the new beam set.\r\n    ExaminationName - The name of the examination on which the \r\n      beam set is defined.\r\n    MachineName - The name on the treatment machine. The \r\n      latest commissioned version og this machine will be used.\r\n    Modality - The treatment modality.\r\n      * Photons\r\n      * Protons\r\n      * Carbon\r\n      * Electrons\r\n    TreatmentTechnique - Treatment technique.\r\n      * Conformal                - Photons 3DCRT treatment technique.\r\n      * SMLC                     - Photons SMLC treatment technique.\r\n      * VMAT                     - Photons VMAT treatment technique\r\n      * DMLC                     - Photons DMLC.\r\n      * StaticArc                - Photons static arc.\r\n      * TomoHelical              - Photons tomo helical.\r\n      * ProtonPencilBeamScanning - Protons pencil beam scanning.\r\n      * LineScanning             - Protons line scanning.\r\n      * UniformScanning          - Protons uniform scanning.\r\n      * Wobbling                 - Protons wobbling scanning.\r\n      * SingleScattering         - Protons single scattering.\r\n      * DoubleScattering         - Protons double scattering.\r\n      * ApplicatorAndCutout      - Electrons applicator and cutout.\r\n      * CarbonPencilBeamScanning - Carbon pencil beam scanning.\r\n    PatientPosition - Specifies the position of the patient \r\n      relative to the treatment/image equipment space.\r\n      * HeadFirstProne\r\n      * HeadFirstSupine\r\n      * FeetFirstProne\r\n      * FeetFirstSupine\r\n      * HeadFirstDecubitusLeft\r\n      * HeadFirstDecubitusRight\r\n      * FeetFirstDecubitusLeft\r\n      * FeetFirstDecubitusRight\r\n    NumberOfFractions - The number of fractions in the new \r\n      beam set.\r\n    CreateSetupBeams - Whether setup beams shall be created in \r\n      this beam set.\r\n    UseLocalizationPointAsSetupIsocenter - True to use \r\n      localization point instead of isocenter from treatment beams \r\n      for the setup beams\r\n    Comment - The beam set comment\r\n    RbeModelReference - The RBE model to use for an ion \r\n      radiation set; or null if no RBE model is used\r\n    EnableDynamicTrackingForVero - Indicates if Dynamic \r\n      tracking for the Vero Linac is enabled or disabled\r\n"}, {"base": "Plan", "params": ["Coordinates"], "method": "SetReportViewPositions", "description": "SetReportViewPositions(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource", "params": ["FractionNumbers", "ExaminationNames", "StructureRegistrationNames"], "method": "ComputeDeliveryDoseWithDeformation", "description": "ComputeDeliveryDoseWithDeformation(..)\r\n  Action used to compute delivery dose and do optional deformation \r\n  of that dose\r\n  Parameters:\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames and\r\n      StructureRegistrationNames properties. This property must \r\n      contain at least one item.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers and StructureRegistrationNames\r\n      properties.\r\n    StructureRegistrationNames - The names of the provided \r\n      structure registrations. If an item in the list is empty, the \r\n      dose will\r\n      not be deformed. The number of items in this list must equal \r\n      the number of items in the\r\n      FractionNumbers and ExaminationNames properties.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Plan.PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Plan.PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Plan.PlanOptimizations.[]", "params": ["FunctionType", "DoseBasedRoiFunction", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "EditOptimizationFunction", "description": "EditOptimizationFunction(..)\r\n  Edits an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    DoseBasedRoiFunction - The objective constituent or a \r\n      constraint that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Plan.PlanOptimizations.[]", "params": ["CompositeParameters", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "AddResearchOptimizationFunction", "description": "AddResearchOptimizationFunction(..)\r\n  Creates and adds a research objective constituent.\r\n  Parameters:\r\n    CompositeParameters - String that holds parameters for a \r\n      composite research function.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "Plan.PlanOptimizations.[]", "params": ["FunctionType", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddOptimizationFunction", "description": "AddOptimizationFunction(..)\r\n  Creates and adds an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Plan.PlanOptimizations.[]", "params": ["Function", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "EditResearchOptimizationFunction", "description": "EditResearchOptimizationFunction(..)\r\n  Edits a research objective constituent.\r\n  Parameters:\r\n    Function - The objective constituent that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "Plan.PlanOptimizations.[]", "params": ["Template"], "method": "ApplyOptimizationTemplate", "description": "ApplyOptimizationTemplate(..)\r\n  Copies optimization functions from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Plan.PlanOptimizations.[]", "params": ["FunctionType", "ReferenceDoseDistribution", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddReferenceOptimizationFunction", "description": "AddReferenceOptimizationFunction(..)\r\n  Creates and adds a reference optimization function\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MaxRefDose\r\n      * MaxRefDvh\r\n      * MinRefDose\r\n      * MinRefDvh\r\n      * RefDoseFallOff\r\n    ReferenceDoseDistribution - The reference dose distribution.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Plan.PlanOptimizations.[]", "params": ["UseVoxelBasedMimickingForTargets", "UseVoxelBasedMimickingForOrgansAtRisk", "OrgansAtRiskToImprove", "TargetsToMaintain", "OrgansAtRiskToMaintain"], "method": "RunReduceOARDoseOptimization", "description": "RunReduceOARDoseOptimization(..)\r\n  Runs a reduce organ-at-risk optimization.\r\n  Auto-generated reference dose functions are used to reduce the \r\n  dose in \r\n  the organs-at-risk regions while maintaining dose homogeneity in \r\n  the target regions.\r\n  Parameters:\r\n    UseVoxelBasedMimickingForTargets - Indicates if voxel \r\n      based mimicking constraints should be used for target ROIs.\r\n      If false, DVH based mimicking constraints is used for target \r\n      ROIs.\r\n      Default is false.\r\n    UseVoxelBasedMimickingForOrgansAtRisk - Indicates if \r\n      voxel-based mimicking constraints should be used for \r\n      organ-at-risk ROIs.\r\n      If false, DVH-based mimicking constraints is used for \r\n      organ-at-risk ROIs.\r\n      Default is false.\r\n    OrgansAtRiskToImprove - Names of the ROIs that should be \r\n      considered as objectives in the optimization problem.\r\n      Must be a subset of OrgansAtRiskToMaintain.\r\n      Default is ROIs defined in OrgansAtRiskToMaintain.\r\n    TargetsToMaintain - Names of the ROIs that should be \r\n      considered as target ROIs in the optimization problem.\r\n      The optimization uses mimicking constraints to maintain the \r\n      uniformity of the dose for these ROIs.\r\n      Must be disjoint with OrgansAtRiskToMaintain.\r\n      Default is all ROIs with target optimization functions in the \r\n      original optimization problem.\r\n    OrgansAtRiskToMaintain - Names of the ROIs that should be \r\n      considered as organs-at-risk in the optimization problem.\r\n      The optimization uses mimicking constraints to avoid \r\n      increasing the dose for these ROIs.\r\n      Must be disjoint with TargetsToMaintain.\r\n      Default is all ROIs without target optimization functions in \r\n      the original optimization problem.\r\n"}, {"base": "Plan.PlanOptimizations.[].OptimizationParameters.TreatmentSetupSettings.[].BeamSettings.[]", "params": ["OptimizationTypes", "SelectCollimatorAngle", "AllowBeamSplit", "JawMotion", "LeftJaw", "RightJaw", "TopJaw", "BottomJaw"], "method": "EditBeamOptimizationSettings", "description": "EditBeamOptimizationSettings(..)\r\n  Edits the beam optimization settings for selected beam\r\n  Parameters:\r\n    OptimizationTypes - Enumerator describing how a beam may \r\n      be optimized.\r\n      That is, in which manner the optimization should be performed.\r\n      The enumerator array is a combination of different allowed \r\n      optimizations.\r\n    SelectCollimatorAngle - If true, select collimator angle \r\n      at sequencing.\r\n    AllowBeamSplit - Indicates if a beam split should be \r\n      attempted when the field is to wide for current machine \r\n      contraints.\r\n    JawMotion - Can be any of the following strings:\r\n      \"Fixed\"\r\n      \"Automatic\"\r\n      \"Lock to limits\"\r\n      \"Use limits as max\"\r\n    LeftJaw - Left jaw [X1].\r\n    RightJaw - Right jaw [X2].\r\n    TopJaw - Top jaw [Y1].\r\n    BottomJaw - Bottom jaw [Y2].\r\n"}, {"base": "Plan.PlanOptimizations.[].OptimizationParameters.TreatmentSetupSettings.[].BeamSettings.[].ArcConversionPropertiesPerBeam", "params": ["ConformalArcStyle", "CreateDualArcs", "FinalGantrySpacing", "MaxArcDeliveryTime", "BurstGantrySpacing", "MaxArcMU"], "method": "EditArcBasedBeamOptimizationSettings", "description": "EditArcBasedBeamOptimizationSettings(..)\r\n  Edit the arc based beam optimization settings for selected beam\r\n  Parameters:\r\n    ConformalArcStyle - If true the VMAT beam is converted \r\n      using conformal style based on target projections from all \r\n      directions.\r\n    CreateDualArcs - True if dual arcs shall be used.\r\n    FinalGantrySpacing - The distance between the gantry \r\n      angles of two neighboring segments (control points) [deg].\r\n    MaxArcDeliveryTime - The maximum delivery time for the arc \r\n      beam [s].\r\n    BurstGantrySpacing - The gantry distance for which the \r\n      beam is on using a machine in burst mode (Beam on interval).\r\n      Otherwise for a machine NOT in burst mode; not applicable (set \r\n      this property to null to indicate that)\r\n      [deg].\r\n    MaxArcMU - The maximum total MU for the arc beam.\r\n"}, {"base": "Plan.PlanOptimizations.[].OptimizationParameters", "params": ["PositionUncertaintyAnterior", "PositionUncertaintyPosterior", "PositionUncertaintySuperior", "PositionUncertaintyInferior", "PositionUncertaintyLeft", "PositionUncertaintyRight", "DensityUncertainty", "IndependentBeams", "ComputeExactScenarioDoses", "NamesOfNonPlanningExaminations"], "method": "SaveRobustnessParameters", "description": "SaveRobustnessParameters(..)\r\n  Saves robustness parameters.\r\n  Parameters:\r\n    PositionUncertaintyAnterior - The \r\n      PositionUncertaintyAnterior that shall be copied.\r\n    PositionUncertaintyPosterior - The \r\n      PositionUncertaintyPosterior that shall be copied.\r\n    PositionUncertaintySuperior - The \r\n      PositionUncertaintySuperior that shall be copied.\r\n    PositionUncertaintyInferior - The \r\n      PositionUncertaintyInferior that shall be copied.\r\n    PositionUncertaintyLeft - The PositionUncertaintyLeft that \r\n      shall be copied.\r\n    PositionUncertaintyRight - The PositionUncertaintyRight \r\n      that shall be copied.\r\n    DensityUncertainty - The DensityUncertainty that shall be \r\n      copied.\r\n    IndependentBeams - The IndependentBeams that shall be \r\n      copied.\r\n    ComputeExactScenarioDoses - The ComputeExactScenarioDoses \r\n      that shall be copied.\r\n    NamesOfNonPlanningExaminations - Examinations that shall \r\n      be considered, disregarding the planning examination.\r\n"}, {"base": "Plan.PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Plan.PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Plan.PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Plan", "params": ["BeamSetNames"], "method": "UnsetBeamSetsToOptimizeSimultaneously", "description": "UnsetBeamSetsToOptimizeSimultaneously(..)\r\n  Sets beam sets that were set to be optimized simultaneously to \r\n  be optimized separately\r\n  Parameters:\r\n    BeamSetNames - The name of the beam sets sat should be \r\n      optimized separately\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["Name", "Type", "Transmission"], "method": "SetPhotonBlock", "description": "SetPhotonBlock(..)\r\n  Sets a block on this photon beam. Returns the beam.\r\n  Parameters:\r\n    Name - Name of the block.\r\n    Type - Type of the block\r\n    Transmission - Block transmission\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Isocenter", "params": ["Name", "Color", "Position"], "method": "EditIsocenter", "description": "EditIsocenter(..)\r\n  Edits any or all of the following isocenter parameters for the \r\n  beam.\r\n              \r\n  Examples: \r\n  Edit only the name:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New iso\")\r\n  Edit the name, color and position:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New Name\", \r\n  Color=\"Red\", Isocenter={'x':0, 'y':0, 'z':7} )\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n    Color - Color of the isocenter\r\n    Position - Position of the isocenter\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["ID", "Transmission"], "method": "SetBlockTray", "description": "SetBlockTray(..)\r\n  Sets a block tray on this photon beam. Returns the beam.\r\n  Parameters:\r\n    ID - Id of the block tray\r\n    Transmission - Transmission of the block tray\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "Plan.BeamSets.[].Beams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["TransformationMatrix", "CenterOfRotation"], "method": "GetAffineTransformationParametersGivenCenterOfRotation", "description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["MetaFileName"], "method": "ExportExaminationAsMetaImage", "description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "method": "CreateTransformedExamination", "description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "method": "SetTreatmentPositionAlignmentRegistration", "description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["HU", "Rho"], "method": "SetImageSpecificCtToDensityTable", "description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["DensityThresholds"], "method": "SetCtToDensityTableForCbctImage", "description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["ImagingSystemName"], "method": "SetImagingSystemReference", "description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["FromExaminationName"], "method": "CopyCtToDensityTableFromAnotherCbctImage", "description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["Group", "Element"], "method": "GetStoredDicomTagValueForVerification", "description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["MinCorner", "MaxCorner"], "method": "CropImageStackAndStoreAsNewExamination", "description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["FileName"], "method": "WriteStoredDicomDataSetToFileForVerification", "description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["RoiName"], "method": "GetIntensityStatistics", "description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["DoseGrid", "Scaling"], "method": "GetResampledPETValues", "description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "method": "GetImageStackHistogram", "description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["DoseGrid", "Reference", "LookUp"], "method": "GetResampledAndScaledPixelData", "description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["DoseGrid"], "method": "GetResampledPixelData", "description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["Names", "Colors"], "method": "CreateMarkerPois", "description": "CreateMarkerPois(..)\r\n  Identifies breast fiducials in a CT data set and creates the \r\n  corresponding marker POIs.\r\n  Parameters:\r\n    Names - The names of the marker POIs. Keys are: \r\n      \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". Values \r\n      defaults to: \"Superior\":\"MED\", \"Inferior\":\"INF\", \r\n      \"Medial\":\"MED\" and \"Lateral\":\"LAT\".\r\n    Colors - The display colors of the marker POIs. Use named \r\n      colors such as 'Red' or an ARGB value such as '#FFFF0000'. \r\n      Keys are: \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". \r\n      Values defaults to: \"Superior\":\"Purple\", \"Inferior\":\"Red\", \r\n      \"Medial\":\"Yellow\" and \"Lateral\":\"Blue\".\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ROI", "Indices", "Vertices"], "method": "SetRoiGeometryRepresentationToTriangleMesh", "description": "SetRoiGeometryRepresentationToTriangleMesh(..)\r\n  Set the ROI geometry to a triangle mesh.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ROI - Name of the ROI that the triangle mesh shall be \r\n      assigned to.\r\n    Indices - Array with triangle mesh indices.\r\n    Vertices - Array with triangle mesh vertices.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ReferenceRoiName", "TargetRoiName"], "method": "RoiSurfaceToSurfaceDistanceBasedOnDT", "description": "RoiSurfaceToSurfaceDistanceBasedOnDT(..)\r\n  Measures the distance between the surfaces of two ROI geometries \r\n  using a distance transform based approach. \r\n  Each point (/voxel) on the surface of the target roi will be \r\n  assigned the minimum distance to a point (/voxel) on the surface \r\n  of the reference roi. \r\n  Note that the measurements are not symmetric\r\n  A dictionary with average, max and min distances are returned\r\n  Parameters:\r\n    ReferenceRoiName - Name of roi from which surface to \r\n      compute the distance\r\n    TargetRoiName - Name of roi to which surface to compute \r\n      the distance\r\n  Returns:\r\n    A dictionary with \"Average\", \"Max\", and \"Min\" distances\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["PoiBaseName", "DelimitingRoiName", "LowDensityThreshold"], "method": "CreatePoisFromFiducialMarkers", "description": "CreatePoisFromFiducialMarkers(..)\r\n  Identifies fiducials in a CT data set and creates the \r\n  corresponding POIs.\r\n  User can select to identify fiducials inside a ROI or inside the \r\n  patient outline.\r\n  Parameters:\r\n    PoiBaseName - The base name of the marker POIs. POIs will \r\n      be labelled POI_id\r\n    DelimitingRoiName - Name of delimiting ROI. If left empty, \r\n      the External ROI will be used.\r\n    LowDensityThreshold - \r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["MetaFileName", "RoiNamesAndLabels", "UseGreaterOrEqual"], "method": "ImportSegmentationAsMetaImage", "description": "ImportSegmentationAsMetaImage(..)\r\n  Import segmentation as meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    RoiNamesAndLabels - Dictionary containing wanted ROI names \r\n      and their corresponding labels in the meta image\r\n    UseGreaterOrEqual - Default false. If true, ROI will be \r\n      equal to all voxels with values >= label\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["RoiA", "RoiB", "ComputeDistanceToAgreementMeasures"], "method": "ComparisonOfRoiGeometries", "description": "ComparisonOfRoiGeometries(..)\r\n   Computes overlap measures between two geometries for comparison.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Mean DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Max DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n  Parameters:\r\n    RoiA - The name of the ROI geometry A.\r\n    RoiB - The name of the ROI geometry B.\r\n    ComputeDistanceToAgreementMeasures - Determines if Mean \r\n      DTA and Max DTA are computed (computation time will increase).\r\n      If set to false, Mean DTA and Max DTA will not have \r\n      corresponding key/value entries in the return value.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["RoiNames", "RemoveHoles3D", "RemoveSmallContours", "AreaThreshold", "ReduceMaxNumberOfPointsInContours", "MaxNumberOfPoints", "CreateCopyOfRoi"], "method": "SimplifyContours", "description": "SimplifyContours(..)\r\n  Action for simplifying contours.\r\n  Parameters:\r\n    RoiNames - List of ROI names.\r\n    RemoveHoles3D - Remove holes in 3D.\r\n    RemoveSmallContours - Remove small contours.\r\n    AreaThreshold - Area threshold [cm^2].\r\n    ReduceMaxNumberOfPointsInContours - Reduce the number of \r\n      points in contours.\r\n    MaxNumberOfPoints - Max number of points.\r\n    CreateCopyOfRoi - Create copy of ROI.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ModelExaminationName", "ThresholdLevel", "FieldOfViewRoiName", "ExternalMbsRoiName", "SupInfRange"], "method": "OutlineBodyOnCBCT", "description": "OutlineBodyOnCBCT(..)\r\n  Creates geometry for the External ROI for a limited \r\n  field-of-view CBCT examination.\r\n  Parameters:\r\n    ModelExaminationName - The name of the examination that \r\n      will be used as the model. Typically, the planning CT.\r\n      The External ROI must have geometry defined for this \r\n      examination.\r\n    ThresholdLevel - The threshold level used to guide an MBS \r\n      mesh based on the geometry of the External ROI for the \r\n      model examination. This value should be chosen such that \r\n      larger values correspond to \r\n      anatomy in the CBCT examination.\r\n    FieldOfViewRoiName - The name of the field-of-view ROI \r\n      geometry. This ROI defines the region in which\r\n      MBS adaptation is performed for the MBS mesh based on the \r\n      external geometry in the model\r\n      examination.\r\n    ExternalMbsRoiName - The name of the external MBS ROI.\r\n    SupInfRange - The sup/inf range used when creating the \r\n      model (in cm).\r\n      Should be given in CBCT coordinates.\r\n      If (0,0) is given, the whole external on the model examination \r\n      will be used.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["FromROI", "ToROI"], "method": "CopyRoiGeometryToAnotherROI", "description": "CopyRoiGeometryToAnotherROI(..)\r\n  Copy the ROI geometry of an ROI to another ROI.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromROI - Name of the ROI with the geometry to copy.\r\n    ToROI - Name of the ROI the geometry shall be copied to.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ModelGeometry", "RoiGeometry", "NewRoi"], "method": "AdaptMeshToGeometryAndStoreAsNewRoi", "description": "AdaptMeshToGeometryAndStoreAsNewRoi(..)\r\n  Utility method for gold atlas data (part of gentle radiotherapy \r\n  project).\r\n  A geometry which is a triangle mesh (\"ModelGeometry\") is adapted \r\n  to another geometry of any shape (RoiGeometry). \r\n  The adapted triangle mesh is stored as a geometry for a ROI which \r\n  is created by the method (NewRoi).\r\n  Parameters:\r\n    ModelGeometry - Name of RoiGeometry (which has \r\n      representation Triangle Mesh) to use as model\r\n    RoiGeometry - Name of RoiGeometry to which the model \r\n      should be adapted\r\n    NewRoi - Name of RoiGeometry where to store the adapted \r\n      triangle mesh\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Name", "Color", "Type", "TissueName", "RbeCellTypeName", "RoiMaterial"], "method": "CreateRoi", "description": "CreateRoi(..)\r\n  Create a new ROI.\r\n  Parameters:\r\n    Name - The name of the new ROI.\r\n    Color - Display color of the ROI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * External: External patient contour.\r\n      * Ptv: Planning target volume (as defined in ICRU50).\r\n      * Ctv: Clinical target volume (as defined in ICRU50).\r\n      * Gtv: Gross tumor volume (as defined in ICRU50).\r\n      * TreatedVolume: Treated volume (as defined in ICRU50).\r\n      * IrradiatedVolume: Irradiated Volume (as defined in ICRU50).\r\n      * Bolus: Patient bolus to be used for external beam therapy.\r\n      * Avoidance: Region in which dose is to be minimized.\r\n      * Organ: Patient organ.\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Registration: Registration ROI\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * ContrastAgent: Volume into which a contrast agent has been \r\n      injected.\r\n      * Cavity: Patient anatomical cavity.\r\n      * BrachyChannel: Branchy therapy channel\r\n      * BrachyAccessory: Brachy therapy accessory device.\r\n      * BrachySourceApplicator: Brachy therapy source applicator.\r\n      * BrachyChannelShield: Brachy therapy channel shield.\r\n      * Support: External patient support device.\r\n      * Fixation: External patient fixation or immobilisation device.\r\n      * DoseRegion: ROI to be used as a dose reference.\r\n      * Control: ROI to be used in control of dose optimization and \r\n      calculation.\r\n      * FieldOfView: ROI to be used for representing the \r\n      Field-of-view in, e.g., a cone beam CT image.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n    TissueName - Name of the organ tissue. Optional.\r\n    RbeCellTypeName - Name of the organ RBE cell type. Optional.\r\n    RoiMaterial - Material that overrides ROI density. Optional.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRois", "DeformationGridVoxelSize"], "method": "CreateBiomechanicalDeformableRegistrationGroup", "description": "CreateBiomechanicalDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with biomechanical \r\n  deformable registrations for the selected reference examination \r\n  and target examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRois - The list with controlling ROIs.\r\n    DeformationGridVoxelSize - The deformation grid voxel size \r\n      in the DICOM patient-based coordinate system.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["BaseOnMaterial", "Name", "MassDensityOverride"], "method": "CreateMaterial", "description": "CreateMaterial(..)\r\n  Action for creating a new material based on another material. \r\n  Elemental atomic numbers, elemental masses, elemental weights and \r\n  mean excitation energy will be copied from the other material, \r\n  only density can be set.\r\n  Parameters:\r\n    BaseOnMaterial - The original material.\r\n    Name - Name must be unique, not consist of more than 16 \r\n      characters, not be empty and not only consist of whitespaces.\r\n    MassDensityOverride - The density of the new material.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceTemplateName", "SourceExaminationsNames", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "UseMultiAtlas", "RigidInitializationVoxelSize"], "method": "CreateStructuresFromAtlas", "description": "CreateStructuresFromAtlas(..)\r\n  Create structures from template using atlas-based initialization.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationsNames - List of source (template) \r\n      examination names.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    UseMultiAtlas - \r\n    RigidInitializationVoxelSize - Voxel size used for \r\n      initialization of atlases images in rigid registration step.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceTemplateName", "SourceExaminationName", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "InitializationOption"], "method": "CreateStructuresFromTemplate", "description": "CreateStructuresFromTemplate(..)\r\n  Create structures from template.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationName - The name of the source (template) \r\n      examination.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    InitializationOption - Initialization option. Possible \r\n      values;\r\n      * EmptyGeometries\r\n      * AlignImageCenters\r\n      * RigidRegistration\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Examination", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "ExternalName"], "method": "DetectBreastMarkers", "description": "DetectBreastMarkers(..)\r\n  For auto breast planning only.\r\n  Detect the SUP, INF, MED, LAT and ANT markers, and create external \r\n  ROI.\r\n  Parameters:\r\n    Examination - The name of the examination.\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    ExternalName - External ROI.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceExamination", "TargetExaminationNames", "RoiNames"], "method": "CopyRoiGeometries", "description": "CopyRoiGeometries(..)\r\n  Copies RoiGeometries between structure sets.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExaminationNames - List of target examination names.\r\n    RoiNames - List of ROI names.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Examination", "RoiNames", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMeshes", "description": "AdaptMbsMeshes(..)\r\n  Adapts MBS meshes to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    RoiNames - The ROI names.\r\n    CustomStatistics - Lookup table for custom image region \r\n      statistics per ROI.\r\n    CustomSettings - Lookup table for custom settings per ROI.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["RoiNames", "Examination", "Algorithm", "AreEmptyDependenciesAllowed"], "method": "UpdateDerivedGeometries", "description": "UpdateDerivedGeometries(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    RoiNames - The ROIs to update.\r\n    Examination - The target examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    AreEmptyDependenciesAllowed - If empty dependencies are \r\n      not allowed the resulting derived status will be set to 'Needs \r\n      update'\r\n      if any of the geometries that an ROI depends on are empty.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Examination", "Point", "Volume", "Name", "Color", "Type"], "method": "CreatePoi", "description": "CreatePoi(..)\r\n  Create a new POI.\r\n  Parameters:\r\n    Examination - The examination on which the POI will be \r\n      defined. If Examination is null, Point and Volume will \r\n      disregarded.\r\n    Point - POI coordinates. Disregarded if Examination is null.\r\n    Volume - Volume of the point [cm^3]. Disregarded if \r\n      Examination is null.\r\n      In most cases a point has a zero volume, but if the point is \r\n      used to represent a detector for example, the volume can be \r\n      set to the volume of the detector.\r\n    Name - The name of the new POI.\r\n    Color - Display color of the POI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * Registration.\r\n      * Control: To be used in control of dose optimization and \r\n      calculation.\r\n      * DoseRegion: To be used as a dose reference.\r\n      * LocalizationPoint: Laser coordinate system origin.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryNames", "SmoothingRadius", "DesiredTriangleEdgeLength", "CreateNewRois"], "method": "CreateControllingRoiGeometries", "description": "CreateControllingRoiGeometries(..)\r\n  Creates controlling ROI geometries for reference and target \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination for \r\n      which to create the controlling roi meshes.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create controlling roi geometries based on the meshes \r\n      created on the reference examination.\r\n    RoiGeometryNames - The name of the roi geometry which the \r\n      controlling roi should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done\r\n    DesiredTriangleEdgeLength - Desired edge length (in cm) \r\n      for the triangles in the mesh created on the reference \r\n      examination.\r\n      Voxel size 0.1 x 0.1 x 0.1 will be used and a typical value \r\n      for DesiredTriangleEdgeLength is 0.3\r\n    CreateNewRois - If true, the controlling roi meshes will \r\n      be placed in a new roi.\r\n      If false, the controlling roi meshes will overwrite existing \r\n      roi geometries.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceExamination", "TargetExamination", "RoiName"], "method": "CopyRoiGeometry", "description": "CopyRoiGeometry(..)\r\n  Copies an RoiGeometry from a source structure set to a target \r\n  structure set.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExamination - The target examination.\r\n    RoiName - The ROI name.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["ReferenceExaminationName", "TargetExaminationName", "FinalResolution", "DiscardImageInformation", "UsesControllingROIs", "DeformationStrategy"], "method": "GetAlgorithmSettingsForHybridDIR", "description": "GetAlgorithmSettingsForHybridDIR(..)\r\n  Gets the hybrid deformable registration algorithm settings used \r\n  when running \"Create hybrid deformable registrations\" from UI.\r\n  The resulting HybridAlgorithmSettingsData dictionary can be used \r\n  as input parameter to the scriptable action \r\n  CreateHybridDeformableRegistrationGroup, either as is or modified.\r\n  Parameters:\r\n    ReferenceExaminationName - Name of the reference \r\n      examination.\r\n    TargetExaminationName - Name of the target examination.\r\n    FinalResolution - \r\n    DiscardImageInformation - If to discard image information.\r\n    UsesControllingROIs - If to use controlling ROIs.\r\n    DeformationStrategy - Name of the deformation strategy \r\n      (\"Default\" or \"InternalLung\")\r\n  Returns:\r\n    A HybridAlgorithmSettingsData object (dictionary with \r\n    settings name and value).\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["MbsRois", "CreateNewRois", "Examination", "UseAtlasBasedInitialization"], "method": "MBSAutoInitializer", "description": "MBSAutoInitializer(..)\r\n  Initialize MBS meshes.\r\n  Parameters:\r\n    MbsRois - The list of MBS models. Each item in this list \r\n      maps case type / model to ROI name and color.\r\n      If CreateNewRois is false, RoiName must refer to an existing \r\n      ROI and RoiColor is ignored.\r\n      Example: [{ 'CaseType': \"PelvicMale\", 'ModelName': \"Bladder\", \r\n      'RoiName': \"Bladder_MBS\", 'RoiColor': \"Yellow\" },\r\n                { 'CaseType': \"PelvicMale\", 'ModelName': \"Rectum\", \r\n      'RoiName': \"Rectum\", 'RoiColor': \"Brown\" }]\r\n    CreateNewRois - True if new ROIs should be created. If it \r\n      is false, each item in MbsRois must refer to an existing ROI.\r\n    Examination - The examination.\r\n    UseAtlasBasedInitialization - True if atlas based \r\n      initialization should be used.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["PatientModelTemplate", "Examination"], "method": "AutoBreastAtlas", "description": "AutoBreastAtlas(..)\r\n  For auto breast planning only.\r\n  Create aHEART, aRTLUNG, aLTLUNG from a structure template atlas, \r\n  unless they already exist.\r\n  Parameters:\r\n    PatientModelTemplate - Name of the atlas for lung and heart.\r\n    Examination - Name of the examination.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRoiNames", "ControllingPoiNames", "FocusRoiNames", "AlgorithmSettings"], "method": "CreateHybridDeformableRegistrationGroup", "description": "CreateHybridDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with hybrid deformable \r\n  registrations for the selected reference examination and target \r\n  examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRoiNames - The list with ROI names for the \r\n      controlling ROIs.\r\n    ControllingPoiNames - The list with POI names for the \r\n      controlling POIs.\r\n    FocusRoiNames - The list with ROI names for the focus ROIs.\r\n    AlgorithmSettings - The algorithm settings.\r\n                  \r\n      Properties:\r\n                  \r\n        * NumberOfResolutionLevels\r\n          The number of resolution levels.\r\n        * InitialResolution\r\n          The deformation grid resolution (cm) at the initial \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.5, 0.5, 0.5).\r\n        * FinalResolution\r\n          The deformation grid resolution (cm) at the final \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.25, 0.25, 0.25).\r\n        * InitialGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the initial resolution \r\n      level. Typical value 2.0.\r\n        * FinalGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the final resolution \r\n      level. Typical value 0.333.\r\n        * InitialGridRegularizationWeight\r\n          The grid regularization weight at the initial resolution \r\n      level. Typical value 1500.0.\r\n        * FinalGridRegularizationWeight\r\n          The grid regularization weight at the final resolution \r\n      level. Typical value 400.0.\r\n        * ControllingRoiWeight\r\n          The controlling ROI weight. Typical value 0.5.\r\n        * ControllingPoiWeight\r\n          The controlling POI weight. Typical value 0.1.\r\n        * MaxNumberOfIterationsPerResolutionLevel\r\n          The maximum number of iterations per resolution level. \r\n      Typical value 1000.\r\n        * ImageSimilarityMeasure\r\n          The image similarity measure. Possible values: \r\n      \"CorrelationCoefficient\", \"MutualInformation\", \r\n      \"MixedCorrelationMutual\", \"None\".\r\n        * DeformationStrategy. Possible values: \"Default\", \r\n      \"InternalLung\".\r\n        * ConvergenceTolerance\r\n          The tolerance for convergence. Typical value 1e-5.\r\n      Example: \r\n                  \r\n        AlgorithmSettings = \r\n        {\r\n          'NumberOfResolutionLevels': 3,\r\n          'InitialResolution': { 'x': 0.5, 'y': 0.5, 'z': 0.5 },\r\n          'FinalResolution': { 'x': 0.25, 'y': 0.25, 'z': 0.25 },\r\n          'InitialGaussianSmoothingSigma': 2.0,\r\n          'FinalGaussianSmoothingSigma': 0.333,\r\n          'InitialGridRegularizationWeight': 1500.0,\r\n          'FinalGridRegularizationWeight': 400.0,\r\n          'ControllingRoiWeight': 0.5,\r\n          'ControllingPoiWeight': 0.1,\r\n          'MaxNumberOfIterationsPerResolutionLevel': 1000, \r\n          'ImageSimilarityMeasure': \"CorrelationCoefficient\",\r\n          'DeformationStrategy': \"DeformationStrategy\",\r\n          'ConvergenceTolerance': 1e-5\r\n        }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.FractionationPattern", "params": ["ScheduleString", "NumberOfFractionsPerDay"], "method": "EditDefaultPattern", "description": "EditDefaultPattern(..)\r\n  Edit the default pattern of the fractionation pattern.\r\n  The start schedule is specified using a string of 1's and 0's, \r\n  where a 1 represents a fraction to be delivered and a 0 represents \r\n  a skipped fraction, \r\n  and a number that specifies the number of fractions per day in the \r\n  schedule.\r\n  Example:\r\n    Set a default pattern where two fractions are delivered \r\n    every weekday the first week and no fractions are delivered the \r\n    second week.\r\n    fractionationPattern.EditDefaultPattern(ScheduleString='1111111111000000000000000000', NumberOfFractionsPerDay=2)\r\n  Parameters:\r\n    ScheduleString - The schedule string. Must be a multiple \r\n      of 7 and the number of fractions per day.\r\n    NumberOfFractionsPerDay - The number of fractions per day \r\n      in the schedule string.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "Plan.BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "Plan.BeamSets.[]", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "Plan", "params": ["PlanName", "NewBeamSetName"], "method": "CopyPlanAndAddAsNewBeamSet", "description": "CopyPlanAndAddAsNewBeamSet(..)\r\n  Copies a plan (with one beam set) and adds it as new beam set to \r\n  another plan.\r\n  The same prerequisites as when adding a new beam set to the \r\n  current plan, i.e.,\r\n   - same planning image\r\n   - same patient position\r\n   - same dose grid size, corner and resolution\r\n   - supported delivery technique\r\n   - commissioned machine\r\n              \r\n  A deep clone of the radiation set is done. Objective functions are \r\n  not copied over.\r\n  Parameters:\r\n    PlanName - Name of the plan to copy.\r\n    NewBeamSetName - The name of the new beam set.\r\n"}, {"base": "Plan", "params": ["BeamSetInfo"], "method": "LoadBeamSet", "description": "LoadBeamSet(..)\r\n  Loads a beam set from a treatment plan. Returns a handle to the \r\n  beam set.\r\n  Example:\r\n    To return a handle to the first beam set in a list retrieved \r\n    from QueryBeamSetInfo:\r\n    infos = treatmentPlan.QueryBeamSetInfo( Filter = {'Name': \r\n    'Plan1'} )\r\n    plan = treatmentPlan.LoadBeamSet( BeamSetInfo = infos[0] )\r\n  Parameters:\r\n    BeamSetInfo - Information about the plan to be selected. \r\n      The beam set info must match one and only one beam set.\r\n  Returns:\r\n    The loaded beam set.\r\n"}, {"base": "Plan", "params": ["ImageMETAHdrFileName", "OverwriteExisting"], "method": "SetDensityDistributionFromImportedMetaImage", "description": "SetDensityDistributionFromImportedMetaImage(..)\r\n  Action for set a density distribution from information stored as \r\n  a meta image (http://www.itk.org/Wiki/ITK/MetaIO/Documentation) \r\n  Tags: \r\n   - Offset\r\n   - DimSize\r\n   - ElementSize \r\n  Should correspond to Corner in mm, NrOfVoxels, and VoxelSize in \r\n  mm, respectively, of the dose grid for which the density \r\n  distribution is defined.\r\n  Data is assumed to be stored in dicom coordinate system.\r\n  ElementType should be MET_DOUBLE\r\n  Parameters:\r\n    ImageMETAHdrFileName - \r\n    OverwriteExisting - \r\n"}, {"base": "Plan", "params": ["Corner", "VoxelSize", "NumberOfVoxels"], "method": "UpdateDoseGrid", "description": "UpdateDoseGrid(..)\r\n  Updates the dose grid of a plan.\r\n  Parameters:\r\n    Corner - The dose grid corner in DICOM patient coordinates.\r\n    VoxelSize - The voxel sizes in DICOM patient coordinate \r\n      directions [cm].\r\n    NumberOfVoxels - The number of voxels in DICOM patient \r\n      coordinate directions.\r\n"}, {"base": "Plan", "params": ["TargetLinacName", "TargetPlanBaseName", "TargetOverOARWeights"], "method": "PlanMimic", "description": "PlanMimic(..)\r\n  Setup a BeamSet giving a similar dose to the source TreatmentPlan.\r\n  Parameters:\r\n    TargetLinacName - The name of the linac that the backup \r\n      plan should target.\r\n    TargetPlanBaseName - The name of the new backup plan.\r\n    TargetOverOARWeights - The Target-over-OAR weights to use.\r\n"}, {"base": "Plan", "params": ["VoxelSize"], "method": "SetDefaultDoseGrid", "description": "SetDefaultDoseGrid(..)\r\n  Sets the dose grid of the plan to cover the external ROI, the \r\n  plan bolus, and support and fixture ROIs.\r\n  Parameters:\r\n    VoxelSize - The voxel sizes in DICOM patient coordinate \r\n      directions [cm].\r\n"}, {"base": "BeamSet", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "BeamSet", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "BeamSet", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "BeamSet", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "BeamSet", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "BeamSet", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "BeamSet", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "BeamSet", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "BeamSet", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "BeamSet", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedPoiStructures.[].OfPoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DependentApprovedStructureSet.ApprovedRoiStructures.[].OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["Name", "Type", "Transmission"], "method": "SetPhotonBlock", "description": "SetPhotonBlock(..)\r\n  Sets a block on this photon beam. Returns the beam.\r\n  Parameters:\r\n    Name - Name of the block.\r\n    Type - Type of the block\r\n    Transmission - Block transmission\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "BeamSet.Beams.[].Isocenter", "params": ["Name", "Color", "Position"], "method": "EditIsocenter", "description": "EditIsocenter(..)\r\n  Edits any or all of the following isocenter parameters for the \r\n  beam.\r\n              \r\n  Examples: \r\n  Edit only the name:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New iso\")\r\n  Edit the name, color and position:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New Name\", \r\n  Color=\"Red\", Isocenter={'x':0, 'y':0, 'z':7} )\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n    Color - Color of the isocenter\r\n    Position - Position of the isocenter\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["ID", "Transmission"], "method": "SetBlockTray", "description": "SetBlockTray(..)\r\n  Sets a block tray on this photon beam. Returns the beam.\r\n  Parameters:\r\n    ID - Id of the block tray\r\n    Transmission - Transmission of the block tray\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "BeamSet.Beams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "BeamSet", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "BeamSet", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "BeamSet", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "BeamSet", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["TransformationMatrix", "CenterOfRotation"], "method": "GetAffineTransformationParametersGivenCenterOfRotation", "description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["MetaFileName"], "method": "ExportExaminationAsMetaImage", "description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "method": "CreateTransformedExamination", "description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "method": "SetTreatmentPositionAlignmentRegistration", "description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["HU", "Rho"], "method": "SetImageSpecificCtToDensityTable", "description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["DensityThresholds"], "method": "SetCtToDensityTableForCbctImage", "description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["ImagingSystemName"], "method": "SetImagingSystemReference", "description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.EquipmentInfo", "params": ["FromExaminationName"], "method": "CopyCtToDensityTableFromAnotherCbctImage", "description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["Group", "Element"], "method": "GetStoredDicomTagValueForVerification", "description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["MinCorner", "MaxCorner"], "method": "CropImageStackAndStoreAsNewExamination", "description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination", "params": ["FileName"], "method": "WriteStoredDicomDataSetToFileForVerification", "description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["RoiName"], "method": "GetIntensityStatistics", "description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["DoseGrid", "Scaling"], "method": "GetResampledPETValues", "description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "method": "GetImageStackHistogram", "description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["DoseGrid", "Reference", "LookUp"], "method": "GetResampledAndScaledPixelData", "description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.FromExamination.Series.[].ImageStack", "params": ["DoseGrid"], "method": "GetResampledPixelData", "description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["Names", "Colors"], "method": "CreateMarkerPois", "description": "CreateMarkerPois(..)\r\n  Identifies breast fiducials in a CT data set and creates the \r\n  corresponding marker POIs.\r\n  Parameters:\r\n    Names - The names of the marker POIs. Keys are: \r\n      \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". Values \r\n      defaults to: \"Superior\":\"MED\", \"Inferior\":\"INF\", \r\n      \"Medial\":\"MED\" and \"Lateral\":\"LAT\".\r\n    Colors - The display colors of the marker POIs. Use named \r\n      colors such as 'Red' or an ARGB value such as '#FFFF0000'. \r\n      Keys are: \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". \r\n      Values defaults to: \"Superior\":\"Purple\", \"Inferior\":\"Red\", \r\n      \"Medial\":\"Yellow\" and \"Lateral\":\"Blue\".\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ROI", "Indices", "Vertices"], "method": "SetRoiGeometryRepresentationToTriangleMesh", "description": "SetRoiGeometryRepresentationToTriangleMesh(..)\r\n  Set the ROI geometry to a triangle mesh.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ROI - Name of the ROI that the triangle mesh shall be \r\n      assigned to.\r\n    Indices - Array with triangle mesh indices.\r\n    Vertices - Array with triangle mesh vertices.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ReferenceRoiName", "TargetRoiName"], "method": "RoiSurfaceToSurfaceDistanceBasedOnDT", "description": "RoiSurfaceToSurfaceDistanceBasedOnDT(..)\r\n  Measures the distance between the surfaces of two ROI geometries \r\n  using a distance transform based approach. \r\n  Each point (/voxel) on the surface of the target roi will be \r\n  assigned the minimum distance to a point (/voxel) on the surface \r\n  of the reference roi. \r\n  Note that the measurements are not symmetric\r\n  A dictionary with average, max and min distances are returned\r\n  Parameters:\r\n    ReferenceRoiName - Name of roi from which surface to \r\n      compute the distance\r\n    TargetRoiName - Name of roi to which surface to compute \r\n      the distance\r\n  Returns:\r\n    A dictionary with \"Average\", \"Max\", and \"Min\" distances\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["PoiBaseName", "DelimitingRoiName", "LowDensityThreshold"], "method": "CreatePoisFromFiducialMarkers", "description": "CreatePoisFromFiducialMarkers(..)\r\n  Identifies fiducials in a CT data set and creates the \r\n  corresponding POIs.\r\n  User can select to identify fiducials inside a ROI or inside the \r\n  patient outline.\r\n  Parameters:\r\n    PoiBaseName - The base name of the marker POIs. POIs will \r\n      be labelled POI_id\r\n    DelimitingRoiName - Name of delimiting ROI. If left empty, \r\n      the External ROI will be used.\r\n    LowDensityThreshold - \r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["MetaFileName", "RoiNamesAndLabels", "UseGreaterOrEqual"], "method": "ImportSegmentationAsMetaImage", "description": "ImportSegmentationAsMetaImage(..)\r\n  Import segmentation as meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    RoiNamesAndLabels - Dictionary containing wanted ROI names \r\n      and their corresponding labels in the meta image\r\n    UseGreaterOrEqual - Default false. If true, ROI will be \r\n      equal to all voxels with values >= label\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["RoiA", "RoiB", "ComputeDistanceToAgreementMeasures"], "method": "ComparisonOfRoiGeometries", "description": "ComparisonOfRoiGeometries(..)\r\n   Computes overlap measures between two geometries for comparison.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Mean DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Max DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n  Parameters:\r\n    RoiA - The name of the ROI geometry A.\r\n    RoiB - The name of the ROI geometry B.\r\n    ComputeDistanceToAgreementMeasures - Determines if Mean \r\n      DTA and Max DTA are computed (computation time will increase).\r\n      If set to false, Mean DTA and Max DTA will not have \r\n      corresponding key/value entries in the return value.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["RoiNames", "RemoveHoles3D", "RemoveSmallContours", "AreaThreshold", "ReduceMaxNumberOfPointsInContours", "MaxNumberOfPoints", "CreateCopyOfRoi"], "method": "SimplifyContours", "description": "SimplifyContours(..)\r\n  Action for simplifying contours.\r\n  Parameters:\r\n    RoiNames - List of ROI names.\r\n    RemoveHoles3D - Remove holes in 3D.\r\n    RemoveSmallContours - Remove small contours.\r\n    AreaThreshold - Area threshold [cm^2].\r\n    ReduceMaxNumberOfPointsInContours - Reduce the number of \r\n      points in contours.\r\n    MaxNumberOfPoints - Max number of points.\r\n    CreateCopyOfRoi - Create copy of ROI.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ModelExaminationName", "ThresholdLevel", "FieldOfViewRoiName", "ExternalMbsRoiName", "SupInfRange"], "method": "OutlineBodyOnCBCT", "description": "OutlineBodyOnCBCT(..)\r\n  Creates geometry for the External ROI for a limited \r\n  field-of-view CBCT examination.\r\n  Parameters:\r\n    ModelExaminationName - The name of the examination that \r\n      will be used as the model. Typically, the planning CT.\r\n      The External ROI must have geometry defined for this \r\n      examination.\r\n    ThresholdLevel - The threshold level used to guide an MBS \r\n      mesh based on the geometry of the External ROI for the \r\n      model examination. This value should be chosen such that \r\n      larger values correspond to \r\n      anatomy in the CBCT examination.\r\n    FieldOfViewRoiName - The name of the field-of-view ROI \r\n      geometry. This ROI defines the region in which\r\n      MBS adaptation is performed for the MBS mesh based on the \r\n      external geometry in the model\r\n      examination.\r\n    ExternalMbsRoiName - The name of the external MBS ROI.\r\n    SupInfRange - The sup/inf range used when creating the \r\n      model (in cm).\r\n      Should be given in CBCT coordinates.\r\n      If (0,0) is given, the whole external on the model examination \r\n      will be used.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["FromROI", "ToROI"], "method": "CopyRoiGeometryToAnotherROI", "description": "CopyRoiGeometryToAnotherROI(..)\r\n  Copy the ROI geometry of an ROI to another ROI.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromROI - Name of the ROI with the geometry to copy.\r\n    ToROI - Name of the ROI the geometry shall be copied to.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.OutlineSource", "params": ["ModelGeometry", "RoiGeometry", "NewRoi"], "method": "AdaptMeshToGeometryAndStoreAsNewRoi", "description": "AdaptMeshToGeometryAndStoreAsNewRoi(..)\r\n  Utility method for gold atlas data (part of gentle radiotherapy \r\n  project).\r\n  A geometry which is a triangle mesh (\"ModelGeometry\") is adapted \r\n  to another geometry of any shape (RoiGeometry). \r\n  The adapted triangle mesh is stored as a geometry for a ROI which \r\n  is created by the method (NewRoi).\r\n  Parameters:\r\n    ModelGeometry - Name of RoiGeometry (which has \r\n      representation Triangle Mesh) to use as model\r\n    RoiGeometry - Name of RoiGeometry to which the model \r\n      should be adapted\r\n    NewRoi - Name of RoiGeometry where to store the adapted \r\n      triangle mesh\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Name", "Color", "Type", "TissueName", "RbeCellTypeName", "RoiMaterial"], "method": "CreateRoi", "description": "CreateRoi(..)\r\n  Create a new ROI.\r\n  Parameters:\r\n    Name - The name of the new ROI.\r\n    Color - Display color of the ROI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * External: External patient contour.\r\n      * Ptv: Planning target volume (as defined in ICRU50).\r\n      * Ctv: Clinical target volume (as defined in ICRU50).\r\n      * Gtv: Gross tumor volume (as defined in ICRU50).\r\n      * TreatedVolume: Treated volume (as defined in ICRU50).\r\n      * IrradiatedVolume: Irradiated Volume (as defined in ICRU50).\r\n      * Bolus: Patient bolus to be used for external beam therapy.\r\n      * Avoidance: Region in which dose is to be minimized.\r\n      * Organ: Patient organ.\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Registration: Registration ROI\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * ContrastAgent: Volume into which a contrast agent has been \r\n      injected.\r\n      * Cavity: Patient anatomical cavity.\r\n      * BrachyChannel: Branchy therapy channel\r\n      * BrachyAccessory: Brachy therapy accessory device.\r\n      * BrachySourceApplicator: Brachy therapy source applicator.\r\n      * BrachyChannelShield: Brachy therapy channel shield.\r\n      * Support: External patient support device.\r\n      * Fixation: External patient fixation or immobilisation device.\r\n      * DoseRegion: ROI to be used as a dose reference.\r\n      * Control: ROI to be used in control of dose optimization and \r\n      calculation.\r\n      * FieldOfView: ROI to be used for representing the \r\n      Field-of-view in, e.g., a cone beam CT image.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n    TissueName - Name of the organ tissue. Optional.\r\n    RbeCellTypeName - Name of the organ RBE cell type. Optional.\r\n    RoiMaterial - Material that overrides ROI density. Optional.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRois", "DeformationGridVoxelSize"], "method": "CreateBiomechanicalDeformableRegistrationGroup", "description": "CreateBiomechanicalDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with biomechanical \r\n  deformable registrations for the selected reference examination \r\n  and target examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRois - The list with controlling ROIs.\r\n    DeformationGridVoxelSize - The deformation grid voxel size \r\n      in the DICOM patient-based coordinate system.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["BaseOnMaterial", "Name", "MassDensityOverride"], "method": "CreateMaterial", "description": "CreateMaterial(..)\r\n  Action for creating a new material based on another material. \r\n  Elemental atomic numbers, elemental masses, elemental weights and \r\n  mean excitation energy will be copied from the other material, \r\n  only density can be set.\r\n  Parameters:\r\n    BaseOnMaterial - The original material.\r\n    Name - Name must be unique, not consist of more than 16 \r\n      characters, not be empty and not only consist of whitespaces.\r\n    MassDensityOverride - The density of the new material.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceTemplateName", "SourceExaminationsNames", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "UseMultiAtlas", "RigidInitializationVoxelSize"], "method": "CreateStructuresFromAtlas", "description": "CreateStructuresFromAtlas(..)\r\n  Create structures from template using atlas-based initialization.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationsNames - List of source (template) \r\n      examination names.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    UseMultiAtlas - \r\n    RigidInitializationVoxelSize - Voxel size used for \r\n      initialization of atlases images in rigid registration step.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceTemplateName", "SourceExaminationName", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "InitializationOption"], "method": "CreateStructuresFromTemplate", "description": "CreateStructuresFromTemplate(..)\r\n  Create structures from template.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationName - The name of the source (template) \r\n      examination.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    InitializationOption - Initialization option. Possible \r\n      values;\r\n      * EmptyGeometries\r\n      * AlignImageCenters\r\n      * RigidRegistration\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Examination", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "ExternalName"], "method": "DetectBreastMarkers", "description": "DetectBreastMarkers(..)\r\n  For auto breast planning only.\r\n  Detect the SUP, INF, MED, LAT and ANT markers, and create external \r\n  ROI.\r\n  Parameters:\r\n    Examination - The name of the examination.\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    ExternalName - External ROI.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceExamination", "TargetExaminationNames", "RoiNames"], "method": "CopyRoiGeometries", "description": "CopyRoiGeometries(..)\r\n  Copies RoiGeometries between structure sets.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExaminationNames - List of target examination names.\r\n    RoiNames - List of ROI names.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Examination", "RoiNames", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMeshes", "description": "AdaptMbsMeshes(..)\r\n  Adapts MBS meshes to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    RoiNames - The ROI names.\r\n    CustomStatistics - Lookup table for custom image region \r\n      statistics per ROI.\r\n    CustomSettings - Lookup table for custom settings per ROI.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["RoiNames", "Examination", "Algorithm", "AreEmptyDependenciesAllowed"], "method": "UpdateDerivedGeometries", "description": "UpdateDerivedGeometries(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    RoiNames - The ROIs to update.\r\n    Examination - The target examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    AreEmptyDependenciesAllowed - If empty dependencies are \r\n      not allowed the resulting derived status will be set to 'Needs \r\n      update'\r\n      if any of the geometries that an ROI depends on are empty.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["Examination", "Point", "Volume", "Name", "Color", "Type"], "method": "CreatePoi", "description": "CreatePoi(..)\r\n  Create a new POI.\r\n  Parameters:\r\n    Examination - The examination on which the POI will be \r\n      defined. If Examination is null, Point and Volume will \r\n      disregarded.\r\n    Point - POI coordinates. Disregarded if Examination is null.\r\n    Volume - Volume of the point [cm^3]. Disregarded if \r\n      Examination is null.\r\n      In most cases a point has a zero volume, but if the point is \r\n      used to represent a detector for example, the volume can be \r\n      set to the volume of the detector.\r\n    Name - The name of the new POI.\r\n    Color - Display color of the POI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * Registration.\r\n      * Control: To be used in control of dose optimization and \r\n      calculation.\r\n      * DoseRegion: To be used as a dose reference.\r\n      * LocalizationPoint: Laser coordinate system origin.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryNames", "SmoothingRadius", "DesiredTriangleEdgeLength", "CreateNewRois"], "method": "CreateControllingRoiGeometries", "description": "CreateControllingRoiGeometries(..)\r\n  Creates controlling ROI geometries for reference and target \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination for \r\n      which to create the controlling roi meshes.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create controlling roi geometries based on the meshes \r\n      created on the reference examination.\r\n    RoiGeometryNames - The name of the roi geometry which the \r\n      controlling roi should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done\r\n    DesiredTriangleEdgeLength - Desired edge length (in cm) \r\n      for the triangles in the mesh created on the reference \r\n      examination.\r\n      Voxel size 0.1 x 0.1 x 0.1 will be used and a typical value \r\n      for DesiredTriangleEdgeLength is 0.3\r\n    CreateNewRois - If true, the controlling roi meshes will \r\n      be placed in a new roi.\r\n      If false, the controlling roi meshes will overwrite existing \r\n      roi geometries.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["SourceExamination", "TargetExamination", "RoiName"], "method": "CopyRoiGeometry", "description": "CopyRoiGeometry(..)\r\n  Copies an RoiGeometry from a source structure set to a target \r\n  structure set.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExamination - The target examination.\r\n    RoiName - The ROI name.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["ReferenceExaminationName", "TargetExaminationName", "FinalResolution", "DiscardImageInformation", "UsesControllingROIs", "DeformationStrategy"], "method": "GetAlgorithmSettingsForHybridDIR", "description": "GetAlgorithmSettingsForHybridDIR(..)\r\n  Gets the hybrid deformable registration algorithm settings used \r\n  when running \"Create hybrid deformable registrations\" from UI.\r\n  The resulting HybridAlgorithmSettingsData dictionary can be used \r\n  as input parameter to the scriptable action \r\n  CreateHybridDeformableRegistrationGroup, either as is or modified.\r\n  Parameters:\r\n    ReferenceExaminationName - Name of the reference \r\n      examination.\r\n    TargetExaminationName - Name of the target examination.\r\n    FinalResolution - \r\n    DiscardImageInformation - If to discard image information.\r\n    UsesControllingROIs - If to use controlling ROIs.\r\n    DeformationStrategy - Name of the deformation strategy \r\n      (\"Default\" or \"InternalLung\")\r\n  Returns:\r\n    A HybridAlgorithmSettingsData object (dictionary with \r\n    settings name and value).\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["MbsRois", "CreateNewRois", "Examination", "UseAtlasBasedInitialization"], "method": "MBSAutoInitializer", "description": "MBSAutoInitializer(..)\r\n  Initialize MBS meshes.\r\n  Parameters:\r\n    MbsRois - The list of MBS models. Each item in this list \r\n      maps case type / model to ROI name and color.\r\n      If CreateNewRois is false, RoiName must refer to an existing \r\n      ROI and RoiColor is ignored.\r\n      Example: [{ 'CaseType': \"PelvicMale\", 'ModelName': \"Bladder\", \r\n      'RoiName': \"Bladder_MBS\", 'RoiColor': \"Yellow\" },\r\n                { 'CaseType': \"PelvicMale\", 'ModelName': \"Rectum\", \r\n      'RoiName': \"Rectum\", 'RoiColor': \"Brown\" }]\r\n    CreateNewRois - True if new ROIs should be created. If it \r\n      is false, each item in MbsRois must refer to an existing ROI.\r\n    Examination - The examination.\r\n    UseAtlasBasedInitialization - True if atlas based \r\n      initialization should be used.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["PatientModelTemplate", "Examination"], "method": "AutoBreastAtlas", "description": "AutoBreastAtlas(..)\r\n  For auto breast planning only.\r\n  Create aHEART, aRTLUNG, aLTLUNG from a structure template atlas, \r\n  unless they already exist.\r\n  Parameters:\r\n    PatientModelTemplate - Name of the atlas for lung and heart.\r\n    Examination - Name of the examination.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.RoiListSource", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRoiNames", "ControllingPoiNames", "FocusRoiNames", "AlgorithmSettings"], "method": "CreateHybridDeformableRegistrationGroup", "description": "CreateHybridDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with hybrid deformable \r\n  registrations for the selected reference examination and target \r\n  examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRoiNames - The list with ROI names for the \r\n      controlling ROIs.\r\n    ControllingPoiNames - The list with POI names for the \r\n      controlling POIs.\r\n    FocusRoiNames - The list with ROI names for the focus ROIs.\r\n    AlgorithmSettings - The algorithm settings.\r\n                  \r\n      Properties:\r\n                  \r\n        * NumberOfResolutionLevels\r\n          The number of resolution levels.\r\n        * InitialResolution\r\n          The deformation grid resolution (cm) at the initial \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.5, 0.5, 0.5).\r\n        * FinalResolution\r\n          The deformation grid resolution (cm) at the final \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.25, 0.25, 0.25).\r\n        * InitialGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the initial resolution \r\n      level. Typical value 2.0.\r\n        * FinalGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the final resolution \r\n      level. Typical value 0.333.\r\n        * InitialGridRegularizationWeight\r\n          The grid regularization weight at the initial resolution \r\n      level. Typical value 1500.0.\r\n        * FinalGridRegularizationWeight\r\n          The grid regularization weight at the final resolution \r\n      level. Typical value 400.0.\r\n        * ControllingRoiWeight\r\n          The controlling ROI weight. Typical value 0.5.\r\n        * ControllingPoiWeight\r\n          The controlling POI weight. Typical value 0.1.\r\n        * MaxNumberOfIterationsPerResolutionLevel\r\n          The maximum number of iterations per resolution level. \r\n      Typical value 1000.\r\n        * ImageSimilarityMeasure\r\n          The image similarity measure. Possible values: \r\n      \"CorrelationCoefficient\", \"MutualInformation\", \r\n      \"MixedCorrelationMutual\", \"None\".\r\n        * DeformationStrategy. Possible values: \"Default\", \r\n      \"InternalLung\".\r\n        * ConvergenceTolerance\r\n          The tolerance for convergence. Typical value 1e-5.\r\n      Example: \r\n                  \r\n        AlgorithmSettings = \r\n        {\r\n          'NumberOfResolutionLevels': 3,\r\n          'InitialResolution': { 'x': 0.5, 'y': 0.5, 'z': 0.5 },\r\n          'FinalResolution': { 'x': 0.25, 'y': 0.25, 'z': 0.25 },\r\n          'InitialGaussianSmoothingSigma': 2.0,\r\n          'FinalGaussianSmoothingSigma': 0.333,\r\n          'InitialGridRegularizationWeight': 1500.0,\r\n          'FinalGridRegularizationWeight': 400.0,\r\n          'ControllingRoiWeight': 0.5,\r\n          'ControllingPoiWeight': 0.1,\r\n          'MaxNumberOfIterationsPerResolutionLevel': 1000, \r\n          'ImageSimilarityMeasure': \"CorrelationCoefficient\",\r\n          'DeformationStrategy': \"DeformationStrategy\",\r\n          'ConvergenceTolerance': 1e-5\r\n        }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.FractionationPattern", "params": ["ScheduleString", "NumberOfFractionsPerDay"], "method": "EditDefaultPattern", "description": "EditDefaultPattern(..)\r\n  Edit the default pattern of the fractionation pattern.\r\n  The start schedule is specified using a string of 1's and 0's, \r\n  where a 1 represents a fraction to be delivered and a 0 represents \r\n  a skipped fraction, \r\n  and a number that specifies the number of fractions per day in the \r\n  schedule.\r\n  Example:\r\n    Set a default pattern where two fractions are delivered \r\n    every weekday the first week and no fractions are delivered the \r\n    second week.\r\n    fractionationPattern.EditDefaultPattern(ScheduleString='1111111111000000000000000000', NumberOfFractionsPerDay=2)\r\n  Parameters:\r\n    ScheduleString - The schedule string. Must be a multiple \r\n      of 7 and the number of fractions per day.\r\n    NumberOfFractionsPerDay - The number of fractions per day \r\n      in the schedule string.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "BeamSet.DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "BeamSet", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "BeamSet", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "BeamSet", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "BeamSet", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "BeamSet", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "BeamSet", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "BeamSet", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "BeamSet", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "BeamSet", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "BeamSet", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "BeamSet", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "BeamSet", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "BeamSet", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "BeamSet", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "BeamSet", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "BeamSet", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "BeamSet", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "BeamSet", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "BeamSet", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "BeamSet", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "BeamSet", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "BeamSet", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "PatientDB.TemplateTreatmentOptimizations.[].OptimizationProblem", "params": ["CompositeParameters", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "AddResearchOptimizationFunction", "description": "AddResearchOptimizationFunction(..)\r\n  Creates and adds a research objective constituent.\r\n  Parameters:\r\n    CompositeParameters - String that holds parameters for a \r\n      composite research function.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "PatientDB.TemplateTreatmentOptimizations.[].OptimizationProblem", "params": ["FunctionType", "ReferenceDoseDistribution", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddReferenceOptimizationFunction", "description": "AddReferenceOptimizationFunction(..)\r\n  Creates and adds a reference optimization function\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MaxRefDose\r\n      * MaxRefDvh\r\n      * MinRefDose\r\n      * MinRefDvh\r\n      * RefDoseFallOff\r\n    ReferenceDoseDistribution - The reference dose distribution.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "PatientDB.TemplateTreatmentOptimizations.[].OptimizationProblem", "params": ["FunctionType", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddOptimizationFunction", "description": "AddOptimizationFunction(..)\r\n  Creates and adds an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "PatientDB.TemplateTreatmentOptimizations.[].OptimizationProblem", "params": ["Function", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "EditResearchOptimizationFunction", "description": "EditResearchOptimizationFunction(..)\r\n  Edits a research objective constituent.\r\n  Parameters:\r\n    Function - The objective constituent that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "PatientDB.TemplateTreatmentOptimizations.[].OptimizationProblem", "params": ["Template"], "method": "ApplyOptimizationTemplate", "description": "ApplyOptimizationTemplate(..)\r\n  Copies optimization functions from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "PatientDB.TemplateTreatmentOptimizations.[].OptimizationProblem", "params": ["UseVoxelBasedMimickingForTargets", "UseVoxelBasedMimickingForOrgansAtRisk", "OrgansAtRiskToImprove", "TargetsToMaintain", "OrgansAtRiskToMaintain"], "method": "RunReduceOARDoseOptimization", "description": "RunReduceOARDoseOptimization(..)\r\n  Runs a reduce organ-at-risk optimization.\r\n  Auto-generated reference dose functions are used to reduce the \r\n  dose in \r\n  the organs-at-risk regions while maintaining dose homogeneity in \r\n  the target regions.\r\n  Parameters:\r\n    UseVoxelBasedMimickingForTargets - Indicates if voxel \r\n      based mimicking constraints should be used for target ROIs.\r\n      If false, DVH based mimicking constraints is used for target \r\n      ROIs.\r\n      Default is false.\r\n    UseVoxelBasedMimickingForOrgansAtRisk - Indicates if \r\n      voxel-based mimicking constraints should be used for \r\n      organ-at-risk ROIs.\r\n      If false, DVH-based mimicking constraints is used for \r\n      organ-at-risk ROIs.\r\n      Default is false.\r\n    OrgansAtRiskToImprove - Names of the ROIs that should be \r\n      considered as objectives in the optimization problem.\r\n      Must be a subset of OrgansAtRiskToMaintain.\r\n      Default is ROIs defined in OrgansAtRiskToMaintain.\r\n    TargetsToMaintain - Names of the ROIs that should be \r\n      considered as target ROIs in the optimization problem.\r\n      The optimization uses mimicking constraints to maintain the \r\n      uniformity of the dose for these ROIs.\r\n      Must be disjoint with OrgansAtRiskToMaintain.\r\n      Default is all ROIs with target optimization functions in the \r\n      original optimization problem.\r\n    OrgansAtRiskToMaintain - Names of the ROIs that should be \r\n      considered as organs-at-risk in the optimization problem.\r\n      The optimization uses mimicking constraints to avoid \r\n      increasing the dose for these ROIs.\r\n      Must be disjoint with TargetsToMaintain.\r\n      Default is all ROIs without target optimization functions in \r\n      the original optimization problem.\r\n"}, {"base": "PatientDB.TemplateTreatmentOptimizations.[].OptimizationProblem", "params": ["FunctionType", "DoseBasedRoiFunction", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "EditOptimizationFunction", "description": "EditOptimizationFunction(..)\r\n  Edits an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    DoseBasedRoiFunction - The objective constituent or a \r\n      constraint that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["Name", "Color", "Type", "TissueName", "RbeCellTypeName", "RoiMaterial"], "method": "CreateRoi", "description": "CreateRoi(..)\r\n  Create a new ROI.\r\n  Parameters:\r\n    Name - The name of the new ROI.\r\n    Color - Display color of the ROI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * External: External patient contour.\r\n      * Ptv: Planning target volume (as defined in ICRU50).\r\n      * Ctv: Clinical target volume (as defined in ICRU50).\r\n      * Gtv: Gross tumor volume (as defined in ICRU50).\r\n      * TreatedVolume: Treated volume (as defined in ICRU50).\r\n      * IrradiatedVolume: Irradiated Volume (as defined in ICRU50).\r\n      * Bolus: Patient bolus to be used for external beam therapy.\r\n      * Avoidance: Region in which dose is to be minimized.\r\n      * Organ: Patient organ.\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Registration: Registration ROI\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * ContrastAgent: Volume into which a contrast agent has been \r\n      injected.\r\n      * Cavity: Patient anatomical cavity.\r\n      * BrachyChannel: Branchy therapy channel\r\n      * BrachyAccessory: Brachy therapy accessory device.\r\n      * BrachySourceApplicator: Brachy therapy source applicator.\r\n      * BrachyChannelShield: Brachy therapy channel shield.\r\n      * Support: External patient support device.\r\n      * Fixation: External patient fixation or immobilisation device.\r\n      * DoseRegion: ROI to be used as a dose reference.\r\n      * Control: ROI to be used in control of dose optimization and \r\n      calculation.\r\n      * FieldOfView: ROI to be used for representing the \r\n      Field-of-view in, e.g., a cone beam CT image.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n    TissueName - Name of the organ tissue. Optional.\r\n    RbeCellTypeName - Name of the organ RBE cell type. Optional.\r\n    RoiMaterial - Material that overrides ROI density. Optional.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRois", "DeformationGridVoxelSize"], "method": "CreateBiomechanicalDeformableRegistrationGroup", "description": "CreateBiomechanicalDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with biomechanical \r\n  deformable registrations for the selected reference examination \r\n  and target examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRois - The list with controlling ROIs.\r\n    DeformationGridVoxelSize - The deformation grid voxel size \r\n      in the DICOM patient-based coordinate system.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["BaseOnMaterial", "Name", "MassDensityOverride"], "method": "CreateMaterial", "description": "CreateMaterial(..)\r\n  Action for creating a new material based on another material. \r\n  Elemental atomic numbers, elemental masses, elemental weights and \r\n  mean excitation energy will be copied from the other material, \r\n  only density can be set.\r\n  Parameters:\r\n    BaseOnMaterial - The original material.\r\n    Name - Name must be unique, not consist of more than 16 \r\n      characters, not be empty and not only consist of whitespaces.\r\n    MassDensityOverride - The density of the new material.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["SourceTemplateName", "SourceExaminationsNames", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "UseMultiAtlas", "RigidInitializationVoxelSize"], "method": "CreateStructuresFromAtlas", "description": "CreateStructuresFromAtlas(..)\r\n  Create structures from template using atlas-based initialization.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationsNames - List of source (template) \r\n      examination names.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    UseMultiAtlas - \r\n    RigidInitializationVoxelSize - Voxel size used for \r\n      initialization of atlases images in rigid registration step.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["SourceTemplateName", "SourceExaminationName", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "InitializationOption"], "method": "CreateStructuresFromTemplate", "description": "CreateStructuresFromTemplate(..)\r\n  Create structures from template.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationName - The name of the source (template) \r\n      examination.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    InitializationOption - Initialization option. Possible \r\n      values;\r\n      * EmptyGeometries\r\n      * AlignImageCenters\r\n      * RigidRegistration\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["Names", "Colors"], "method": "CreateMarkerPois", "description": "CreateMarkerPois(..)\r\n  Identifies breast fiducials in a CT data set and creates the \r\n  corresponding marker POIs.\r\n  Parameters:\r\n    Names - The names of the marker POIs. Keys are: \r\n      \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". Values \r\n      defaults to: \"Superior\":\"MED\", \"Inferior\":\"INF\", \r\n      \"Medial\":\"MED\" and \"Lateral\":\"LAT\".\r\n    Colors - The display colors of the marker POIs. Use named \r\n      colors such as 'Red' or an ARGB value such as '#FFFF0000'. \r\n      Keys are: \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". \r\n      Values defaults to: \"Superior\":\"Purple\", \"Inferior\":\"Red\", \r\n      \"Medial\":\"Yellow\" and \"Lateral\":\"Blue\".\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["ROI", "Indices", "Vertices"], "method": "SetRoiGeometryRepresentationToTriangleMesh", "description": "SetRoiGeometryRepresentationToTriangleMesh(..)\r\n  Set the ROI geometry to a triangle mesh.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ROI - Name of the ROI that the triangle mesh shall be \r\n      assigned to.\r\n    Indices - Array with triangle mesh indices.\r\n    Vertices - Array with triangle mesh vertices.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["ReferenceRoiName", "TargetRoiName"], "method": "RoiSurfaceToSurfaceDistanceBasedOnDT", "description": "RoiSurfaceToSurfaceDistanceBasedOnDT(..)\r\n  Measures the distance between the surfaces of two ROI geometries \r\n  using a distance transform based approach. \r\n  Each point (/voxel) on the surface of the target roi will be \r\n  assigned the minimum distance to a point (/voxel) on the surface \r\n  of the reference roi. \r\n  Note that the measurements are not symmetric\r\n  A dictionary with average, max and min distances are returned\r\n  Parameters:\r\n    ReferenceRoiName - Name of roi from which surface to \r\n      compute the distance\r\n    TargetRoiName - Name of roi to which surface to compute \r\n      the distance\r\n  Returns:\r\n    A dictionary with \"Average\", \"Max\", and \"Min\" distances\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination", "params": ["TransformationMatrix", "CenterOfRotation"], "method": "GetAffineTransformationParametersGivenCenterOfRotation", "description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination", "params": ["MetaFileName"], "method": "ExportExaminationAsMetaImage", "description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "method": "CreateTransformedExamination", "description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "method": "SetTreatmentPositionAlignmentRegistration", "description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.EquipmentInfo", "params": ["HU", "Rho"], "method": "SetImageSpecificCtToDensityTable", "description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.EquipmentInfo", "params": ["DensityThresholds"], "method": "SetCtToDensityTableForCbctImage", "description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.EquipmentInfo", "params": ["ImagingSystemName"], "method": "SetImagingSystemReference", "description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.EquipmentInfo", "params": ["FromExaminationName"], "method": "CopyCtToDensityTableFromAnotherCbctImage", "description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination", "params": ["Group", "Element"], "method": "GetStoredDicomTagValueForVerification", "description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination", "params": ["MinCorner", "MaxCorner"], "method": "CropImageStackAndStoreAsNewExamination", "description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination", "params": ["FileName"], "method": "WriteStoredDicomDataSetToFileForVerification", "description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.Series.[].ImageStack", "params": ["RoiName"], "method": "GetIntensityStatistics", "description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.Series.[].ImageStack", "params": ["DoseGrid", "Scaling"], "method": "GetResampledPETValues", "description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.Series.[].ImageStack", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "method": "GetImageStackHistogram", "description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.Series.[].ImageStack", "params": ["DoseGrid", "Reference", "LookUp"], "method": "GetResampledAndScaledPixelData", "description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].OnExamination.Series.[].ImageStack", "params": ["DoseGrid"], "method": "GetResampledPixelData", "description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["PoiBaseName", "DelimitingRoiName", "LowDensityThreshold"], "method": "CreatePoisFromFiducialMarkers", "description": "CreatePoisFromFiducialMarkers(..)\r\n  Identifies fiducials in a CT data set and creates the \r\n  corresponding POIs.\r\n  User can select to identify fiducials inside a ROI or inside the \r\n  patient outline.\r\n  Parameters:\r\n    PoiBaseName - The base name of the marker POIs. POIs will \r\n      be labelled POI_id\r\n    DelimitingRoiName - Name of delimiting ROI. If left empty, \r\n      the External ROI will be used.\r\n    LowDensityThreshold - \r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].RoiGeometries.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].RoiGeometries.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[].RoiGeometries.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["MetaFileName", "RoiNamesAndLabels", "UseGreaterOrEqual"], "method": "ImportSegmentationAsMetaImage", "description": "ImportSegmentationAsMetaImage(..)\r\n  Import segmentation as meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    RoiNamesAndLabels - Dictionary containing wanted ROI names \r\n      and their corresponding labels in the meta image\r\n    UseGreaterOrEqual - Default false. If true, ROI will be \r\n      equal to all voxels with values >= label\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["RoiA", "RoiB", "ComputeDistanceToAgreementMeasures"], "method": "ComparisonOfRoiGeometries", "description": "ComparisonOfRoiGeometries(..)\r\n   Computes overlap measures between two geometries for comparison.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Mean DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Max DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n  Parameters:\r\n    RoiA - The name of the ROI geometry A.\r\n    RoiB - The name of the ROI geometry B.\r\n    ComputeDistanceToAgreementMeasures - Determines if Mean \r\n      DTA and Max DTA are computed (computation time will increase).\r\n      If set to false, Mean DTA and Max DTA will not have \r\n      corresponding key/value entries in the return value.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["RoiNames", "RemoveHoles3D", "RemoveSmallContours", "AreaThreshold", "ReduceMaxNumberOfPointsInContours", "MaxNumberOfPoints", "CreateCopyOfRoi"], "method": "SimplifyContours", "description": "SimplifyContours(..)\r\n  Action for simplifying contours.\r\n  Parameters:\r\n    RoiNames - List of ROI names.\r\n    RemoveHoles3D - Remove holes in 3D.\r\n    RemoveSmallContours - Remove small contours.\r\n    AreaThreshold - Area threshold [cm^2].\r\n    ReduceMaxNumberOfPointsInContours - Reduce the number of \r\n      points in contours.\r\n    MaxNumberOfPoints - Max number of points.\r\n    CreateCopyOfRoi - Create copy of ROI.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["ModelExaminationName", "ThresholdLevel", "FieldOfViewRoiName", "ExternalMbsRoiName", "SupInfRange"], "method": "OutlineBodyOnCBCT", "description": "OutlineBodyOnCBCT(..)\r\n  Creates geometry for the External ROI for a limited \r\n  field-of-view CBCT examination.\r\n  Parameters:\r\n    ModelExaminationName - The name of the examination that \r\n      will be used as the model. Typically, the planning CT.\r\n      The External ROI must have geometry defined for this \r\n      examination.\r\n    ThresholdLevel - The threshold level used to guide an MBS \r\n      mesh based on the geometry of the External ROI for the \r\n      model examination. This value should be chosen such that \r\n      larger values correspond to \r\n      anatomy in the CBCT examination.\r\n    FieldOfViewRoiName - The name of the field-of-view ROI \r\n      geometry. This ROI defines the region in which\r\n      MBS adaptation is performed for the MBS mesh based on the \r\n      external geometry in the model\r\n      examination.\r\n    ExternalMbsRoiName - The name of the external MBS ROI.\r\n    SupInfRange - The sup/inf range used when creating the \r\n      model (in cm).\r\n      Should be given in CBCT coordinates.\r\n      If (0,0) is given, the whole external on the model examination \r\n      will be used.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["FromROI", "ToROI"], "method": "CopyRoiGeometryToAnotherROI", "description": "CopyRoiGeometryToAnotherROI(..)\r\n  Copy the ROI geometry of an ROI to another ROI.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromROI - Name of the ROI with the geometry to copy.\r\n    ToROI - Name of the ROI the geometry shall be copied to.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.StructureSets.[]", "params": ["ModelGeometry", "RoiGeometry", "NewRoi"], "method": "AdaptMeshToGeometryAndStoreAsNewRoi", "description": "AdaptMeshToGeometryAndStoreAsNewRoi(..)\r\n  Utility method for gold atlas data (part of gentle radiotherapy \r\n  project).\r\n  A geometry which is a triangle mesh (\"ModelGeometry\") is adapted \r\n  to another geometry of any shape (RoiGeometry). \r\n  The adapted triangle mesh is stored as a geometry for a ROI which \r\n  is created by the method (NewRoi).\r\n  Parameters:\r\n    ModelGeometry - Name of RoiGeometry (which has \r\n      representation Triangle Mesh) to use as model\r\n    RoiGeometry - Name of RoiGeometry to which the model \r\n      should be adapted\r\n    NewRoi - Name of RoiGeometry where to store the adapted \r\n      triangle mesh\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["Examination", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "ExternalName"], "method": "DetectBreastMarkers", "description": "DetectBreastMarkers(..)\r\n  For auto breast planning only.\r\n  Detect the SUP, INF, MED, LAT and ANT markers, and create external \r\n  ROI.\r\n  Parameters:\r\n    Examination - The name of the examination.\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    ExternalName - External ROI.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["SourceExamination", "TargetExaminationNames", "RoiNames"], "method": "CopyRoiGeometries", "description": "CopyRoiGeometries(..)\r\n  Copies RoiGeometries between structure sets.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExaminationNames - List of target examination names.\r\n    RoiNames - List of ROI names.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["Examination", "RoiNames", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMeshes", "description": "AdaptMbsMeshes(..)\r\n  Adapts MBS meshes to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    RoiNames - The ROI names.\r\n    CustomStatistics - Lookup table for custom image region \r\n      statistics per ROI.\r\n    CustomSettings - Lookup table for custom settings per ROI.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.RegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["RoiNames", "Examination", "Algorithm", "AreEmptyDependenciesAllowed"], "method": "UpdateDerivedGeometries", "description": "UpdateDerivedGeometries(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    RoiNames - The ROIs to update.\r\n    Examination - The target examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    AreEmptyDependenciesAllowed - If empty dependencies are \r\n      not allowed the resulting derived status will be set to 'Needs \r\n      update'\r\n      if any of the geometries that an ROI depends on are empty.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["Examination", "Point", "Volume", "Name", "Color", "Type"], "method": "CreatePoi", "description": "CreatePoi(..)\r\n  Create a new POI.\r\n  Parameters:\r\n    Examination - The examination on which the POI will be \r\n      defined. If Examination is null, Point and Volume will \r\n      disregarded.\r\n    Point - POI coordinates. Disregarded if Examination is null.\r\n    Volume - Volume of the point [cm^3]. Disregarded if \r\n      Examination is null.\r\n      In most cases a point has a zero volume, but if the point is \r\n      used to represent a detector for example, the volume can be \r\n      set to the volume of the detector.\r\n    Name - The name of the new POI.\r\n    Color - Display color of the POI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * Registration.\r\n      * Control: To be used in control of dose optimization and \r\n      calculation.\r\n      * DoseRegion: To be used as a dose reference.\r\n      * LocalizationPoint: Laser coordinate system origin.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryNames", "SmoothingRadius", "DesiredTriangleEdgeLength", "CreateNewRois"], "method": "CreateControllingRoiGeometries", "description": "CreateControllingRoiGeometries(..)\r\n  Creates controlling ROI geometries for reference and target \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination for \r\n      which to create the controlling roi meshes.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create controlling roi geometries based on the meshes \r\n      created on the reference examination.\r\n    RoiGeometryNames - The name of the roi geometry which the \r\n      controlling roi should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done\r\n    DesiredTriangleEdgeLength - Desired edge length (in cm) \r\n      for the triangles in the mesh created on the reference \r\n      examination.\r\n      Voxel size 0.1 x 0.1 x 0.1 will be used and a typical value \r\n      for DesiredTriangleEdgeLength is 0.3\r\n    CreateNewRois - If true, the controlling roi meshes will \r\n      be placed in a new roi.\r\n      If false, the controlling roi meshes will overwrite existing \r\n      roi geometries.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["SourceExamination", "TargetExamination", "RoiName"], "method": "CopyRoiGeometry", "description": "CopyRoiGeometry(..)\r\n  Copies an RoiGeometry from a source structure set to a target \r\n  structure set.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExamination - The target examination.\r\n    RoiName - The ROI name.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["ReferenceExaminationName", "TargetExaminationName", "FinalResolution", "DiscardImageInformation", "UsesControllingROIs", "DeformationStrategy"], "method": "GetAlgorithmSettingsForHybridDIR", "description": "GetAlgorithmSettingsForHybridDIR(..)\r\n  Gets the hybrid deformable registration algorithm settings used \r\n  when running \"Create hybrid deformable registrations\" from UI.\r\n  The resulting HybridAlgorithmSettingsData dictionary can be used \r\n  as input parameter to the scriptable action \r\n  CreateHybridDeformableRegistrationGroup, either as is or modified.\r\n  Parameters:\r\n    ReferenceExaminationName - Name of the reference \r\n      examination.\r\n    TargetExaminationName - Name of the target examination.\r\n    FinalResolution - \r\n    DiscardImageInformation - If to discard image information.\r\n    UsesControllingROIs - If to use controlling ROIs.\r\n    DeformationStrategy - Name of the deformation strategy \r\n      (\"Default\" or \"InternalLung\")\r\n  Returns:\r\n    A HybridAlgorithmSettingsData object (dictionary with \r\n    settings name and value).\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["MbsRois", "CreateNewRois", "Examination", "UseAtlasBasedInitialization"], "method": "MBSAutoInitializer", "description": "MBSAutoInitializer(..)\r\n  Initialize MBS meshes.\r\n  Parameters:\r\n    MbsRois - The list of MBS models. Each item in this list \r\n      maps case type / model to ROI name and color.\r\n      If CreateNewRois is false, RoiName must refer to an existing \r\n      ROI and RoiColor is ignored.\r\n      Example: [{ 'CaseType': \"PelvicMale\", 'ModelName': \"Bladder\", \r\n      'RoiName': \"Bladder_MBS\", 'RoiColor': \"Yellow\" },\r\n                { 'CaseType': \"PelvicMale\", 'ModelName': \"Rectum\", \r\n      'RoiName': \"Rectum\", 'RoiColor': \"Brown\" }]\r\n    CreateNewRois - True if new ROIs should be created. If it \r\n      is false, each item in MbsRois must refer to an existing ROI.\r\n    Examination - The examination.\r\n    UseAtlasBasedInitialization - True if atlas based \r\n      initialization should be used.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["PatientModelTemplate", "Examination"], "method": "AutoBreastAtlas", "description": "AutoBreastAtlas(..)\r\n  For auto breast planning only.\r\n  Create aHEART, aRTLUNG, aLTLUNG from a structure template atlas, \r\n  unless they already exist.\r\n  Parameters:\r\n    PatientModelTemplate - Name of the atlas for lung and heart.\r\n    Examination - Name of the examination.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRoiNames", "ControllingPoiNames", "FocusRoiNames", "AlgorithmSettings"], "method": "CreateHybridDeformableRegistrationGroup", "description": "CreateHybridDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with hybrid deformable \r\n  registrations for the selected reference examination and target \r\n  examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRoiNames - The list with ROI names for the \r\n      controlling ROIs.\r\n    ControllingPoiNames - The list with POI names for the \r\n      controlling POIs.\r\n    FocusRoiNames - The list with ROI names for the focus ROIs.\r\n    AlgorithmSettings - The algorithm settings.\r\n                  \r\n      Properties:\r\n                  \r\n        * NumberOfResolutionLevels\r\n          The number of resolution levels.\r\n        * InitialResolution\r\n          The deformation grid resolution (cm) at the initial \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.5, 0.5, 0.5).\r\n        * FinalResolution\r\n          The deformation grid resolution (cm) at the final \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.25, 0.25, 0.25).\r\n        * InitialGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the initial resolution \r\n      level. Typical value 2.0.\r\n        * FinalGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the final resolution \r\n      level. Typical value 0.333.\r\n        * InitialGridRegularizationWeight\r\n          The grid regularization weight at the initial resolution \r\n      level. Typical value 1500.0.\r\n        * FinalGridRegularizationWeight\r\n          The grid regularization weight at the final resolution \r\n      level. Typical value 400.0.\r\n        * ControllingRoiWeight\r\n          The controlling ROI weight. Typical value 0.5.\r\n        * ControllingPoiWeight\r\n          The controlling POI weight. Typical value 0.1.\r\n        * MaxNumberOfIterationsPerResolutionLevel\r\n          The maximum number of iterations per resolution level. \r\n      Typical value 1000.\r\n        * ImageSimilarityMeasure\r\n          The image similarity measure. Possible values: \r\n      \"CorrelationCoefficient\", \"MutualInformation\", \r\n      \"MixedCorrelationMutual\", \"None\".\r\n        * DeformationStrategy. Possible values: \"Default\", \r\n      \"InternalLung\".\r\n        * ConvergenceTolerance\r\n          The tolerance for convergence. Typical value 1e-5.\r\n      Example: \r\n                  \r\n        AlgorithmSettings = \r\n        {\r\n          'NumberOfResolutionLevels': 3,\r\n          'InitialResolution': { 'x': 0.5, 'y': 0.5, 'z': 0.5 },\r\n          'FinalResolution': { 'x': 0.25, 'y': 0.25, 'z': 0.25 },\r\n          'InitialGaussianSmoothingSigma': 2.0,\r\n          'FinalGaussianSmoothingSigma': 0.333,\r\n          'InitialGridRegularizationWeight': 1500.0,\r\n          'FinalGridRegularizationWeight': 400.0,\r\n          'ControllingRoiWeight': 0.5,\r\n          'ControllingPoiWeight': 0.1,\r\n          'MaxNumberOfIterationsPerResolutionLevel': 1000, \r\n          'ImageSimilarityMeasure': \"CorrelationCoefficient\",\r\n          'DeformationStrategy': \"DeformationStrategy\",\r\n          'ConvergenceTolerance': 1e-5\r\n        }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "PatientDB.TemplatePatientModels.[].PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[]", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[]", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["Name", "Type", "Transmission"], "method": "SetPhotonBlock", "description": "SetPhotonBlock(..)\r\n  Sets a block on this photon beam. Returns the beam.\r\n  Parameters:\r\n    Name - Name of the block.\r\n    Type - Type of the block\r\n    Transmission - Block transmission\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[].Isocenter", "params": ["Name", "Color", "Position"], "method": "EditIsocenter", "description": "EditIsocenter(..)\r\n  Edits any or all of the following isocenter parameters for the \r\n  beam.\r\n              \r\n  Examples: \r\n  Edit only the name:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New iso\")\r\n  Edit the name, color and position:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New Name\", \r\n  Color=\"Red\", Isocenter={'x':0, 'y':0, 'z':7} )\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n    Color - Color of the isocenter\r\n    Position - Position of the isocenter\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["ID", "Transmission"], "method": "SetBlockTray", "description": "SetBlockTray(..)\r\n  Sets a block tray on this photon beam. Returns the beam.\r\n  Parameters:\r\n    ID - Id of the block tray\r\n    Transmission - Transmission of the block tray\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[].Beams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[]", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[]", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[]", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "PatientDB.TemplateTreatmentSetups.[].TreatmentSetups.[]", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "Case", "params": ["FractionExamination", "PlanningExamination"], "method": "SetRegistrationAsTreatmentPositionAlignment", "description": "SetRegistrationAsTreatmentPositionAlignment(..)\r\n  Sets a frame-of reference registration as treatment position \r\n  alignment.\r\n  To be able to use this functionality a frame-of-reference \r\n  registration with the fraction image set as floating image set and \r\n  the the planning image set as reference image set has to exist.\r\n  Note: A treatment position alignment corresponds to the \r\n  relationship between the planning image set and the actual \r\n  treatment position during the fraction.\r\n  Hence, only set a frame-of-reference registration corresponding to \r\n  the relationship between the planning image set and the actual \r\n  treatment position as being treatment position alignment.\r\n  Parameters:\r\n    FractionExamination - The image set acquired during \r\n      treatment.\r\n      This image set needs to be assigned to a fraction.\r\n    PlanningExamination - The planning image set of the plan \r\n      for which treatment adaptation has been initialized.\r\n"}, {"base": "Case", "params": ["FromExamination", "ToExamination", "Point"], "method": "TransformPointFromExaminationToExamination", "description": "TransformPointFromExaminationToExamination(..)\r\n  Transforms a point (in DICOM patient coordinate system) from \r\n  FromExamination to ToExamination.\r\n  Parameters:\r\n    FromExamination - Name of FromExamination.\r\n    ToExamination - Name of ToExamination.\r\n    Point - Point to transform (in DICOM patient coordinate \r\n      system).\r\n  Returns:\r\n    Transformed point (in DICOM patient coordinate system). \r\n    Returns null if no transform exists.\r\n"}, {"base": "Case", "params": ["FloatingExaminationName", "ReferenceExaminationName", "UseOnlyTranslations", "HighWeightOnBones", "InitializeImages", "FocusRoisNames", "RegistrationName"], "method": "ComputeRigidImageRegistration", "description": "ComputeRigidImageRegistration(..)\r\n  Computes a rigid image registration.\r\n  Parameters:\r\n    FloatingExaminationName - The name of the floating \r\n      examination which is rigidly transformed.\r\n    ReferenceExaminationName - The name of the reference \r\n      examination which is not transformed.\r\n    UseOnlyTranslations - Set to \"true\" if rotations shall be \r\n      discarded in the registration process.\r\n    HighWeightOnBones - Set to \"true\" if the registration \r\n      algorithm shall focus on bony structures.\r\n    InitializeImages - Set to \"true\" if the registration \r\n      algorithm shall try to find an approximate registration before \r\n      the accurate registration is computed.\r\n    FocusRoisNames - Names of the focus ROIs.\r\n    RegistrationName - Name of the registration. Only \r\n      applicable if an additional rigid registration is computed. In \r\n      case a frame-of-reference registration is created the name \r\n      will not be used and can be left empty.\r\n"}, {"base": "Case", "params": ["PlanName", "NewPlanName"], "method": "CopyPlan", "description": "CopyPlan(..)\r\n  Copies a treatment plan.\r\n  Parameters:\r\n    PlanName - Name of the plan to copy.\r\n    NewPlanName - Desired name of the new plan.\r\n"}, {"base": "Case", "params": ["FrameOfReference", "ExaminationName", "MetaFileName", "Modality", "FlipZAxis"], "method": "ImportMetaImageToCurrentPatient", "description": "ImportMetaImageToCurrentPatient(..)\r\n  Reads data from a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation) \r\n  and creates a new examination with a corresponding image stack for \r\n  the current patient.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Support for\r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  CenterOfRotation        = 0 0 0\r\n  AnatomicalOrientation   = RAI\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT or MET_USHORT\r\n              \r\n  Patient position will be set to HFS\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    FrameOfReference - Frame-of-reference. If empty, a new UID \r\n      will be generated.\r\n    ExaminationName - Examination name\r\n    MetaFileName - File name\r\n    Modality - \r\n    FlipZAxis - Apply a flip of the z-axis\r\n"}, {"base": "Case", "params": ["ReferenceExaminationName", "TargetExaminationName", "DeformableRegistrationGroupName", "RigidTransform", "MetaImageHeaderFileName"], "method": "ImportDeformableRegistrationFromMetaImageFile", "description": "ImportDeformableRegistrationFromMetaImageFile(..)\r\n  Action for reading a deformable registration stored as a meta \r\n  image file.\r\n  Assumes that all units are mm (corner, grid element size and \r\n  displacement)\r\n  Displacement field should be stored as float (ELEMENT_TYPE = \r\n  MET_FLOAT in header file)\r\n  Parameters:\r\n    ReferenceExaminationName - Gets or sets the name of the \r\n      reference examination.\r\n    TargetExaminationName - Gets or sets the name of the \r\n      target examination.\r\n    DeformableRegistrationGroupName - Gets or sets the name of \r\n      the deformable registration group that will be created.\r\n    RigidTransform - Gets or sets the rigid transform for the \r\n      deformable registration.\r\n      If null, the identity matrix will be assumed.\r\n      In RayStation, two frame-of-references have a unique \r\n      registration, meaning there is only support for one \r\n      frame-of-reference registration between two image sets. \r\n      In addition to the frame-of-reference registration an \r\n      additional rigid transform can be created and stored (below \r\n      refered to as \"added rigid transform\"). \r\n      The combination of the frame-of-reference registration and the \r\n      added rigid transform will be the starting point for the \r\n      deformable registration. \r\n      This means that the parameter \"RigidTransform\" need to fulfil \r\n      one of the following:If the reference image and the target \r\n      image are already rigidly registered in RayStation the \r\n      transform need to fulfil:\r\n      1. no frame-of-reference registration exists between reference \r\n      and target\r\n          -> frame-of-reference registration will be set to \r\n      \"RigidTransform\" and added rigid transform to identity \r\n      2. identical to the frame-of-reference registration between \r\n      reference and target AND no added rigid transform between the \r\n      image set exists\r\n          -> added rigid transform will be set to identity \r\n      3. identical to the combined frame-of-reference registration \r\n      and added rigid transform between the image sets\r\n      4. difference than the frame-of-reference registration between \r\n      reference and target AND no added rigid transform exists\r\n          -> added rigid transform will be set to the difference \r\n      between the frame-of-reference registration and \"RigidTransform\"\r\n      Independently of the situation, no added rigid transform can \r\n      be added once the action is finished (as only one can exist \r\n      between the same set of images)\r\n                  \r\n      If RigidTransform is empty, existing transform will be used.\r\n    MetaImageHeaderFileName - Gets or sets the file name for \r\n      the meta file in which the displacement field is given.\r\n"}, {"base": "Case", "params": ["PlanExplorationName", "TreatmentPlanNames"], "method": "CopyMultiplePlansToExploration", "description": "CopyMultiplePlansToExploration(..)\r\n  Copies one or more treatment plans to the list of exploration \r\n  plans in a plan exploration.\r\n  Parameters:\r\n    PlanExplorationName - Name of the destination exploration \r\n      where the plans will be copied.\r\n    TreatmentPlanNames - Name of the plans to copy.\r\n"}, {"base": "Case", "params": ["Anonymize", "AnonymizedName", "AnonymizedId", "ExportFolderPath", "AEHostname", "AEPort", "CallingAETitle", "CalledAETitle", "Examinations", "RtStructureSetsForExaminations", "RtStructureSetsReferencedFromBeamSets", "BeamSets", "BeamSetDoseForBeamSets", "BeamDosesForBeamSets", "SpatialRegistrationForExaminations", "TreatmentBeamDrrImages", "SetupBeamDrrImages", "DicomFilter", "IgnorePreConditionWarnings", "Useatry"], "method": "ScriptableDicomExport", "description": "ScriptableDicomExport(..)\r\n  Exports specified DICOM datasets to either disk or SCP.\r\n  Parameters:\r\n    Anonymize - Anonymize all exported datasets\r\n    AnonymizedName - Patients name to set in anonymized datasets\r\n    AnonymizedId - Patient ID to set in anonymized datasets\r\n    ExportFolderPath - Export target folder. Only used for \r\n      file exports. Leave empty for SCP export\r\n    AEHostname - SCP AE name for SCP export. Leave empty for \r\n      file export\r\n    AEPort - SCP Port for SCP export. Leave empty for file \r\n      export\r\n    CallingAETitle - Calling AE title for SCP export. Leave \r\n      empty to use hostname\r\n    CalledAETitle - Called AE title for SCP export\r\n    Examinations - List of examination that shall be exported. \r\n      Specified by Examination names\r\n      Argument snippet: Examinations = [examination.Name]\r\n    RtStructureSetsForExaminations - List of examination names \r\n      for which the structure set shall be exported.\r\n      Specified by examination names\r\n      Argument snippet: RtStructureSetsForExaminations = \r\n      [examination.Name]\r\n    RtStructureSetsReferencedFromBeamSets - List of beamset \r\n      identifiers for which the referenced structure set that shall \r\n      be exported\r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: RtStructureSetsReferencedFromBeamSets = \r\n      [\"%s:%s\"%(plan.Name, beam_set.DicomPlanLabel)]\r\n      Alternative snippet: RtStructureSetsReferencedFromBeamSets = \r\n      [beam_set.BeamSetIdentifier()]\r\n    BeamSets - List of beamset identifiers that shall be \r\n      exported\r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: BeamSets = [\"%s:%s\"%(plan.Name, \r\n      beam_set.DicomPlanLabel)]\r\n      Alternative snippet: BeamSets = [beam_set.BeamSetIdentifier()]\r\n    BeamSetDoseForBeamSets - List of beamset identifiers for \r\n      which the beam set dose shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: BeamSetDoseForBeamSets = \r\n      [\"%s:%s\"%(plan.Name, beam_set.DicomPlanLabel)]\r\n      Alternative snippet: BeamSetDoseForBeamSets = \r\n      [beam_set.BeamSetIdentifier()]\r\n    BeamDosesForBeamSets - List of beamset identifiers for \r\n      which all beam doses shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: BeamDosesForBeamSets = [\"%s:%s\"%(plan.Name, \r\n      beam_set.DicomPlanLabel)]\r\n      Alternative snippet: BeamDosesForBeamSets = \r\n      [beam_set.BeamSetIdentifier()]\r\n    SpatialRegistrationForExaminations - List of examination \r\n      pairs for which the registration object shall be exported.\r\n      The pair is specified as fromExaminationName:toExaminationName\r\n      Argument snippet: SpatialRegistrationForExaminations = \r\n      [\"%s:%s\"%(fromExamination.Name, toExamination.Name)]\r\n    TreatmentBeamDrrImages - List of beamset identifiers for \r\n      which all treatment beam DRRs shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s\"%(plan.Name, beam_set.DicomPlanLabel)]\r\n      Alternative snippet: TreatmentBeamDrrImages = \r\n      [beam_set.BeamSetIdentifier()]\r\n      If you want to specify a single beam or specific DrrSetting \r\n      other then Default, the identifier shall be specified as \r\n      PlanName:DicomPlanLabel:BeamName:DrrSettingName\r\n      (ex. \"Plan 1:BS 1:B 1:DRR 1\" for plan \"Plan 1\", with beam set \r\n      \"BS 1\", and beam \"B 1\" and DrrSetting \"DRR 1\"\r\n      The last two argument can be omitted if wanted. \r\n      Not specifying beam will take all beams in the beam set\r\n      Not specifying DrrSetting will use the setting named \"Default\"\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"\")] # \r\n      all beams with Default DrrSetting\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"DRR \r\n      1\")] # all beams with DrrSetting named \"DRR 1\"\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"\")] # only the selected beam with Default DrrSetting\r\n      Argument snippet: TreatmentBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"DRR 1\")] # only the selected beam with DrrSetting named \"DRR 1\"\r\n    SetupBeamDrrImages - List of beamset identifiers for which \r\n      all setup beam DRRs shall be exported \r\n      The identifier shall be specified as PlanName:DicomPlanLabel \r\n      (ex. \"Plan 1:BS 1\" for plan \"Plan 1\" with beam set \"BS 1\")\r\n      Argument snippet: SetupBeamDrrImages =  [\"%s:%s\"%(plan.Name, \r\n      beam_set.DicomPlanLabel)]\r\n      Alternative snippet: SetupBeamDrrImages = \r\n      [beam_set.BeamSetIdentifier()]\r\n      If you want to specify a single beam or specific DrrSetting \r\n      other then Default, the identifier shall be specified as \r\n      PlanName:DicomPlanLabel:BeamName:DrrSettingName\r\n      (ex. \"Plan 1:BS 1:B 1:DRR 1\" for plan \"Plan 1\", with beam set \r\n      \"BS 1\", and beam \"B 1\" and DrrSetting \"DRR 1\"\r\n      The last two argument can be omitted if wanted. \r\n      Not specifying beam will take all beams in the beam set\r\n      Not specifying DrrSetting will use the setting named \"Default\"\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"\")] # \r\n      all beams with Default DrrSetting\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, \"\", \"DRR \r\n      1\")] # all beams with DrrSetting named \"DRR 1\"\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"\")] # only the selected beam with Default DrrSetting\r\n      Argument snippet: SetupBeamDrrImages =  \r\n      [\"%s:%s:%s:%s\"%(plan.Name, beam_set.DicomPlanLabel, beam.Name, \r\n      \"DRR 1\")] # only the selected beam with DrrSetting named \"DRR 1\"\r\n    DicomFilter - Dicom filter to use during export. Specified \r\n      by filter name.\r\n    IgnorePreConditionWarnings - Switch for disabeling \r\n      warnings. For any clinical export, warnings must be handled by \r\n      first exporting with this argument set to False.\r\n      Use a try - except pattern to catch all warnings. After the \r\n      warnings been handled, the export can bu run again with this \r\n      attribute\r\n      set to True.\r\n      Code snippet:\r\n      try:\r\n        case.ScriptableDicomExport(...)\r\n      except SystemError as error:\r\n        HandleWarnings(error)\r\n        case.ScriptableDicomExport(... \r\n      IgnorePreConditionWarnings=True)\r\n"}, {"base": "Case", "params": ["ReferenceExaminationName", "TargetExaminationName", "RegistrationName", "RigidTransformDF", "RigidTransformFoR", "FromFrameOfReference", "ToFrameOfReference", "GridCorner", "GridVoxelSize", "NrOfVoxels", "DisplacementField"], "method": "CreateNewDeformableRegistration", "description": "CreateNewDeformableRegistration(..)\r\n  Action for adding a new deformable registration based on \r\n  information stored in files. Used from scripting (see \r\n  Dev01\\CoreApps\\ScriptClient\\InternalScripts\\import_deformableregistration.py).\r\n  Parameters:\r\n    ReferenceExaminationName - Gets or sets the name of the \r\n      reference examination.\r\n    TargetExaminationName - Gets or sets the name of the \r\n      target examination.\r\n    RegistrationName - Gets or sets the name of the structure \r\n      registration.\r\n    RigidTransformDF - Gets or sets the rigid transform for \r\n      the deformable registration.\r\n    RigidTransformFoR - Gets or sets the rigid transform for \r\n      the frame-of-reference registration.\r\n    FromFrameOfReference - Gets or sets the the from \r\n      frame-of-reference\r\n    ToFrameOfReference - Gets or sets the the to \r\n      frame-of-reference\r\n    GridCorner - Gets or sets the deformation grid corner.\r\n    GridVoxelSize - Gets or sets the deformation grid voxel \r\n      size.\r\n    NrOfVoxels - Gets or sets the deformation grid size.\r\n    DisplacementField - Gets or sets the displacement field.\r\n"}, {"base": "Case", "params": ["FromExamination", "ToExamination"], "method": "GetTransformForExaminations", "description": "GetTransformForExaminations(..)\r\n  Gets the rigid transform between two examinations based on their \r\n  frame-of-reference registration.\r\n  Parameters:\r\n    FromExamination - Name of FromExamination\r\n    ToExamination - Name of ToExamination\r\n  Returns:\r\n    Rigid transform as double array. Returns null if no \r\n    transform exists.\r\n"}, {"base": "Case", "params": ["FractionNumber", "SetTotalDoseEstimateReference", "DoseDistribution", "StructureRegistration"], "method": "MapDose", "description": "MapDose(..)\r\n  Action for mapping dose from the target examination of the \r\n  registration to the reference examination of the registration.\r\n  Note that it is possible to map a dose that has already been \r\n  mapped with the same registration.\r\n  This will create two evaluation doses with the same properties.\r\n  Parameters:\r\n    FractionNumber - The fraction number of the dose \r\n      distribution.\r\n      Default is zero.\r\n    SetTotalDoseEstimateReference - Indicates if total dose \r\n      estimate reference should be set.\r\n      Default is false.\r\n    DoseDistribution - The dose distribution to map.\r\n    StructureRegistration - The deformable registration to be \r\n      used for the dose mapping.\r\n      The dose distribution must be defined on the target \r\n      examination of this registration.\r\n"}, {"base": "Case", "params": ["PlanExplorationName", "ExplorationPlanName", "NewTreatmentPlanName"], "method": "CopyExplorationPlanToPlanList", "description": "CopyExplorationPlanToPlanList(..)\r\n  Copies an exploration plan to the treatment plan list.\r\n  Parameters:\r\n    PlanExplorationName - Name of the exploration that \r\n      contains the plan that shall be copied.\r\n    ExplorationPlanName - Name of the plan to copy.\r\n    NewTreatmentPlanName - Name of the new treatment plan.\r\n"}, {"base": "Case", "params": ["Isocenter", "ExaminationName"], "method": "CreateDefaultVSimPlan", "description": "CreateDefaultVSimPlan(..)\r\n  Adds a new treatment plan using the default machine specified in \r\n  ClinicDB. If the machine\r\n  is not found, the first commissioned, non deprecated linac machine \r\n  in alpabethical order is used.\r\n  Example:\r\n    To create a plan: \r\n    case.CreateDefaultVSimPlan(Isocenter={ 'x': 0.0, 'y': 0.0, 'z': \r\n    0.0 },ExaminationName=\"CT 1\")\r\n  Parameters:\r\n    Isocenter - Coordinates of isocenter\r\n    ExaminationName - The name of the examination on which the \r\n      dose grid is defined.\r\n  Returns:\r\n    Warning message, if any.\r\n"}, {"base": "Case", "params": ["ExternalMbsRoiName", "ExternalMbsRoiColor", "ModelExaminationName", "TargetExaminationNames", "SuperiorInferiorRange", "UseExistingExternalMbsModel"], "method": "OutlineMbsMesh", "description": "OutlineMbsMesh(..)\r\n  Creates an external MBS model based on the external geometry on \r\n  the \"model examination\" and stores it in the data base (for future \r\n  use).\r\n  Create external MBS meshes for the selected images based on the \r\n  external MBS model.\r\n  Parameters:\r\n    ExternalMbsRoiName - The name of the external MBS ROI to \r\n      create.\r\n    ExternalMbsRoiColor - The color of the external MBS ROI to \r\n      create.\r\n      Default value is Yellow.\r\n    ModelExaminationName - The name of the examination used to \r\n      create an outline MBS model from.\r\n    TargetExaminationNames - The name(s) of the examination(s) \r\n      for which to create an outline MBS roigeometry.\r\n    SuperiorInferiorRange - The sup-inf range interval for \r\n      which the external MBS should be defined for (on the model \r\n      examination geometry).\r\n      If SuperiorInferiorRange is set to [0,0] the range covered by \r\n      the complete external geometry will be used.\r\n      Use the script extension utility method \r\n      StructureSet.GetSuperiorInferiorRangeForExternalGeometry() for \r\n      guidance when a smaller range is wanted.\r\n    UseExistingExternalMbsModel - If to use an existing \r\n      external MBS model.\r\n      If an external MBS model exists and \r\n      UseExistingExternalMbsModel == false, the model stored in the \r\n      data base is removed and a new is created.\r\n      This option can only be used if no external MBS geometries \r\n      exist (i.e., when the external MBS ROI has been removed).\r\n"}, {"base": "Case", "params": ["PlanExplorationName", "ExplorationPlanNames"], "method": "CopyMultipleExplorationPlansToPlanList", "description": "CopyMultipleExplorationPlansToPlanList(..)\r\n  Copies one or more exploration plans from a plan exploration to \r\n  the list of treatment plans.\r\n  Parameters:\r\n    PlanExplorationName - Name of the exploration that \r\n      contains the plans that shall be copied.\r\n    ExplorationPlanNames - Name of the plans to copy.\r\n"}, {"base": "Case", "params": ["RegistrationName"], "method": "CreateInvertedDeformationField", "description": "CreateInvertedDeformationField(..)\r\n  Method that creates an inverted deformation field.\r\n  Example:\r\n    The inversion of the structure registration \"CT 1 to CT 2\" \r\n    is created by:\r\n    study.CreateInvertedDeformationField(RegistrationName=\"CT 1 to \r\n    CT 2\")\r\n  Parameters:\r\n    RegistrationName - Name of the registration to be inverted.\r\n"}, {"base": "Case.TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber", "RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumesForAccumulatedDeliveredDose", "description": "GetDoseAtRelativeVolumesForAccumulatedDeliveredDose(..)\r\n  Method for retrieving DVH points for an accumulated delivered \r\n  dose.\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger).\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to.\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes for accumulated delivered \r\n    dose.\r\n"}, {"base": "Case.TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber", "RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValuesForAccumulatedDeliveredDose", "description": "GetRelativeVolumeAtDoseValuesForAccumulatedDeliveredDose(..)\r\n  Method for retrieving DVH points for an accumulated delivered \r\n  dose.\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger).\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to.\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values for accumulated \r\n    delivered dose.\r\n"}, {"base": "Case.TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber", "RoiName", "DoseType"], "method": "GetDoseStatisticForAccumulatedDeliveredDose", "description": "GetDoseStatisticForAccumulatedDeliveredDose(..)\r\n  Method for retrieving dose statistics for accumulated delivered \r\n  dose.\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger).\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to.\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic for accumulated delivered dose.\r\n"}, {"base": "Case.TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber"], "method": "GetAccumulatedDeliveredDoseGrid", "description": "GetAccumulatedDeliveredDoseGrid(..)\r\n  Gets the dose grid for an accumulated delivered dose\r\n  Can only be used for Patient.TreatmentDelivery.TreatmentCourse (an \r\n  exception is thrown if applied to TreatmentCourse under \r\n  TreatmentPlan)\r\n  TreatmentFractions need to have \r\n  EstimatedDoseOnTotalDoseExamination calculated consecutivly \r\n  between FromFractionNumber and ToFractionNumber\r\n              \r\n  Experimental - use with care\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger)\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to\r\n  Returns:\r\n    DoseGrid for the accumulated delivered dose\r\n"}, {"base": "Case.TreatmentDelivery", "params": ["FractionNumber"], "method": "GetBeamSetAtFractionForTreatmentDeliveryPlan", "description": "GetBeamSetAtFractionForTreatmentDeliveryPlan(..)\r\n  Gets the beamset used for a given fraction.\r\n  Example:\r\n    beamSet = \r\n    patient.TreatmentDelivery.GetBeamSetAtFractionForTreatmentDeliveryPlan(FractionNumber = nr)\r\n  Parameters:\r\n    FractionNumber - Fraction number, ranging from 1 to the \r\n      total number of fractions for the plan\r\n  Returns:\r\n    Returns beam set for selected fraction.\r\n"}, {"base": "Case.TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber"], "method": "GetAccumulatedDeliveredDoseValues", "description": "GetAccumulatedDeliveredDoseValues(..)\r\n  Gets the dose values for an accumulated delivered dose\r\n  Can only be used for Patient.TreatmentDelivery.TreatmentCourse (an \r\n  exception is thrown if applied to TreatmentCourse under \r\n  TreatmentPlan)\r\n  TreatmentFractions need to have \r\n  EstimatedDoseOnTotalDoseExamination calculated consecutivly \r\n  between FromFractionNumber and ToFractionNumber\r\n              \r\n  Experimental - use with care\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger)\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to\r\n  Returns:\r\n    Array of floats with accumulated delivered dose values\r\n"}, {"base": "Case.TreatmentDelivery", "params": ["FromFractionNumber", "ToFractionNumber"], "method": "GetAccumulatedDeliveredDose", "description": "GetAccumulatedDeliveredDose(..)\r\n  Gets a dose distribution corresponding to an accumulated \r\n  delivered dose\r\n  Can only be used for Patient.TreatmentDelivery.TreatmentCourse (an \r\n  exception is thrown if applied to TreatmentCourse under \r\n  TreatmentPlan)\r\n  TreatmentFractions need to have \r\n  EstimatedDoseOnTotalDoseExamination calculated consecutivly \r\n  between FromFractionNumber and ToFractionNumber\r\n              \r\n  Experimental - use with care\r\n  Parameters:\r\n    FromFractionNumber - The fraction number you want to start \r\n      accumulating from (needs to be 1 or larger)\r\n    ToFractionNumber - The fraction number you want to start \r\n      accumulating to\r\n  Returns:\r\n    DoseDistribution with accumulated delivered dose\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse", "params": ["FractionNumbers", "ExaminationNames", "StructureRegistrationNames"], "method": "ComputeDeliveryDoseWithDeformation", "description": "ComputeDeliveryDoseWithDeformation(..)\r\n  Action used to compute delivery dose and do optional deformation \r\n  of that dose\r\n  Parameters:\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames and\r\n      StructureRegistrationNames properties. This property must \r\n      contain at least one item.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers and StructureRegistrationNames\r\n      properties.\r\n    StructureRegistrationNames - The names of the provided \r\n      structure registrations. If an item in the list is empty, the \r\n      dose will\r\n      not be deformed. The number of items in this list must equal \r\n      the number of items in the\r\n      FractionNumbers and ExaminationNames properties.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.TotalDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.EvaluationSetup", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Case.TreatmentDelivery.TreatmentCourse.BiologyEvaluation", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Case", "params": ["ExaminationInfo"], "method": "LoadExamination", "description": "LoadExamination(..)\r\n  Sets the active/current examination. Returns a handle to the \r\n  examination.\r\n  Example:\r\n    To return a handle to the examination with name 'Exam X' \r\n    retrieved from QueryExaminationInfo:\r\n    infos = db.QueryExaminationInfo(PatientInfo = patientInfo, \r\n    Filter = {'Name': 'Exam X'})\r\n    examination = study.LoadExamination( ExaminationInfo = infos[0] )\r\n  Parameters:\r\n    ExaminationInfo - Information about the examination to be \r\n      selected. The examination info must match one and only one \r\n      examination.\r\n  Returns:\r\n    The loaded examination set.\r\n"}, {"base": "Case", "params": ["Filter"], "method": "QueryPlanInfo", "description": "QueryPlanInfo(..)\r\n  Returns info on all plans on a patient.\r\n  Example:\r\n    To return info on all plans with the exact name 'Plan1' in a \r\n    patient:\r\n    info = patient.QueryPlanInfo(Filter = {'Name': '^Plan1$'}\r\n  Parameters:\r\n    Filter - Filter using regular expressions.  \r\n                  Possible keys:\r\n                     *Id\r\n                     *Name\r\n                     *LastModified\r\n                     *IsApproved\r\n                     *ApprovalStatus\r\n  Returns:\r\n    List of plan information.\r\n"}, {"base": "Case", "params": ["FromExaminationName", "ToExaminationName", "TransformationMatrix"], "method": "SetRegistrationMatrix", "description": "SetRegistrationMatrix(..)\r\n  Sets the frame of reference registration matrix between two \r\n  frame of references.\r\n  Parameters:\r\n    FromExaminationName - The name of the from examination \r\n      that defines the from frame of reference.\r\n    ToExaminationName - The name of the to examination that \r\n      defines the to frame of reference.\r\n    TransformationMatrix - The 4x4 rigid homogeneous \r\n      transformation matrix. Must be composed of rotations and \r\n      translations only.\r\n"}, {"base": "Case", "params": ["FromImageName", "ToImageName", "RoiGeometryName", "RigidTransformation"], "method": "SimilarityForRigidlyMappedRoiGeometry", "description": "SimilarityForRigidlyMappedRoiGeometry(..)\r\n   Maps a RoiGeometry RG in the \"from\" image to the \"to\" image \r\n  using a rigid transform, resulting in RG_map, \r\n   and computes similarity measures between RG_map, below denoted \r\n  ROIB, and RG, below denoted ROIA, in the target image.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned\r\n   Unit is cm\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned\r\n   Unit is cm\r\n   \r\n   Use Patient.GetTransformForExaminations or \r\n  Patient.GetTotalTransformForExaminations to get the rigid \r\n  transformation.\r\n  Parameters:\r\n    FromImageName - Name of the from image.\r\n    ToImageName - Name of the to image.\r\n    RoiGeometryName - Name of RoiGeometry to investigate.\r\n    RigidTransformation - Rigid transformation as a double \r\n      array.\r\n  Returns:\r\n    Dictionary with measure name and value.\r\n"}, {"base": "Case", "params": ["PoiGeometryNames", "CreateNewPois", "ReferenceExaminationName", "TargetExaminationNames", "Transformations"], "method": "MapPoiGeometriesRigidly", "description": "MapPoiGeometriesRigidly(..)\r\n  Map POI geometries according to selected transformation(s).\r\n  Parameters:\r\n    PoiGeometryNames - The names of the POI geometries to map.\r\n    CreateNewPois - If true: for each PoiGeometry selected to \r\n      be mapped, a new POI is created with geometries defined in \r\n      both the reference and the target image. The geometry in the \r\n      reference image is the same as the original and the geometry \r\n      in the target image is the mapped geometry. A suffix is added \r\n      to the POI name.\r\n      If false: for each PoiGeometry selected a geometry will be \r\n      created in the target image corresponding to the geometry \r\n      mapped from the reference image.\r\n      Default is false.\r\n    ReferenceExaminationName - The name of the image from \r\n      which the transformation(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    Transformations - The transformation(s) from the reference \r\n      image(s) to the target image(s).\r\n      Transformations are given in homogeneous coordinates, e.g., \r\n      the identity transform is \r\n      {'M11' : 1, 'M12': 0, 'M13': 0, 'M14': 0, \\\r\n      'M21' : 0, 'M22': 1, 'M23': 0, 'M24': 0, \\\r\n      'M31' : 0, 'M32': 0, 'M33': 1, 'M34': 0,\\\r\n      'M41' : 0, 'M42': 0, 'M43': 0, 'M44': 1}\r\n"}, {"base": "Case", "params": ["FromExamination", "ToExamination"], "method": "GetTotalTransformForExaminations", "description": "GetTotalTransformForExaminations(..)\r\n  Gets the rigid transform between two examinations based on their \r\n  frame-of-reference registration (typically created by treatment \r\n  position alignment) and additional rigid transform. \r\n  If no additional rigid transform exists, only frame-of-reference \r\n  registration is used.\r\n  Parameters:\r\n    FromExamination - Name of FromExamination\r\n    ToExamination - Name of ToExamination\r\n  Returns:\r\n    Rigid transform as double array. Returns null if no \r\n    transform exists.\r\n"}, {"base": "Case", "params": ["PoiGeometryNames", "CreateNewPois", "StructureRegistrationGroupNames", "ReferenceExaminationNames", "TargetExaminationNames", "ReverseMapping", "AbortWhenBadDisplacementField"], "method": "MapPoiGeometriesDeformably", "description": "MapPoiGeometriesDeformably(..)\r\n  Map POI geometries according to selected deformable \r\n  registration(s).\r\n  Parameters:\r\n    PoiGeometryNames - The names of the POI geometries to map.\r\n    CreateNewPois - If true: for each PoiGeometry selected to \r\n      be mapped, a new POI is created with geometries (points) \r\n      defined in both the reference and the target image. The \r\n      geometry in the reference image is the same as the original \r\n      and the geometry in the target image is the mapped geometry. A \r\n      suffix is added to the POI name.\r\n      If false: for each PoiGeometry selected, a geometry (point) is \r\n      created in the target image corresponding to the mapped \r\n      position.\r\n      Default is false.\r\n    StructureRegistrationGroupNames - The name(s) of the \r\n      deformable registration group(s) to use for mapping.\r\n    ReferenceExaminationNames - The name(s) of the image(s) \r\n      where the deformation field(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    ReverseMapping - If true, geometries defined on the target \r\n      image are mapped to the reference image.\r\n      If false, geometries defined on the reference image are mapped \r\n      to the target image.\r\n      Default value is false.\r\n    AbortWhenBadDisplacementField - If true, geometries will \r\n      not be mapped if inverted deformation grid elements are \r\n      detected.\r\n      Default value is false.\r\n"}, {"base": "Case", "params": ["FromFrameOfReference", "ToFrameOfReference"], "method": "GetTransform", "description": "GetTransform(..)\r\n  Gets the rigid transform between two frame-of-references.\r\n  Parameters:\r\n    FromFrameOfReference - From frame-of-reference\r\n    ToFrameOfReference - To frame-of-reference\r\n  Returns:\r\n    Rigid transform as double array. Returns null if no \r\n    transform exists.\r\n"}, {"base": "Case.PatientModel", "params": ["Name", "Color", "Type", "TissueName", "RbeCellTypeName", "RoiMaterial"], "method": "CreateRoi", "description": "CreateRoi(..)\r\n  Create a new ROI.\r\n  Parameters:\r\n    Name - The name of the new ROI.\r\n    Color - Display color of the ROI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * External: External patient contour.\r\n      * Ptv: Planning target volume (as defined in ICRU50).\r\n      * Ctv: Clinical target volume (as defined in ICRU50).\r\n      * Gtv: Gross tumor volume (as defined in ICRU50).\r\n      * TreatedVolume: Treated volume (as defined in ICRU50).\r\n      * IrradiatedVolume: Irradiated Volume (as defined in ICRU50).\r\n      * Bolus: Patient bolus to be used for external beam therapy.\r\n      * Avoidance: Region in which dose is to be minimized.\r\n      * Organ: Patient organ.\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Registration: Registration ROI\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * ContrastAgent: Volume into which a contrast agent has been \r\n      injected.\r\n      * Cavity: Patient anatomical cavity.\r\n      * BrachyChannel: Branchy therapy channel\r\n      * BrachyAccessory: Brachy therapy accessory device.\r\n      * BrachySourceApplicator: Brachy therapy source applicator.\r\n      * BrachyChannelShield: Brachy therapy channel shield.\r\n      * Support: External patient support device.\r\n      * Fixation: External patient fixation or immobilisation device.\r\n      * DoseRegion: ROI to be used as a dose reference.\r\n      * Control: ROI to be used in control of dose optimization and \r\n      calculation.\r\n      * FieldOfView: ROI to be used for representing the \r\n      Field-of-view in, e.g., a cone beam CT image.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n    TissueName - Name of the organ tissue. Optional.\r\n    RbeCellTypeName - Name of the organ RBE cell type. Optional.\r\n    RoiMaterial - Material that overrides ROI density. Optional.\r\n"}, {"base": "Case.PatientModel", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRois", "DeformationGridVoxelSize"], "method": "CreateBiomechanicalDeformableRegistrationGroup", "description": "CreateBiomechanicalDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with biomechanical \r\n  deformable registrations for the selected reference examination \r\n  and target examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRois - The list with controlling ROIs.\r\n    DeformationGridVoxelSize - The deformation grid voxel size \r\n      in the DICOM patient-based coordinate system.\r\n"}, {"base": "Case.PatientModel", "params": ["BaseOnMaterial", "Name", "MassDensityOverride"], "method": "CreateMaterial", "description": "CreateMaterial(..)\r\n  Action for creating a new material based on another material. \r\n  Elemental atomic numbers, elemental masses, elemental weights and \r\n  mean excitation energy will be copied from the other material, \r\n  only density can be set.\r\n  Parameters:\r\n    BaseOnMaterial - The original material.\r\n    Name - Name must be unique, not consist of more than 16 \r\n      characters, not be empty and not only consist of whitespaces.\r\n    MassDensityOverride - The density of the new material.\r\n"}, {"base": "Case.PatientModel", "params": ["SourceTemplateName", "SourceExaminationsNames", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "UseMultiAtlas", "RigidInitializationVoxelSize"], "method": "CreateStructuresFromAtlas", "description": "CreateStructuresFromAtlas(..)\r\n  Create structures from template using atlas-based initialization.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationsNames - List of source (template) \r\n      examination names.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    UseMultiAtlas - \r\n    RigidInitializationVoxelSize - Voxel size used for \r\n      initialization of atlases images in rigid registration step.\r\n"}, {"base": "Case.PatientModel", "params": ["SourceTemplateName", "SourceExaminationName", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "InitializationOption"], "method": "CreateStructuresFromTemplate", "description": "CreateStructuresFromTemplate(..)\r\n  Create structures from template.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationName - The name of the source (template) \r\n      examination.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    InitializationOption - Initialization option. Possible \r\n      values;\r\n      * EmptyGeometries\r\n      * AlignImageCenters\r\n      * RigidRegistration\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["Names", "Colors"], "method": "CreateMarkerPois", "description": "CreateMarkerPois(..)\r\n  Identifies breast fiducials in a CT data set and creates the \r\n  corresponding marker POIs.\r\n  Parameters:\r\n    Names - The names of the marker POIs. Keys are: \r\n      \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". Values \r\n      defaults to: \"Superior\":\"MED\", \"Inferior\":\"INF\", \r\n      \"Medial\":\"MED\" and \"Lateral\":\"LAT\".\r\n    Colors - The display colors of the marker POIs. Use named \r\n      colors such as 'Red' or an ARGB value such as '#FFFF0000'. \r\n      Keys are: \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". \r\n      Values defaults to: \"Superior\":\"Purple\", \"Inferior\":\"Red\", \r\n      \"Medial\":\"Yellow\" and \"Lateral\":\"Blue\".\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.StructureSets.[].OutlineRoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["ROI", "Indices", "Vertices"], "method": "SetRoiGeometryRepresentationToTriangleMesh", "description": "SetRoiGeometryRepresentationToTriangleMesh(..)\r\n  Set the ROI geometry to a triangle mesh.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ROI - Name of the ROI that the triangle mesh shall be \r\n      assigned to.\r\n    Indices - Array with triangle mesh indices.\r\n    Vertices - Array with triangle mesh vertices.\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["ReferenceRoiName", "TargetRoiName"], "method": "RoiSurfaceToSurfaceDistanceBasedOnDT", "description": "RoiSurfaceToSurfaceDistanceBasedOnDT(..)\r\n  Measures the distance between the surfaces of two ROI geometries \r\n  using a distance transform based approach. \r\n  Each point (/voxel) on the surface of the target roi will be \r\n  assigned the minimum distance to a point (/voxel) on the surface \r\n  of the reference roi. \r\n  Note that the measurements are not symmetric\r\n  A dictionary with average, max and min distances are returned\r\n  Parameters:\r\n    ReferenceRoiName - Name of roi from which surface to \r\n      compute the distance\r\n    TargetRoiName - Name of roi to which surface to compute \r\n      the distance\r\n  Returns:\r\n    A dictionary with \"Average\", \"Max\", and \"Min\" distances\r\n"}, {"base": "Case.PatientModel.StructureSets.[].ApprovedStructureSets.[].ApprovedRoiStructures.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Case.PatientModel.StructureSets.[].ApprovedStructureSets.[].ApprovedRoiStructures.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Case.PatientModel.StructureSets.[].ApprovedStructureSets.[].ApprovedRoiStructures.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["PoiBaseName", "DelimitingRoiName", "LowDensityThreshold"], "method": "CreatePoisFromFiducialMarkers", "description": "CreatePoisFromFiducialMarkers(..)\r\n  Identifies fiducials in a CT data set and creates the \r\n  corresponding POIs.\r\n  User can select to identify fiducials inside a ROI or inside the \r\n  patient outline.\r\n  Parameters:\r\n    PoiBaseName - The base name of the marker POIs. POIs will \r\n      be labelled POI_id\r\n    DelimitingRoiName - Name of delimiting ROI. If left empty, \r\n      the External ROI will be used.\r\n    LowDensityThreshold - \r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["MetaFileName", "RoiNamesAndLabels", "UseGreaterOrEqual"], "method": "ImportSegmentationAsMetaImage", "description": "ImportSegmentationAsMetaImage(..)\r\n  Import segmentation as meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    RoiNamesAndLabels - Dictionary containing wanted ROI names \r\n      and their corresponding labels in the meta image\r\n    UseGreaterOrEqual - Default false. If true, ROI will be \r\n      equal to all voxels with values >= label\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["RoiA", "RoiB", "ComputeDistanceToAgreementMeasures"], "method": "ComparisonOfRoiGeometries", "description": "ComparisonOfRoiGeometries(..)\r\n   Computes overlap measures between two geometries for comparison.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Mean DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Max DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n  Parameters:\r\n    RoiA - The name of the ROI geometry A.\r\n    RoiB - The name of the ROI geometry B.\r\n    ComputeDistanceToAgreementMeasures - Determines if Mean \r\n      DTA and Max DTA are computed (computation time will increase).\r\n      If set to false, Mean DTA and Max DTA will not have \r\n      corresponding key/value entries in the return value.\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["RoiNames", "RemoveHoles3D", "RemoveSmallContours", "AreaThreshold", "ReduceMaxNumberOfPointsInContours", "MaxNumberOfPoints", "CreateCopyOfRoi"], "method": "SimplifyContours", "description": "SimplifyContours(..)\r\n  Action for simplifying contours.\r\n  Parameters:\r\n    RoiNames - List of ROI names.\r\n    RemoveHoles3D - Remove holes in 3D.\r\n    RemoveSmallContours - Remove small contours.\r\n    AreaThreshold - Area threshold [cm^2].\r\n    ReduceMaxNumberOfPointsInContours - Reduce the number of \r\n      points in contours.\r\n    MaxNumberOfPoints - Max number of points.\r\n    CreateCopyOfRoi - Create copy of ROI.\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["ModelExaminationName", "ThresholdLevel", "FieldOfViewRoiName", "ExternalMbsRoiName", "SupInfRange"], "method": "OutlineBodyOnCBCT", "description": "OutlineBodyOnCBCT(..)\r\n  Creates geometry for the External ROI for a limited \r\n  field-of-view CBCT examination.\r\n  Parameters:\r\n    ModelExaminationName - The name of the examination that \r\n      will be used as the model. Typically, the planning CT.\r\n      The External ROI must have geometry defined for this \r\n      examination.\r\n    ThresholdLevel - The threshold level used to guide an MBS \r\n      mesh based on the geometry of the External ROI for the \r\n      model examination. This value should be chosen such that \r\n      larger values correspond to \r\n      anatomy in the CBCT examination.\r\n    FieldOfViewRoiName - The name of the field-of-view ROI \r\n      geometry. This ROI defines the region in which\r\n      MBS adaptation is performed for the MBS mesh based on the \r\n      external geometry in the model\r\n      examination.\r\n    ExternalMbsRoiName - The name of the external MBS ROI.\r\n    SupInfRange - The sup/inf range used when creating the \r\n      model (in cm).\r\n      Should be given in CBCT coordinates.\r\n      If (0,0) is given, the whole external on the model examination \r\n      will be used.\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["FromROI", "ToROI"], "method": "CopyRoiGeometryToAnotherROI", "description": "CopyRoiGeometryToAnotherROI(..)\r\n  Copy the ROI geometry of an ROI to another ROI.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromROI - Name of the ROI with the geometry to copy.\r\n    ToROI - Name of the ROI the geometry shall be copied to.\r\n"}, {"base": "Case.PatientModel.StructureSets.[]", "params": ["ModelGeometry", "RoiGeometry", "NewRoi"], "method": "AdaptMeshToGeometryAndStoreAsNewRoi", "description": "AdaptMeshToGeometryAndStoreAsNewRoi(..)\r\n  Utility method for gold atlas data (part of gentle radiotherapy \r\n  project).\r\n  A geometry which is a triangle mesh (\"ModelGeometry\") is adapted \r\n  to another geometry of any shape (RoiGeometry). \r\n  The adapted triangle mesh is stored as a geometry for a ROI which \r\n  is created by the method (NewRoi).\r\n  Parameters:\r\n    ModelGeometry - Name of RoiGeometry (which has \r\n      representation Triangle Mesh) to use as model\r\n    RoiGeometry - Name of RoiGeometry to which the model \r\n      should be adapted\r\n    NewRoi - Name of RoiGeometry where to store the adapted \r\n      triangle mesh\r\n"}, {"base": "Case.PatientModel", "params": ["Examination", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "ExternalName"], "method": "DetectBreastMarkers", "description": "DetectBreastMarkers(..)\r\n  For auto breast planning only.\r\n  Detect the SUP, INF, MED, LAT and ANT markers, and create external \r\n  ROI.\r\n  Parameters:\r\n    Examination - The name of the examination.\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    ExternalName - External ROI.\r\n"}, {"base": "Case.PatientModel", "params": ["SourceExamination", "TargetExaminationNames", "RoiNames"], "method": "CopyRoiGeometries", "description": "CopyRoiGeometries(..)\r\n  Copies RoiGeometries between structure sets.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExaminationNames - List of target examination names.\r\n    RoiNames - List of ROI names.\r\n"}, {"base": "Case.PatientModel", "params": ["Examination", "RoiNames", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMeshes", "description": "AdaptMbsMeshes(..)\r\n  Adapts MBS meshes to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    RoiNames - The ROI names.\r\n    CustomStatistics - Lookup table for custom image region \r\n      statistics per ROI.\r\n    CustomSettings - Lookup table for custom settings per ROI.\r\n"}, {"base": "Case.PatientModel", "params": ["RoiNames", "Examination", "Algorithm", "AreEmptyDependenciesAllowed"], "method": "UpdateDerivedGeometries", "description": "UpdateDerivedGeometries(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    RoiNames - The ROIs to update.\r\n    Examination - The target examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    AreEmptyDependenciesAllowed - If empty dependencies are \r\n      not allowed the resulting derived status will be set to 'Needs \r\n      update'\r\n      if any of the geometries that an ROI depends on are empty.\r\n"}, {"base": "Case.PatientModel", "params": ["Examination", "Point", "Volume", "Name", "Color", "Type"], "method": "CreatePoi", "description": "CreatePoi(..)\r\n  Create a new POI.\r\n  Parameters:\r\n    Examination - The examination on which the POI will be \r\n      defined. If Examination is null, Point and Volume will \r\n      disregarded.\r\n    Point - POI coordinates. Disregarded if Examination is null.\r\n    Volume - Volume of the point [cm^3]. Disregarded if \r\n      Examination is null.\r\n      In most cases a point has a zero volume, but if the point is \r\n      used to represent a detector for example, the volume can be \r\n      set to the volume of the detector.\r\n    Name - The name of the new POI.\r\n    Color - Display color of the POI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * Registration.\r\n      * Control: To be used in control of dose optimization and \r\n      calculation.\r\n      * DoseRegion: To be used as a dose reference.\r\n      * LocalizationPoint: Laser coordinate system origin.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n"}, {"base": "Case.PatientModel", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryNames", "SmoothingRadius", "DesiredTriangleEdgeLength", "CreateNewRois"], "method": "CreateControllingRoiGeometries", "description": "CreateControllingRoiGeometries(..)\r\n  Creates controlling ROI geometries for reference and target \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination for \r\n      which to create the controlling roi meshes.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create controlling roi geometries based on the meshes \r\n      created on the reference examination.\r\n    RoiGeometryNames - The name of the roi geometry which the \r\n      controlling roi should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done\r\n    DesiredTriangleEdgeLength - Desired edge length (in cm) \r\n      for the triangles in the mesh created on the reference \r\n      examination.\r\n      Voxel size 0.1 x 0.1 x 0.1 will be used and a typical value \r\n      for DesiredTriangleEdgeLength is 0.3\r\n    CreateNewRois - If true, the controlling roi meshes will \r\n      be placed in a new roi.\r\n      If false, the controlling roi meshes will overwrite existing \r\n      roi geometries.\r\n"}, {"base": "Case.PatientModel", "params": ["SourceExamination", "TargetExamination", "RoiName"], "method": "CopyRoiGeometry", "description": "CopyRoiGeometry(..)\r\n  Copies an RoiGeometry from a source structure set to a target \r\n  structure set.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExamination - The target examination.\r\n    RoiName - The ROI name.\r\n"}, {"base": "Case.PatientModel", "params": ["ReferenceExaminationName", "TargetExaminationName", "FinalResolution", "DiscardImageInformation", "UsesControllingROIs", "DeformationStrategy"], "method": "GetAlgorithmSettingsForHybridDIR", "description": "GetAlgorithmSettingsForHybridDIR(..)\r\n  Gets the hybrid deformable registration algorithm settings used \r\n  when running \"Create hybrid deformable registrations\" from UI.\r\n  The resulting HybridAlgorithmSettingsData dictionary can be used \r\n  as input parameter to the scriptable action \r\n  CreateHybridDeformableRegistrationGroup, either as is or modified.\r\n  Parameters:\r\n    ReferenceExaminationName - Name of the reference \r\n      examination.\r\n    TargetExaminationName - Name of the target examination.\r\n    FinalResolution - \r\n    DiscardImageInformation - If to discard image information.\r\n    UsesControllingROIs - If to use controlling ROIs.\r\n    DeformationStrategy - Name of the deformation strategy \r\n      (\"Default\" or \"InternalLung\")\r\n  Returns:\r\n    A HybridAlgorithmSettingsData object (dictionary with \r\n    settings name and value).\r\n"}, {"base": "Case.PatientModel", "params": ["MbsRois", "CreateNewRois", "Examination", "UseAtlasBasedInitialization"], "method": "MBSAutoInitializer", "description": "MBSAutoInitializer(..)\r\n  Initialize MBS meshes.\r\n  Parameters:\r\n    MbsRois - The list of MBS models. Each item in this list \r\n      maps case type / model to ROI name and color.\r\n      If CreateNewRois is false, RoiName must refer to an existing \r\n      ROI and RoiColor is ignored.\r\n      Example: [{ 'CaseType': \"PelvicMale\", 'ModelName': \"Bladder\", \r\n      'RoiName': \"Bladder_MBS\", 'RoiColor': \"Yellow\" },\r\n                { 'CaseType': \"PelvicMale\", 'ModelName': \"Rectum\", \r\n      'RoiName': \"Rectum\", 'RoiColor': \"Brown\" }]\r\n    CreateNewRois - True if new ROIs should be created. If it \r\n      is false, each item in MbsRois must refer to an existing ROI.\r\n    Examination - The examination.\r\n    UseAtlasBasedInitialization - True if atlas based \r\n      initialization should be used.\r\n"}, {"base": "Case.PatientModel", "params": ["PatientModelTemplate", "Examination"], "method": "AutoBreastAtlas", "description": "AutoBreastAtlas(..)\r\n  For auto breast planning only.\r\n  Create aHEART, aRTLUNG, aLTLUNG from a structure template atlas, \r\n  unless they already exist.\r\n  Parameters:\r\n    PatientModelTemplate - Name of the atlas for lung and heart.\r\n    Examination - Name of the examination.\r\n"}, {"base": "Case.PatientModel", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRoiNames", "ControllingPoiNames", "FocusRoiNames", "AlgorithmSettings"], "method": "CreateHybridDeformableRegistrationGroup", "description": "CreateHybridDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with hybrid deformable \r\n  registrations for the selected reference examination and target \r\n  examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRoiNames - The list with ROI names for the \r\n      controlling ROIs.\r\n    ControllingPoiNames - The list with POI names for the \r\n      controlling POIs.\r\n    FocusRoiNames - The list with ROI names for the focus ROIs.\r\n    AlgorithmSettings - The algorithm settings.\r\n                  \r\n      Properties:\r\n                  \r\n        * NumberOfResolutionLevels\r\n          The number of resolution levels.\r\n        * InitialResolution\r\n          The deformation grid resolution (cm) at the initial \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.5, 0.5, 0.5).\r\n        * FinalResolution\r\n          The deformation grid resolution (cm) at the final \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.25, 0.25, 0.25).\r\n        * InitialGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the initial resolution \r\n      level. Typical value 2.0.\r\n        * FinalGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the final resolution \r\n      level. Typical value 0.333.\r\n        * InitialGridRegularizationWeight\r\n          The grid regularization weight at the initial resolution \r\n      level. Typical value 1500.0.\r\n        * FinalGridRegularizationWeight\r\n          The grid regularization weight at the final resolution \r\n      level. Typical value 400.0.\r\n        * ControllingRoiWeight\r\n          The controlling ROI weight. Typical value 0.5.\r\n        * ControllingPoiWeight\r\n          The controlling POI weight. Typical value 0.1.\r\n        * MaxNumberOfIterationsPerResolutionLevel\r\n          The maximum number of iterations per resolution level. \r\n      Typical value 1000.\r\n        * ImageSimilarityMeasure\r\n          The image similarity measure. Possible values: \r\n      \"CorrelationCoefficient\", \"MutualInformation\", \r\n      \"MixedCorrelationMutual\", \"None\".\r\n        * DeformationStrategy. Possible values: \"Default\", \r\n      \"InternalLung\".\r\n        * ConvergenceTolerance\r\n          The tolerance for convergence. Typical value 1e-5.\r\n      Example: \r\n                  \r\n        AlgorithmSettings = \r\n        {\r\n          'NumberOfResolutionLevels': 3,\r\n          'InitialResolution': { 'x': 0.5, 'y': 0.5, 'z': 0.5 },\r\n          'FinalResolution': { 'x': 0.25, 'y': 0.25, 'z': 0.25 },\r\n          'InitialGaussianSmoothingSigma': 2.0,\r\n          'FinalGaussianSmoothingSigma': 0.333,\r\n          'InitialGridRegularizationWeight': 1500.0,\r\n          'FinalGridRegularizationWeight': 400.0,\r\n          'ControllingRoiWeight': 0.5,\r\n          'ControllingPoiWeight': 0.1,\r\n          'MaxNumberOfIterationsPerResolutionLevel': 1000, \r\n          'ImageSimilarityMeasure': \"CorrelationCoefficient\",\r\n          'DeformationStrategy': \"DeformationStrategy\",\r\n          'ConvergenceTolerance': 1e-5\r\n        }\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.PatientModel.PointsOfInterest.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case", "params": ["ReferenceImageName", "TargetImageName", "RigidTransformation", "RoiNames"], "method": "ImageSimilarityForRigidRegistration", "description": "ImageSimilarityForRigidRegistration(..)\r\n  Compute image similarity between two images (reference and \r\n  target). A rigid transformation is applied to the reference image. \r\n  Use Patient.GetTransformForExaminations() with FromExamination as \r\n  reference and ToExamination as target to \r\n  get the transform corresponding to the frame-of-reference \r\n  registration.\r\n              \r\n  Only voxels inside the selected rois on the reference image are \r\n  considered. If no rois are selected, external geometry will be used\r\n   (i.e., consistent with rigid image registration algorithm)\r\n  Parameters:\r\n    ReferenceImageName - Name of the reference image. The \r\n      rigid transformation will be applied to this image.\r\n    TargetImageName - Name of the target image.\r\n    RigidTransformation - Rigid transformation as a double \r\n      array.\r\n    RoiNames - Names of the rois over which you want to \r\n      compute image similarity. If left empty the external geometry \r\n      will be used\r\n  Returns:\r\n    A dictionary with 'CorrelationCoefficient'\r\n"}, {"base": "Case", "params": ["FromFrameOfReference", "ToFrameOfReference", "Point"], "method": "TransformPointFromFoRToFoR", "description": "TransformPointFromFoRToFoR(..)\r\n  Transforms a point (in DICOM patient coordinate system) from \r\n  FromFrameOfReference to ToFrameOfReference.\r\n  Parameters:\r\n    FromFrameOfReference - From frame-of-reference\r\n    ToFrameOfReference - To frame-of-reference\r\n    Point - Point to transform (in DICOM patient coordinate \r\n      system)\r\n  Returns:\r\n    Transformed point (in DICOM patient coordinate system). \r\n    Returns null if no transform exists.\r\n"}, {"base": "Case", "params": ["FromExaminationName", "ToExaminationName", "RigidTransformation", "RotationCenter", "RollDegrees", "PitchDegrees", "YawDegrees", "Translation"], "method": "SetRigidTransformation", "description": "SetRigidTransformation(..)\r\n  Sets the rigid transformation between two examinations.\r\n  Parameters:\r\n    FromExaminationName - The name of the from examination \r\n      that defines the from frame of reference.\r\n    ToExaminationName - The name of the to examination that \r\n      defines the to frame of reference.\r\n    RigidTransformation - The rigid transformation. Defined by \r\n      three rotation angles, a rotation center, and a translation.\r\n        RotationCenter - The pivot point for rotations [cm]. In \r\n      DICOM coordinates.\r\n        RollDegrees - Rotation about the Inferior-Superios axis \r\n      (DICOM: z, IEC: y).\r\n        PitchDegrees - Rotation about the Right-Left axis (DICOM: x, \r\n      IEC: x).\r\n        YawDegrees - Rotation about the Posterior-Anterior axis \r\n      (DICOM: -y, IEC: z).\r\n        Translation - The translation [cm]. In DICOM coordinates.\r\n                  \r\n      Example:\r\n        RigidTransformation = \r\n        { \r\n          'YawDegrees': 0.5, \r\n          'PitchDegrees': -3.1, \r\n          'RollDegrees': 7.32, \r\n          'Translation': { 'x': 1.1, 'y': -3.2, 'z': 2.8 }, \r\n          'RotationCenter': { 'x': 0, 'y': 0, 'z': 0 } \r\n        }\r\n                  \r\n      The order of transformations is \r\n        (1) negative rotation center shift\r\n        (2) yaw rotation about posterior-anterior axis\r\n        (3) pitch rotation about right-left axis,\r\n        (4) roll rotation about inferior-superior axis,\r\n        (5) positive rotation center shift\r\n        (6) translation\r\n                  \r\n      The matrix representing the rigid transformation is\r\n                  \r\n        M = T * Tc * R_roll * R_pitch * R_yaw * T-c, \r\n                  \r\n      where T is a translation matrix representing Translation, Tc \r\n      and T-c are translation matrices \r\n      representing rotation center shifts, and R_roll, R_pitch, and \r\n      R_yaw are rotation matrices \r\n      representing the respective rotations.\r\n"}, {"base": "Case", "params": ["Dose1", "Dose2", "Weight1", "Weight2", "DoseName"], "method": "SumTwoDoses", "description": "SumTwoDoses(..)\r\n  Sums two dose distributions.\r\n  Parameters:\r\n    Dose1 - The first dose distribution.\r\n    Dose2 - The second dose distribution.\r\n    Weight1 - The weight of the first dose distribution. Must \r\n      be a positive number.\r\n    Weight2 - The weight of the second dose distribution. Must \r\n      be a positive number.\r\n    DoseName - The name of the summed dose. Cannot be empty.\r\n"}, {"base": "Case", "params": ["RoiGeometryNames", "CreateNewRois", "StructureRegistrationGroupNames", "ReferenceExaminationNames", "TargetExaminationNames", "ReverseMapping", "AbortWhenBadDisplacementField"], "method": "MapRoiGeometriesDeformably", "description": "MapRoiGeometriesDeformably(..)\r\n  Map ROI geometries according to selected deformable \r\n  registration(s).\r\n  Parameters:\r\n    RoiGeometryNames - The names of the ROI geometries to map.\r\n    CreateNewRois - If true: for each RoiGeometry selected to \r\n      be mapped, a new ROI is created with geometries defined in \r\n      both the reference and the target image. The geometry in the \r\n      reference image is the same as the original and the geometry \r\n      in the target image is the mapped geometry. A suffix is added \r\n      to the ROI name.\r\n      If false: for each RoiGeometry selected a geometry is created \r\n      in the target image corresponding to the geometry mapped from \r\n      the reference image.\r\n      Default is false.\r\n    StructureRegistrationGroupNames - The name(s) of the \r\n      deformable registration group(s) to use for mapping.\r\n    ReferenceExaminationNames - The name(s) of the image(s) \r\n      where the deformation field(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    ReverseMapping - If true, geometries defined on the target \r\n      image are mapped to the reference image.\r\n      If false, geometries defined on the reference image are mapped \r\n      to the target image.\r\n      Default value is false.\r\n    AbortWhenBadDisplacementField - If true, geometries will \r\n      not be mapped if inverted deformation grid elements are \r\n      detected.\r\n      Default value is false.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.CaseSettings.HiddenRegionsOfInterest.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case", "params": ["ValidationDataSet", "PhantomName", "Plan", "Name", "Modality", "MachineName", "TreatmentTechnique", "Beams", "Name", "MonitorUnits", "SourceToSurfaceDistance", "BeamQualityName", "ApplicatorName", "IsoCenterToSurfaceDistance", "SnoutName", "SnoutPosition", "PrescribedSOBPRange", "PrescribedSOBPWidth", "SpotTuneID", "SpotSpacing", "NominalEnergy", "FieldSize", "SpotPositions", "SpotWeights", "Compensator", "MaterialName", "Thickness", "BlockAperture", "Type", "Dimension", "Position", "MaxRadius", "Thickness", "NominalBeamEnergy", "FirstScattererThickness", "RidgeFilter", "DoseComputationParameters", "DoseEngineName", "DoseGridResolution", "NumberOfHistoriesPerCM2"], "method": "CreateTreatmentPlanFromValidationDataSet", "description": "CreateTreatmentPlanFromValidationDataSet(..)\r\n  Creates an electron or ion treatment plan from a data set.\r\n  This action is experimental - use with care\r\n  Parameters:\r\n    ValidationDataSet - Validation data set should be in the \r\n      form of a dictionary with the fields listed below. Some fields \r\n      are specific for either electron or ion plans.\r\n                  \r\n      PhantomName           - The name of the phantom to be used in \r\n      the plan\r\n      Plan                  - This field contains information about \r\n      the treatment plan which will be created\r\n        Name                - The name of the created plan\r\n        Modality            - Treatment modality\r\n        MachineName         - The name of the machine to be used in \r\n      the plan\r\n        TreatmentTechnique  - Treatment technique: \r\n      \"ApplicatorAndCutout\" for electrons, \"DoubleScattering\", \r\n      \"UniformScanning\", \"Wobbling\", \"PencilBeamScanning\" or \r\n      \"LineScanning\" for ions (only PBS for carbon ions) \r\n        Beams               - List of beams with each beam \r\n      containing the information below\r\n          Name                        - Name of the beam\r\n          MonitorUnits                - Number of monitor units\r\n          SourceToSurfaceDistance     - Source to surface distance \r\n      in [cm] (only for electrons)\r\n          BeamQualityName             - Beam quality, e.g. \"E04\" \r\n      where the nominal energy is 4 MeV (only for electrons)\r\n          ApplicatorName              - Name of the applicator to be \r\n      used in the plan (only for electrons)\r\n          IsoCenterToSurfaceDistance  - Isocenter to phantom surface \r\n      distance in [cm] (only for ions)\r\n          SnoutName                   - The name of the snout to be \r\n      used (only for ions)\r\n          SnoutPosition               - The snout position in [cm] \r\n      (only for ions)\r\n          PrescribedSOBPRange         - The prescribed SOBP range in \r\n      [cm] (only for passive ions)\r\n          PrescribedSOBPWidth         - The prescribed SOBP \r\n      modulation width in [cm] (only for passive ions)\r\n          SpotTuneID                  - The fixed spot tune ID (only \r\n      for scanned ions)\r\n          SpotSpacing                 - The distance in [cm] between \r\n      spots (only for scanned ions)\r\n          NominalEnergy               - Nominal ion beam energy in \r\n      [MeV] (only for scanned ions)\r\n          FieldSize                   - The side in [cm] of a \r\n      scanned quadratic field (only for scanned ions)\r\n          SpotPositions               - The position of the spots \r\n      (only for scanned ions)\r\n          SpotWeights                 - The weight of each point in \r\n      SpotPositions (only for scanned ions)\r\n          Compensator                 - This field contains \r\n      information about range compensator (optional for passive \r\n      ions, may be omitted)\r\n            MaterialName              - Name of the range \r\n      compensator's material\r\n            Thickness                 - Thickness in [cm] of the \r\n      range compensator\r\n          BlockAperture               - The block aperture in a ions \r\n      plan (required for passive ions) or cutout in an electron plan \r\n      (optional for electrons, may be omitted)\r\n            Type                      - Type of block: \"Quadratic\", \r\n      \"Rectangular\" or \"SquareRoundCorners\"\r\n            Dimension                 - Dimension of block in [cm], \r\n      e.g. [10, 10] (for quadratic) or [10,20] (for rectangular) or \r\n      [15, 0] (for circular blocks) \r\n            Position                  - Lower corner position of \r\n      block in [cm]. Can only be used for blocks with Type == \r\n      \"Rectangular\". Format [x,y]\r\n            MaxRadius                 - Maximum allowed radius in \r\n      the isocenter plane in [cm]. Should be used for blocks with \r\n      Type == \"SquareRoundCorners\"\r\n            Thickness                 - The thickness of the block \r\n      in [cm]\r\n          NominalBeamEnergy           - The nominal beam energy \r\n      [MeV] (only for Sumitomo Wobbling beams)\r\n          FirstScattererThickness     - The first scatter thickness, \r\n      i.e total thickness of used lollipops [cm] (only for Sumitomo \r\n      Wobbling beams)\r\n          RidgeFilter                 - The name of the ridge filter \r\n      to be used (only for Sumitomo Wobbling beams)\r\n      DoseComputationParameters       - This field contains \r\n      information about the dose computation parameters\r\n          DoseEngineName              - The name of the dose engine \r\n      to be used: \"ElectronMonteCarlo\" (only for electrons), \r\n      \"IonPencilBeam\" (only for passive ions) or \r\n      \"SpotWeightPencilBeam\" (only for pbs ions) \r\n          DoseGridResolution          - The side of a cubic voxel in \r\n      [cm]\r\n          NumberOfHistoriesPerCM2     - The number of histories per \r\n      cm2 (must be specified for both electrons and ions, it is \r\n      however only used for the ElectronMonteCarlo dose engine)\r\n"}, {"base": "Case", "params": ["FractionNumber", "AdaptToPlanName", "UseTreatmentDeliveryAsSource", "PlanName", "PlannedBy", "Comment", "ExaminationName", "AllowDuplicateNames"], "method": "AddNewAdaptivePlan", "description": "AddNewAdaptivePlan(..)\r\n  Action for creating a new adapted plan.\r\n              \r\n  Prerequisite: deformable image registration (DIR) with new \r\n  planning image as reference image and original planning image as \r\n  target image. \r\n  The DIR should be approved for dose accumulation.\r\n              \r\n  Example:\r\n  # add new adapted plan from fraction 10 to a plan with one beam \r\n  set using planning image \"RESCAN\"\r\n  patient = get_current(\"Patient\")\r\n  case = get_current(\"Case\")\r\n  plan=get_current(\"Plan\")\r\n  beam_set=get_current(\"BeamSet\")\r\n  adapt_from_fx = 10\r\n  adapted_ct = \"RESCAN\"\r\n  tot_nr_fx = len([tf for tf in \r\n  plan.TreatmentCourse.TreatmentFractions])\r\n              \r\n  adapted_plan = case.AddNewAdaptivePlan(FractionNumber= \r\n  adapt_from_fx, AdaptToPlanName= plan.Name, \r\n  UseTreatmentDeliveryAsSource= True,\r\n  PlanName= \"Adapted plan\", PlannedBy= None, Comment= \"\", \r\n  ExaminationName= adapted_ct, AllowDuplicateNames= False)\r\n  treatment_technique = beam_set.GetTreatmentTechniqueType()\r\n              \r\n  beam_set_settings = {'NumberOfRemainingFractions': tot_nr_fx - \r\n  adapt_from_fx, 'MachineName': \r\n  beam_set.MachineReference.MachineName, \r\n  'CreateSetupBeams': true, 'DicomPlanLabelOfOriginalBeamSet': \r\n  beam_set.DicomPlanLabel, 'ClearBeamModifiers': false, \r\n  'RemoveBeams': false, 'TreatmentTechnique': treatment_technique}\r\n  adapted_plan.AddBeamSetsToAdaptedPlan(AdaptedBeamSets=[beam_set_settings])\r\n  \r\n  adapted_beam_set = adapted_plan.BeamSets[0]\r\n  prescription = beam_set.Prescription.PrimaryDosePrescription\r\n  adapted_beam_set.AddDosePrescriptionToRoi(\r\n  RoiName=prescription.OnStructure.Name,\r\n  DoseVolume=prescription.DoseVolume,\r\n  PrescriptionType=prescription.PrescriptionType,\r\n  DoseValue=prescription.DoseValue,\r\n  RelativePrescriptionLevel=prescription.RelativePrescriptionLevel,\r\n  AutoScaleDose=False)\r\n  Parameters:\r\n    FractionNumber - Fraction for which to start the delivery \r\n      of the adapted plan. \r\n      FractionNumber has to be less or equal to the number of \r\n      fractions for the original plan + 1.\r\n      If 'UseTreatmentDeliveryAsSource', FractionNumber needs to be \r\n      larger than the number of delivered fractions\r\n    AdaptToPlanName - Name of the plan for which adaptation \r\n      should be done\r\n    UseTreatmentDeliveryAsSource - Sets if background dose \r\n      during optimization should be \r\n      - delivered accumulated dose (as computed in DoseTracking \r\n      workspace and store as TreatmentCourse under \r\n      TreatmentDelivery) [TRUE], or\r\n      - planned accumulated dose [FALSE]\r\n    PlanName - Name of the new plan.\r\n    PlannedBy - Name of the planner.\r\n    Comment - Comments of the new plan.\r\n    ExaminationName - The name of the planning image set \r\n      defined for the new plan\r\n    AllowDuplicateNames - Skip uniqueness test for name (used \r\n      by fallback plans).\r\n"}, {"base": "Case", "params": ["PlanInfo"], "method": "LoadPlan", "description": "LoadPlan(..)\r\n  Loads a plan from a patient. Returns a handle to the plan.\r\n  Example:\r\n    To return a handle to the first plan in a list retrieved \r\n    from QueryPlanInfo:\r\n    plans = patient.QueryPlanInfo(PlanInfo = {'Name': 'Plan1'} )\r\n    plan = db.LoadPlan( PlanInfo = plans[0] )\r\n  Parameters:\r\n    PlanInfo - Information about the plan to be selected. The \r\n      plan info must match one and only one patient.\r\n  Returns:\r\n    The loaded plan.\r\n"}, {"base": "Case", "params": ["PlanName", "Examination", "PlannedBy", "DoseGridResolution", "NumberOfFractions", "TreatmentMachine", "CreateSetupBeams", "UniformDoseToTarget", "TargetName", "TargetColor"], "method": "CreateBreastPlan", "description": "CreateBreastPlan(..)\r\n  For auto breast planning only.\r\n  Creates plan and beam set, sets up prescription, creates dose grid\r\n  Parameters:\r\n    PlanName - Name of the new plan.\r\n    Examination - Name of the examination set to be used.\r\n    PlannedBy - Planned by\r\n    DoseGridResolution - Dose grid resolution.\r\n    NumberOfFractions - Number of fractions.\r\n    TreatmentMachine - Name of the Treatment machine.\r\n    CreateSetupBeams - Create setup beams.\r\n    UniformDoseToTarget - Prescription in cGy to CTV.\r\n    TargetName - Name of the target ROI ('aCTV').\r\n    TargetColor - Color of the target ROI.\r\n"}, {"base": "Case", "params": ["StructureRegistration"], "method": "DeleteDeformableRegistration", "description": "DeleteDeformableRegistration(..)\r\n  Deletes a deformable registration.\r\n  Note: only deformable registrations with no dependent doses can be \r\n  deleted.\r\n  Parameters:\r\n    StructureRegistration - registration to be deleted\r\n"}, {"base": "Case", "params": ["FromFrameOfReference", "ToFrameOfReference"], "method": "DeleteRegistrationCreatedByTreatmentPositionAlignment", "description": "DeleteRegistrationCreatedByTreatmentPositionAlignment(..)\r\n  Method for deleting frame-of-reference registration created by \r\n  treatment position alignment.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromFrameOfReference - From frame-of-reference\r\n    ToFrameOfReference - To frame-of-reference string\r\n"}, {"base": "Case", "params": ["SettingsData"], "method": "CreateOrUpdateSettings", "description": "CreateOrUpdateSettings(..)\r\n  Creates (if not exists) or updates (if exists) \r\n  AutoBreastSettings on specified TreatmentCase.\r\n  Parameters:\r\n    SettingsData - Gets or sets an object representing the \r\n      settings that will be used.\r\n      If not set, default settings will be used.\r\n"}, {"base": "Case.Examinations.[]", "params": ["TransformationMatrix", "CenterOfRotation"], "method": "GetAffineTransformationParametersGivenCenterOfRotation", "description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n"}, {"base": "Case.Examinations.[]", "params": ["MetaFileName"], "method": "ExportExaminationAsMetaImage", "description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n"}, {"base": "Case.Examinations.[]", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "method": "CreateTransformedExamination", "description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n"}, {"base": "Case.Examinations.[]", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "method": "SetTreatmentPositionAlignmentRegistration", "description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n"}, {"base": "Case.Examinations.[].EquipmentInfo", "params": ["HU", "Rho"], "method": "SetImageSpecificCtToDensityTable", "description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n"}, {"base": "Case.Examinations.[].EquipmentInfo", "params": ["DensityThresholds"], "method": "SetCtToDensityTableForCbctImage", "description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n"}, {"base": "Case.Examinations.[].EquipmentInfo", "params": ["ImagingSystemName"], "method": "SetImagingSystemReference", "description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n"}, {"base": "Case.Examinations.[].EquipmentInfo", "params": ["FromExaminationName"], "method": "CopyCtToDensityTableFromAnotherCbctImage", "description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n"}, {"base": "Case.Examinations.[]", "params": ["Group", "Element"], "method": "GetStoredDicomTagValueForVerification", "description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n"}, {"base": "Case.Examinations.[]", "params": ["MinCorner", "MaxCorner"], "method": "CropImageStackAndStoreAsNewExamination", "description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n"}, {"base": "Case.Examinations.[]", "params": ["FileName"], "method": "WriteStoredDicomDataSetToFileForVerification", "description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n"}, {"base": "Case.Examinations.[].Series.[].ImageStack", "params": ["RoiName"], "method": "GetIntensityStatistics", "description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n"}, {"base": "Case.Examinations.[].Series.[].ImageStack", "params": ["DoseGrid", "Scaling"], "method": "GetResampledPETValues", "description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n"}, {"base": "Case.Examinations.[].Series.[].ImageStack", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "method": "GetImageStackHistogram", "description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n"}, {"base": "Case.Examinations.[].Series.[].ImageStack", "params": ["DoseGrid", "Reference", "LookUp"], "method": "GetResampledAndScaledPixelData", "description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n"}, {"base": "Case.Examinations.[].Series.[].ImageStack", "params": ["DoseGrid"], "method": "GetResampledPixelData", "description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n"}, {"base": "Case", "params": ["ExaminationName", "NewExaminationName"], "method": "CopyExamination", "description": "CopyExamination(..)\r\n  Method that copies the examination with name ExaminationName to \r\n  a new examination with name\r\n  NewExaminationName.\r\n  Parameters:\r\n    ExaminationName - Name of the examination to copy.\r\n    NewExaminationName - Name of the new copied examination. \r\n      Must be unique and cannot exceed 64 characters.\r\n"}, {"base": "Case", "params": ["RoiGeometryNames", "CreateNewRois", "ReferenceExaminationName", "TargetExaminationNames", "Transformations"], "method": "MapRoiGeometriesRigidly", "description": "MapRoiGeometriesRigidly(..)\r\n  Map ROI geometries according to selected transformation(s).\r\n  Parameters:\r\n    RoiGeometryNames - The names of the ROI geometries to map.\r\n    CreateNewRois - If true: for each RoiGeometry selected to \r\n      be mapped, a new ROI is created with geometries defined in \r\n      both the reference and the target image. The geometry in the \r\n      reference image is the same as the original and the geometry \r\n      in the target image is the mapped geometry. A suffix is added \r\n      to the ROI name.\r\n      If false: for each RoiGeometry selected a geometry is created \r\n      in the target image corresponding to the geometry mapped from \r\n      the reference image.\r\n      Default is false.\r\n    ReferenceExaminationName - The name of the image from \r\n      which the transformation(s) is defined.\r\n    TargetExaminationNames - The name(s) of the image(s) that \r\n      the deformation field(s) points to.\r\n    Transformations - The transformation(s) from the reference \r\n      image(s) to the target image(s).\r\n      Transformations are given in homogeneous coordinates, e.g., \r\n      the identity transform is \r\n      {'M11' : 1, 'M12': 0, 'M13': 0, 'M14': 0, \\\r\n      'M21' : 0, 'M22': 1, 'M23': 0, 'M24': 0, \\\r\n      'M31' : 0, 'M32': 0, 'M33': 1, 'M34': 0,\\\r\n      'M41' : 0, 'M42': 0, 'M43': 0, 'M44': 1}\r\n"}, {"base": "Case", "params": ["ExaminationName", "ExaminationGroupName", "ProjectionMethod"], "method": "Create4DCTProjection", "description": "Create4DCTProjection(..)\r\n  Creates a projection of a 4DCT using minimum-, maximum- or \r\n  average intensity projection.\r\n  Parameters:\r\n    ExaminationName - Name of the output examination.\r\n    ExaminationGroupName - Name of the input examination group.\r\n    ProjectionMethod - The projection method. Possible values:\r\n      * MaximumIntensity\r\n      * MinimumIntensity\r\n      * AverageIntensity\r\n"}, {"base": "Case", "params": ["FromExamination", "ToExamination", "Point"], "method": "TransformPointFromExaminationToExaminationUsingTotalTransform", "description": "TransformPointFromExaminationToExaminationUsingTotalTransform(..)\r\n  Transforms a point (in DICOM patient coordinate system) from \r\n  FromExamination to ToExamination using the total transform \r\n  (combining frame-of-reference registration with additional rigid \r\n  transform if such exists).\r\n  Parameters:\r\n    FromExamination - Name of FromExamination\r\n    ToExamination - Name of ToExamination\r\n    Point - Point to transform (in DICOM patient coordinate \r\n      system)\r\n  Returns:\r\n    Transformed point (in DICOM patient coordinate system). \r\n    Returns null if no transform exists.\r\n"}, {"base": "Case", "params": ["Name", "ExaminationName", "Description", "PlannedBy"], "method": "CreatePlanExploration", "description": "CreatePlanExploration(..)\r\n  Creates a new plan exploration.\r\n  Parameters:\r\n    Name - The name of the plan exploration.\r\n    ExaminationName - The name of the planning examination to \r\n      use for the plan exploration.\r\n    Description - A description of the plan exploration.\r\n    PlannedBy - Name of the planner of this exploration.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["Name", "ExaminationName", "MachineName", "Modality", "TreatmentTechnique", "*Conformal", "*SMLC", "*VMAT", "*DMLC", "*StaticArc", "*TomoHelical", "*ProtonPencilBeamScanning", "*LineScanning", "*UniformScanning", "*Wobbling", "*SingleScattering", "*DoubleScattering", "*ApplicatorAndCutout", "*CarbonPencilBeamScanning", "PatientPosition", "NumberOfFractions", "CreateSetupBeams", "UseLocalizationPointAsSetupIsocenter", "Comment", "RbeModelReference", "EnableDynamicTrackingForVero"], "method": "AddNewBeamSet", "description": "AddNewBeamSet(..)\r\n  Adds a new beam set.\r\n  Parameters:\r\n    Name - The name of the new beam set.\r\n    ExaminationName - The name of the examination on which the \r\n      beam set is defined.\r\n    MachineName - The name on the treatment machine. The \r\n      latest commissioned version og this machine will be used.\r\n    Modality - The treatment modality.\r\n      * Photons\r\n      * Protons\r\n      * Carbon\r\n      * Electrons\r\n    TreatmentTechnique - Treatment technique.\r\n      * Conformal                - Photons 3DCRT treatment technique.\r\n      * SMLC                     - Photons SMLC treatment technique.\r\n      * VMAT                     - Photons VMAT treatment technique\r\n      * DMLC                     - Photons DMLC.\r\n      * StaticArc                - Photons static arc.\r\n      * TomoHelical              - Photons tomo helical.\r\n      * ProtonPencilBeamScanning - Protons pencil beam scanning.\r\n      * LineScanning             - Protons line scanning.\r\n      * UniformScanning          - Protons uniform scanning.\r\n      * Wobbling                 - Protons wobbling scanning.\r\n      * SingleScattering         - Protons single scattering.\r\n      * DoubleScattering         - Protons double scattering.\r\n      * ApplicatorAndCutout      - Electrons applicator and cutout.\r\n      * CarbonPencilBeamScanning - Carbon pencil beam scanning.\r\n    PatientPosition - Specifies the position of the patient \r\n      relative to the treatment/image equipment space.\r\n      * HeadFirstProne\r\n      * HeadFirstSupine\r\n      * FeetFirstProne\r\n      * FeetFirstSupine\r\n      * HeadFirstDecubitusLeft\r\n      * HeadFirstDecubitusRight\r\n      * FeetFirstDecubitusLeft\r\n      * FeetFirstDecubitusRight\r\n    NumberOfFractions - The number of fractions in the new \r\n      beam set.\r\n    CreateSetupBeams - Whether setup beams shall be created in \r\n      this beam set.\r\n    UseLocalizationPointAsSetupIsocenter - True to use \r\n      localization point instead of isocenter from treatment beams \r\n      for the setup beams\r\n    Comment - The beam set comment\r\n    RbeModelReference - The RBE model to use for an ion \r\n      radiation set; or null if no RBE model is used\r\n    EnableDynamicTrackingForVero - Indicates if Dynamic \r\n      tracking for the Vero Linac is enabled or disabled\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["Filter"], "method": "QueryBeamSetInfo", "description": "QueryBeamSetInfo(..)\r\n  Returns info on all beam sets on a treatment plan.\r\n  Example:\r\n    To return info on all beam sets with the exact name \r\n    'BeamSet1' in a treatment plan:\r\n    info = treatmentPlan.QueryBeamSetInfo(Filter = {'Name': \r\n    '^BeamSet1$'}\r\n  Parameters:\r\n    Filter - Filter using regular expressions.  \r\n                  Possible keys:\r\n                     *Id\r\n                     *Name\r\n                     *ApprovalStatus\r\n                     *IsImmutable\r\n                     *IsClinical\r\n                     *HasDose\r\n                     *DoseAlgorithm\r\n                     *AlgorithmVersion\r\n  Returns:\r\n    List of beam set information.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["BeamSetNames"], "method": "SetBeamSetsToOptimizeSimultaneously", "description": "SetBeamSetsToOptimizeSimultaneously(..)\r\n  Sets beam sets to be optimized simultaneously\r\n  Parameters:\r\n    BeamSetNames - The name of the beam sets that should be \r\n      optimized simultaneously\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["Coordinate"], "method": "SetDefaultViewPosition", "description": "SetDefaultViewPosition(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Coordinate - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["DependentBeamSetName", "BackgroundBeamSetName", "DependencyUpdate"], "method": "UpdateDependency", "description": "UpdateDependency(..)\r\n  Changes the way a beam set depends on the other beam set. When a \r\n  beam set is set as dependent, the other beam set dose is used as \r\n  background dose.\r\n  Any prescriptions or optimization functions \r\n  defined on the dependent beam set will be removed.\r\n  Parameters:\r\n    DependentBeamSetName - The beam set that will be or is \r\n      dependent.\r\n    BackgroundBeamSetName - The beam set that will be the \r\n      background beam set.\r\n    DependencyUpdate - How dependency should be updated.\r\n      * CreateDependency\r\n      * RemoveDependency\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["TreatmentDelivery"], "method": "PreparePlanForDelivery", "description": "PreparePlanForDelivery(..)\r\n  Action for preparing a treatment plan for delivery. Will copy \r\n  fractions from planning treatment course to delivery.\r\n  Parameters:\r\n    TreatmentDelivery - The TreatmentDelivery object that will \r\n      be used for treatment delivery.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["RoiNamesAndMaterialNames", "OverwriteExisting"], "method": "SetDensityDistribution", "description": "SetDensityDistribution(..)\r\n  Action for setting a density distribution based on a set of rois \r\n  and corresponding materials. \r\n  At least the external roi needs to be included in the list.\r\n  Only overrides inside external are considered.\r\n  Parameters:\r\n    RoiNamesAndMaterialNames - Dictionary with ROIs and their \r\n      materials\r\n    OverwriteExisting - If the density disitribution is \r\n      already defined and has the same version number as current, it \r\n      can be overwritten by setting OverwriteExisting to true.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["AdaptedBeamSets", "NumberOfRemainingFractions", "MachineName", "CreateSetupBeams", "ClearBeamModifiers", "RemoveBeams", "NOTE"], "method": "AddBeamSetsToAdaptedPlan", "description": "AddBeamSetsToAdaptedPlan(..)\r\n  Action for adding beamsets to an adapted plan.\r\n  Prerequisite:\r\n    Can only be used on adapted plans with no beam set(s)\r\n              \r\n  Example:\r\n  # add new adapted plan from fraction 10 to a plan with one beam \r\n  set using planning image \"RESCAN\"\r\n  patient = get_current(\"Patient\")\r\n  case = get_current(\"Case\")\r\n  plan=get_current(\"Plan\")\r\n  beam_set=get_current(\"BeamSet\")\r\n  adapt_from_fx = 10\r\n  adapted_ct = \"RESCAN\"\r\n  tot_nr_fx = len([tf for tf in \r\n  plan.TreatmentCourse.TreatmentFractions])\r\n              \r\n  adapted_plan = case.AddNewAdaptivePlan(FractionNumber= \r\n  adapt_from_fx, AdaptToPlanName= plan.Name, \r\n  UseTreatmentDeliveryAsSource= True,\r\n  PlanName= \"Adapted plan\", PlannedBy= None, Comment= \"\", \r\n  ExaminationName= adapted_ct, AllowDuplicateNames= False)\r\n  treatment_technique = beam_set.GetTreatmentTechniqueType()\r\n              \r\n  beam_set_settings = {'NumberOfRemainingFractions': tot_nr_fx - \r\n  adapt_from_fx, 'MachineName': \r\n  beam_set.MachineReference.MachineName, \r\n  'CreateSetupBeams': true, 'DicomPlanLabelOfOriginalBeamSet': \r\n  beam_set.DicomPlanLabel, 'ClearBeamModifiers': false, \r\n  'RemoveBeams': false, 'TreatmentTechnique': treatment_technique}\r\n  adapted_plan.AddBeamSetsToAdaptedPlan(AdaptedBeamSets=[beam_set_settings])\r\n  \r\n  adapted_beam_set = adapted_plan.BeamSets[0]\r\n  prescription = beam_set.Prescription.PrimaryDosePrescription\r\n  adapted_beam_set.AddDosePrescriptionToRoi(\r\n  RoiName=prescription.OnStructure.Name,\r\n  DoseVolume=prescription.DoseVolume,\r\n  PrescriptionType=prescription.PrescriptionType,\r\n  DoseValue=prescription.DoseValue,\r\n  RelativePrescriptionLevel=prescription.RelativePrescriptionLevel,\r\n  AutoScaleDose=False)\r\n  Parameters:\r\n    AdaptedBeamSets - List of AdaptedBeamSetSettings\r\n      Settings is stored as a dictionary on form \r\n      \"NumberOfRemainingFractions\", \"MachineName\",\r\n      \"CreateSetupBeams\", \"DicomPlanLabelOfOriginalBeamSet\",\r\n      \"ClearBeamModifiers\", \"RemoveBeams\", \"TreatmentTechnique\"\r\n                  \r\n      NumberOfRemainingFractions - Number of remaining fractions.\r\n      MachineName - Name of the machine. The last commissioned \r\n      machine in the database will be used.\r\n      CreateSetupBeams - Set to true if setupbeams shall be created.\r\n      ClearBeamModifiers - Set to true if beam contents shall be \r\n      cleared.\r\n      RemoveBeams - Set to true if all beams should be removed.\r\n      NOTE - If both RemoveBeams and ClearBeamModifiers are true, \r\n      beams will be removed. If both are false nothing will be done.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["AdaptToRadiationSet", "RemoveBeams", "ClearBeamModifiers", "Name", "ExaminationName", "MachineName", "Modality", "TreatmentTechnique", "*Conformal", "*SMLC", "*VMAT", "*DMLC", "*StaticArc", "*TomoHelical", "*ProtonPencilBeamScanning", "*LineScanning", "*UniformScanning", "*Wobbling", "*SingleScattering", "*DoubleScattering", "*ApplicatorAndCutout", "*CarbonPencilBeamScanning", "PatientPosition", "NumberOfFractions", "CreateSetupBeams", "UseLocalizationPointAsSetupIsocenter", "Comment", "RbeModelReference", "EnableDynamicTrackingForVero"], "method": "AddNewAdaptedBeamSet", "description": "AddNewAdaptedBeamSet(..)\r\n  Composite action for adding\r\n  Parameters:\r\n    AdaptToRadiationSet - Radiation set to adapt to.\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n    Name - The name of the new beam set.\r\n    ExaminationName - The name of the examination on which the \r\n      beam set is defined.\r\n    MachineName - The name on the treatment machine. The \r\n      latest commissioned version og this machine will be used.\r\n    Modality - The treatment modality.\r\n      * Photons\r\n      * Protons\r\n      * Carbon\r\n      * Electrons\r\n    TreatmentTechnique - Treatment technique.\r\n      * Conformal                - Photons 3DCRT treatment technique.\r\n      * SMLC                     - Photons SMLC treatment technique.\r\n      * VMAT                     - Photons VMAT treatment technique\r\n      * DMLC                     - Photons DMLC.\r\n      * StaticArc                - Photons static arc.\r\n      * TomoHelical              - Photons tomo helical.\r\n      * ProtonPencilBeamScanning - Protons pencil beam scanning.\r\n      * LineScanning             - Protons line scanning.\r\n      * UniformScanning          - Protons uniform scanning.\r\n      * Wobbling                 - Protons wobbling scanning.\r\n      * SingleScattering         - Protons single scattering.\r\n      * DoubleScattering         - Protons double scattering.\r\n      * ApplicatorAndCutout      - Electrons applicator and cutout.\r\n      * CarbonPencilBeamScanning - Carbon pencil beam scanning.\r\n    PatientPosition - Specifies the position of the patient \r\n      relative to the treatment/image equipment space.\r\n      * HeadFirstProne\r\n      * HeadFirstSupine\r\n      * FeetFirstProne\r\n      * FeetFirstSupine\r\n      * HeadFirstDecubitusLeft\r\n      * HeadFirstDecubitusRight\r\n      * FeetFirstDecubitusLeft\r\n      * FeetFirstDecubitusRight\r\n    NumberOfFractions - The number of fractions in the new \r\n      beam set.\r\n    CreateSetupBeams - Whether setup beams shall be created in \r\n      this beam set.\r\n    UseLocalizationPointAsSetupIsocenter - True to use \r\n      localization point instead of isocenter from treatment beams \r\n      for the setup beams\r\n    Comment - The beam set comment\r\n    RbeModelReference - The RBE model to use for an ion \r\n      radiation set; or null if no RBE model is used\r\n    EnableDynamicTrackingForVero - Indicates if Dynamic \r\n      tracking for the Vero Linac is enabled or disabled\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["Coordinates"], "method": "SetReportViewPositions", "description": "SetReportViewPositions(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource", "params": ["FractionNumbers", "ExaminationNames", "StructureRegistrationNames"], "method": "ComputeDeliveryDoseWithDeformation", "description": "ComputeDeliveryDoseWithDeformation(..)\r\n  Action used to compute delivery dose and do optional deformation \r\n  of that dose\r\n  Parameters:\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames and\r\n      StructureRegistrationNames properties. This property must \r\n      contain at least one item.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers and StructureRegistrationNames\r\n      properties.\r\n    StructureRegistrationNames - The names of the provided \r\n      structure registrations. If an item in the list is empty, the \r\n      dose will\r\n      not be deformed. The number of items in this list must equal \r\n      the number of items in the\r\n      FractionNumbers and ExaminationNames properties.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.TotalDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.EvaluationSetup", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["FunctionToRemove"], "method": "DeleteClinicalGoal", "description": "DeleteClinicalGoal(..)\r\n  Deletes a clinical goal.\r\n  Parameters:\r\n    FunctionToRemove - The clinical goal that shall be removed.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["Template"], "method": "ApplyClinicalGoalTemplate", "description": "ApplyClinicalGoalTemplate(..)\r\n  Copies clinical goals from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["RoiName", "GoalCriteria", "GoalType", "AcceptanceLevel", "ParameterValue", "IsComparativeGoal", "Priority"], "method": "AddClinicalGoal", "description": "AddClinicalGoal(..)\r\n  Adds a clinical goal to an evaluation setup\r\n  Parameters:\r\n    RoiName - The name of the ROI or POI the planning goal \r\n      shall be evaluated on.\r\n    GoalCriteria - The planning goal criteria. Specifies the \r\n      region for pass and fail.\r\n      * AtLeast: At least criteria.\r\n      * AtMost: At most criteria.\r\n    GoalType - The planning goal type. \r\n      * AverageDose: For comparison with the average dose.\r\n      * VolumeAtDose: For comparison of the volume at a specified \r\n      dose.\r\n      * DoseAtVolume: For comparison of the dose at a specified \r\n      volume.\r\n      * DoseAtPoint: For comparison with the dose at a certain point.\r\n      * AbsoluteVolumeAtDose: For comparison of the absolute volume \r\n      at a specified dose.\r\n      * DoseAtAbsoluteVolume: For comparison of the dose at a \r\n      specified absolute volume.\r\n    AcceptanceLevel - The acceptance level. Sets the level for \r\n      pass or fail.\r\n    ParameterValue - The parameter value. Goal type specific \r\n      parameter.\r\n    IsComparativeGoal - Determines if the goal is used as a \r\n      comparative goal.\r\n    Priority - The priority of the clinical goal.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].TreatmentCourseSource.BiologyEvaluation", "params": ["FunctionToCopy"], "method": "CopyClinicalGoal", "description": "CopyClinicalGoal(..)\r\n  Copy of a clinical goal.\r\n  Parameters:\r\n    FunctionToCopy - The clinical goal that shall be copied.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].Objective.ConstituentFunctions.[].OfDoseDistribution", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[]", "params": ["FunctionType", "DoseBasedRoiFunction", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "EditOptimizationFunction", "description": "EditOptimizationFunction(..)\r\n  Edits an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    DoseBasedRoiFunction - The objective constituent or a \r\n      constraint that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[]", "params": ["CompositeParameters", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "AddResearchOptimizationFunction", "description": "AddResearchOptimizationFunction(..)\r\n  Creates and adds a research objective constituent.\r\n  Parameters:\r\n    CompositeParameters - String that holds parameters for a \r\n      composite research function.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[]", "params": ["FunctionType", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddOptimizationFunction", "description": "AddOptimizationFunction(..)\r\n  Creates and adds an objective constituent or a constraint.\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MinDose\r\n      * MaxDose\r\n      * MinDvh \r\n      * MaxDvh\r\n      * UniformDose \r\n      * MinEud \r\n      * MaxEud\r\n      * TargetEud\r\n      * DoseFallOff\r\n      * UniformityConstraint\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[]", "params": ["Function", "RoiName", "Parameters", "Weight", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "RestrictToBeamSet", "UseRbeDose"], "method": "EditResearchOptimizationFunction", "description": "EditResearchOptimizationFunction(..)\r\n  Edits a research objective constituent.\r\n  Parameters:\r\n    Function - The objective constituent that should be edited.\r\n    RoiName - Name of the function dependent ROI.\r\n    Parameters - String holding the parameters of the research \r\n      function.\r\n      The first word must be the name of the research function.\r\n    Weight - The weight of the objective function.\r\n      Not used if the function is a constraint.\r\n    IsConstraint - True if the function is a constraint, false \r\n      otherwise.\r\n    RestrictAllBeamsIndividually - Restricts the function to \r\n      all beams individually. Default is false.\r\n    RestrictToBeam - Restricts the function to the beam with \r\n      the given name.\r\n      Null means no restriction. Default is null.\r\n    RestrictToBeamSet - Restricts the function to the beam set \r\n      with the given name.\r\n      Null means that the function operates on the plan dose. \r\n      Default is null.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[]", "params": ["Template"], "method": "ApplyOptimizationTemplate", "description": "ApplyOptimizationTemplate(..)\r\n  Copies optimization functions from a template.\r\n  Parameters:\r\n    Template - The template that contains the functions. \r\n      Functions corresponding to ROIs/POIs\r\n      that are not contained in the patient model will not be added.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[]", "params": ["FunctionType", "ReferenceDoseDistribution", "RoiName", "IsConstraint", "RestrictAllBeamsIndividually", "RestrictToBeam", "IsRobust", "RestrictToBeamSet", "UseRbeDose"], "method": "AddReferenceOptimizationFunction", "description": "AddReferenceOptimizationFunction(..)\r\n  Creates and adds a reference optimization function\r\n  Parameters:\r\n    FunctionType - The function type.\r\n      * MaxRefDose\r\n      * MaxRefDvh\r\n      * MinRefDose\r\n      * MinRefDvh\r\n      * RefDoseFallOff\r\n    ReferenceDoseDistribution - The reference dose distribution.\r\n    RoiName - Name of the function dependent ROI.\r\n    IsConstraint - Whether the function is to be a constraint \r\n      or an objective.\r\n    RestrictAllBeamsIndividually - If the restriction is to be \r\n      applied to all beams individually. Only used for Protons or \r\n      physical Carbon dose.\r\n    RestrictToBeam - Name of the beam when restricting dose \r\n      dependencies to a single beam.\r\n      Null means no restriction. Only used for Protons or physical \r\n      Carbon dose.\r\n    IsRobust - Whether the worst-case robustness should be \r\n      used (requieres parameters in robustness settings).\r\n    RestrictToBeamSet - Whether the function should refer to \r\n      total dose or beam set dose.\r\n    UseRbeDose - True if the function should target RBE dose; \r\n      false if it should target physical dose.\r\n      Not used for modalities not using RBE dose (i.e. Photons, \r\n      Electrons and Protons).\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[]", "params": ["UseVoxelBasedMimickingForTargets", "UseVoxelBasedMimickingForOrgansAtRisk", "OrgansAtRiskToImprove", "TargetsToMaintain", "OrgansAtRiskToMaintain"], "method": "RunReduceOARDoseOptimization", "description": "RunReduceOARDoseOptimization(..)\r\n  Runs a reduce organ-at-risk optimization.\r\n  Auto-generated reference dose functions are used to reduce the \r\n  dose in \r\n  the organs-at-risk regions while maintaining dose homogeneity in \r\n  the target regions.\r\n  Parameters:\r\n    UseVoxelBasedMimickingForTargets - Indicates if voxel \r\n      based mimicking constraints should be used for target ROIs.\r\n      If false, DVH based mimicking constraints is used for target \r\n      ROIs.\r\n      Default is false.\r\n    UseVoxelBasedMimickingForOrgansAtRisk - Indicates if \r\n      voxel-based mimicking constraints should be used for \r\n      organ-at-risk ROIs.\r\n      If false, DVH-based mimicking constraints is used for \r\n      organ-at-risk ROIs.\r\n      Default is false.\r\n    OrgansAtRiskToImprove - Names of the ROIs that should be \r\n      considered as objectives in the optimization problem.\r\n      Must be a subset of OrgansAtRiskToMaintain.\r\n      Default is ROIs defined in OrgansAtRiskToMaintain.\r\n    TargetsToMaintain - Names of the ROIs that should be \r\n      considered as target ROIs in the optimization problem.\r\n      The optimization uses mimicking constraints to maintain the \r\n      uniformity of the dose for these ROIs.\r\n      Must be disjoint with OrgansAtRiskToMaintain.\r\n      Default is all ROIs with target optimization functions in the \r\n      original optimization problem.\r\n    OrgansAtRiskToMaintain - Names of the ROIs that should be \r\n      considered as organs-at-risk in the optimization problem.\r\n      The optimization uses mimicking constraints to avoid \r\n      increasing the dose for these ROIs.\r\n      Must be disjoint with TargetsToMaintain.\r\n      Default is all ROIs without target optimization functions in \r\n      the original optimization problem.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].OptimizationParameters.TreatmentSetupSettings.[].BeamSettings.[]", "params": ["OptimizationTypes", "SelectCollimatorAngle", "AllowBeamSplit", "JawMotion", "LeftJaw", "RightJaw", "TopJaw", "BottomJaw"], "method": "EditBeamOptimizationSettings", "description": "EditBeamOptimizationSettings(..)\r\n  Edits the beam optimization settings for selected beam\r\n  Parameters:\r\n    OptimizationTypes - Enumerator describing how a beam may \r\n      be optimized.\r\n      That is, in which manner the optimization should be performed.\r\n      The enumerator array is a combination of different allowed \r\n      optimizations.\r\n    SelectCollimatorAngle - If true, select collimator angle \r\n      at sequencing.\r\n    AllowBeamSplit - Indicates if a beam split should be \r\n      attempted when the field is to wide for current machine \r\n      contraints.\r\n    JawMotion - Can be any of the following strings:\r\n      \"Fixed\"\r\n      \"Automatic\"\r\n      \"Lock to limits\"\r\n      \"Use limits as max\"\r\n    LeftJaw - Left jaw [X1].\r\n    RightJaw - Right jaw [X2].\r\n    TopJaw - Top jaw [Y1].\r\n    BottomJaw - Bottom jaw [Y2].\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].OptimizationParameters.TreatmentSetupSettings.[].BeamSettings.[].ArcConversionPropertiesPerBeam", "params": ["ConformalArcStyle", "CreateDualArcs", "FinalGantrySpacing", "MaxArcDeliveryTime", "BurstGantrySpacing", "MaxArcMU"], "method": "EditArcBasedBeamOptimizationSettings", "description": "EditArcBasedBeamOptimizationSettings(..)\r\n  Edit the arc based beam optimization settings for selected beam\r\n  Parameters:\r\n    ConformalArcStyle - If true the VMAT beam is converted \r\n      using conformal style based on target projections from all \r\n      directions.\r\n    CreateDualArcs - True if dual arcs shall be used.\r\n    FinalGantrySpacing - The distance between the gantry \r\n      angles of two neighboring segments (control points) [deg].\r\n    MaxArcDeliveryTime - The maximum delivery time for the arc \r\n      beam [s].\r\n    BurstGantrySpacing - The gantry distance for which the \r\n      beam is on using a machine in burst mode (Beam on interval).\r\n      Otherwise for a machine NOT in burst mode; not applicable (set \r\n      this property to null to indicate that)\r\n      [deg].\r\n    MaxArcMU - The maximum total MU for the arc beam.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].OptimizationParameters", "params": ["PositionUncertaintyAnterior", "PositionUncertaintyPosterior", "PositionUncertaintySuperior", "PositionUncertaintyInferior", "PositionUncertaintyLeft", "PositionUncertaintyRight", "DensityUncertainty", "IndependentBeams", "ComputeExactScenarioDoses", "NamesOfNonPlanningExaminations"], "method": "SaveRobustnessParameters", "description": "SaveRobustnessParameters(..)\r\n  Saves robustness parameters.\r\n  Parameters:\r\n    PositionUncertaintyAnterior - The \r\n      PositionUncertaintyAnterior that shall be copied.\r\n    PositionUncertaintyPosterior - The \r\n      PositionUncertaintyPosterior that shall be copied.\r\n    PositionUncertaintySuperior - The \r\n      PositionUncertaintySuperior that shall be copied.\r\n    PositionUncertaintyInferior - The \r\n      PositionUncertaintyInferior that shall be copied.\r\n    PositionUncertaintyLeft - The PositionUncertaintyLeft that \r\n      shall be copied.\r\n    PositionUncertaintyRight - The PositionUncertaintyRight \r\n      that shall be copied.\r\n    DensityUncertainty - The DensityUncertainty that shall be \r\n      copied.\r\n    IndependentBeams - The IndependentBeams that shall be \r\n      copied.\r\n    ComputeExactScenarioDoses - The ComputeExactScenarioDoses \r\n      that shall be copied.\r\n    NamesOfNonPlanningExaminations - Examinations that shall \r\n      be considered, disregarding the planning examination.\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Case.TreatmentPlans.[].PlanOptimizations.[].AutoScaleManagers.[].PrescriptionDoseGridRoiSource.OfRoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["BeamSetNames"], "method": "UnsetBeamSetsToOptimizeSimultaneously", "description": "UnsetBeamSetsToOptimizeSimultaneously(..)\r\n  Sets beam sets that were set to be optimized simultaneously to \r\n  be optimized separately\r\n  Parameters:\r\n    BeamSetNames - The name of the beam sets sat should be \r\n      optimized separately\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Name", "Type", "Transmission"], "method": "SetPhotonBlock", "description": "SetPhotonBlock(..)\r\n  Sets a block on this photon beam. Returns the beam.\r\n  Parameters:\r\n    Name - Name of the block.\r\n    Type - Type of the block\r\n    Transmission - Block transmission\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Isocenter", "params": ["Name", "Color", "Position"], "method": "EditIsocenter", "description": "EditIsocenter(..)\r\n  Edits any or all of the following isocenter parameters for the \r\n  beam.\r\n              \r\n  Examples: \r\n  Edit only the name:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New iso\")\r\n  Edit the name, color and position:\r\n    beam_set.Beams[0].Isocenter.EditIsocenter(Name=\"New Name\", \r\n  Color=\"Red\", Isocenter={'x':0, 'y':0, 'z':7} )\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n    Color - Color of the isocenter\r\n    Position - Position of the isocenter\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["ID", "Transmission"], "method": "SetBlockTray", "description": "SetBlockTray(..)\r\n  Sets a block tray on this photon beam. Returns the beam.\r\n  Parameters:\r\n    ID - Id of the block tray\r\n    Transmission - Transmission of the block tray\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[].Boli.[]", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].Beams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["FractionNumber", "SegmentWeightsPerExamination"], "method": "DeliverPlanOnMultipleImageSets", "description": "DeliverPlanOnMultipleImageSets(..)\r\n  Computes dose on multiple examinations, using selected beams and \r\n  segments for each examination.\r\n  (Only PBS (clinical), SMLC and VMAT (non-clinical) supported so \r\n  far.)\r\n  Parameters:\r\n    FractionNumber - The number of the fraction for which the \r\n      dose is to be computed. Default is 0.\r\n    SegmentWeightsPerExamination - A dictionary of what \r\n      segments and beams should be computed on which examinations.\r\n      First the examination is given, then the beam name, and \r\n      finally the segment number and the corresponding weight for \r\n      that examination.\r\n      Example: SegmentWeightsPerExamination = { 'CT 1' : { 'Beam 1' \r\n      : { '0' : 0.5, '2': 0.2 } }, 'CT 2' : { 'Beam 1' : { '0': 0.5, \r\n      '1': 1, '2': 0.8 } } }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ResetSetupBeams", "SetupBeamsGantryAngles"], "method": "UpdateSetupBeams", "description": "UpdateSetupBeams(..)\r\n  Updates setup beams\r\n  Parameters:\r\n    ResetSetupBeams - If true all existing setup beams will be \r\n      unconditionally removed and replaced with default beams.\r\n    SetupBeamsGantryAngles - If set, a setup beam is created \r\n      for each gantry angle in the list\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ShowProgress"], "method": "TreatAndProtect", "description": "TreatAndProtect(..)\r\n  Generate MLC or block aperture from treat and protect settings.\r\n  Treat and protect ROI:s, margins etc are set in RayStation.\r\n  Parameters:\r\n    ShowProgress - Indicates if progress should be shown.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["TreatmentMachineName"], "method": "MachineFeasibilityTest", "description": "MachineFeasibilityTest(..)\r\n  Returns string with information regarding if machine can be \r\n  changed to 'TreatmentMachineName'. The string is empty if the \r\n  change is feasible.\r\n  Parameters:\r\n    TreatmentMachineName - Name of treatment machine\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Technique"], "method": "SetTreatmentTechnique", "description": "SetTreatmentTechnique(..)\r\n  Sets treatment technique for a beam set.\r\n  Parameters:\r\n    Technique - Treatment technique type.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RemoveBeams", "ClearBeamModifiers"], "method": "ClearBeams", "description": "ClearBeams(..)\r\n  Removes all beams or clear the contents of all beams of a beam \r\n  set.\r\n  Parameters:\r\n    RemoveBeams - Set to true if all beams should be removed.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is true.\r\n    ClearBeamModifiers - Set to true if beam contents should \r\n      be cleared.\r\n      If both RemoveBeams and ClearBeamModifiers are true,\r\n      beams will be removed. If both are false, nothing will be done.\r\n      Default is false.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].BoliRoiGeometries.[]", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName"], "method": "GetDoseGridRoi", "description": "GetDoseGridRoi(..)\r\n  Gets the dose grid representation of a specific ROI for the dose \r\n  grid of the dose distribution.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n  Returns:\r\n    The dose grid representation of the ROI.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "RelativeVolumes"], "method": "GetDoseAtRelativeVolumes", "description": "GetDoseAtRelativeVolumes(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    RelativeVolumes - The relative volumes.\r\n  Returns:\r\n    The dose at the relative volumes.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseType"], "method": "GetDoseStatistic", "description": "GetDoseStatistic(..)\r\n  Method for retrieving dose statistics\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseType - The dose statistic type, \"Average\", \"Min\" or \r\n      \"Max\".\r\n  Returns:\r\n    The dose statistic.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["DoseGrid"], "method": "GetTransformedAndResampledDoseValues", "description": "GetTransformedAndResampledDoseValues(..)\r\n  Resamples the dose distribution to the given dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid on which the dose shall be \r\n      resampled.\r\n  Returns:\r\n    An array containing the resampled dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Points"], "method": "InterpolateDoseInPoints", "description": "InterpolateDoseInPoints(..)\r\n  Returns an array of interpolated dose values in the given array \r\n  of points.\r\n  Parameters:\r\n    Points - The list of coordinates of the points in which \r\n      the dose is interpolated. The point's coordinates are given in \r\n      the DICOM coordinate system.\r\n  Returns:\r\n    An array of interpolated point doses.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["PlanNames", "Weights"], "method": "SetWeightedDose", "description": "SetWeightedDose(..)\r\n  Sets the dose to a weighted sum of the \r\n  fraction doses of the beam sets for a number of plans.\r\n  If the dose distribution is a fraction dose, the plan dose is \r\n  updated accordingly.\r\n  An exception is thrown if the dose distribution is a composite \r\n  dose, if the PlanNames array \r\n  is longer than the Weights array, if the PlanNames array contains \r\n  a name that does not \r\n  match any plan name for the current patient, if any of the plans \r\n  in the PlanNames array \r\n  contains no beam set or more than one beam set or if any of the \r\n  plans in the PlanNames array \r\n  does not have a computed fraction dose.\r\n  Parameters:\r\n    PlanNames - A list of the names of the plans whose \r\n      fraction doses will be used for the dose sum.\r\n    Weights - A list of the weights of the fraction doses.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["Representation"], "method": "SetRepresentation", "description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "method": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings", "description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry", "params": ["MetaFileName", "AsExamination"], "method": "ExportRoiGeometryAsMetaImage", "description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[].OnDensity.DensityOverrides.[].RoiGeometry.OfRoi", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Point"], "method": "InterpolateDoseInPoint", "description": "InterpolateDoseInPoint(..)\r\n  Returns interpolated dosevalue in point.\r\n  Parameters:\r\n    Point - The coordinates of the point in which the dose is \r\n      interpolated. The point's coordinates are given in the DICOM \r\n      coordinate system.\r\n  Returns:\r\n    The interpolated point dose.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose.BeamDoses.[]", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["Array", "CalculationInfo"], "method": "SetDoseValues", "description": "SetDoseValues(..)\r\n  Sets an array of dose data to a dose distribution. The length of \r\n  the array must match the number of voxels in the dose grid. The \r\n  elements are \r\n  iterated in X first, then Y and Z. If the dose is a fraction dose \r\n  from a BeamSet that belongs to a plan then the total dose of the \r\n  plan is automatically updated.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    Array - 1-dimensional flattened array.\r\n    CalculationInfo - Text information of the dose calculation.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionDose", "params": ["RoiName", "DoseValues"], "method": "GetRelativeVolumeAtDoseValues", "description": "GetRelativeVolumeAtDoseValues(..)\r\n  Method for retrieving DVH points.\r\n  Parameters:\r\n    RoiName - The name of the ROI.\r\n    DoseValues - The dose values in cGy.\r\n  Returns:\r\n    The relative volumes at the dose values.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Orientations", "Points", "FocusOnIsocenter", "ImageSize", "FocusOnRoi"], "method": "GetDoseImages", "description": "GetDoseImages(..)\r\n  Method for retrieving dose view images.\r\n  Parameters:\r\n    Orientations - Strings which indicate orientations, \r\n      transversal, coronal or sagittal (not case sensitive).\r\n    Points - Points in the patient coordinate system which \r\n      will be the centers of the views. Must be as many as the \r\n      Orientations.\r\n    FocusOnIsocenter - Indicates if the image is centered on \r\n      the isocenter.\r\n    ImageSize - The image size in nr of pixels. The \r\n      X-coordinate represents the width of the image [nr of pixels]. \r\n      The Y-coordinate represents the height of the image [nr of \r\n      pixels].\r\n    FocusOnRoi - The name of a ROI that will be in focus when \r\n      setting camera view.\r\n  Returns:\r\n    A dictionary mapping points to file names. Orientations are \r\n    in the order they were produced.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name"], "method": "DeleteDoseSpecificationPoint", "description": "DeleteDoseSpecificationPoint(..)\r\n  Action that deletes a dose specification point.\r\n  Parameters:\r\n    Name - Name of the dose specification point to delete.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePhotonBeam", "description": "CreatePhotonBeam(..)\r\n  Creates and adds a a photon beam.\r\n  Parameters:\r\n    Energy - Energy of the beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ComputeBeamDoses", "DoseAlgorithm", "ForceRecompute"], "method": "ComputeDose", "description": "ComputeDose(..)\r\n  Compute dose on a beam set.\r\n  Parameters:\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n    DoseAlgorithm - * CCDose: Clinical dose engine for photons \r\n      based on a collapsed-cone dose algorithm. Used for final dose \r\n      computations of all photon delivery techniques.\r\n      * ElectronMonteCarlo: Clinical dose engine for electrons based \r\n      on a Monte Carlo dose algorithm. Used for final dose \r\n      computations of electron plans.\r\n      * IonMonteCarlo: Clinical dose engine for protons based on an \r\n      ion Monte Carlo dose algorithm. Used for final dose \r\n      computations of PBS plans.\r\n      * SpotWeightPencilBeam: Clinical dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for optimization and \r\n      final dose computations of PBS plans.\r\n      * IonPencilBeam: Clinical dose engine for protons based on a \r\n      pencil beam dose algorithm. Used for final dose computations \r\n      of US/DS/Wobbling plans.\r\n      * CarbonPencilBeam: Clinical dose engine for carbon ions based \r\n      on a pencil beam dose algorithm. In the presence of an RBE \r\n      model, both physical and RBE weighted dose are computed. Used \r\n      for optimization and final dose computations of PBS plans.\r\n      * SpotWeightPencilBeamFast: Approximate dose engine for \r\n      protons based on a pencil beam dose algorithm. Used for fast, \r\n      approximate dose computations in the optimization of PBS plans.\r\n      * IonPencilBeamFast: Approximate dose engine for protons based \r\n      on a pencil beam dose algorithm. Used for fast, approximate \r\n      dose computations of US/DS/Wobbling plans.\r\n    ForceRecompute - Set to true to force recomputation of \r\n      dose even if a current dose with the same dose engine already \r\n      exists. Default is false.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["templateFileName", "filename", "ignoreWarnings"], "method": "CreateReportFromTemplateFile", "description": "CreateReportFromTemplateFile(..)\r\n  Create treatment plan report from template file\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReportFromTemplateFile(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateFileName - template file name (full path)\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.FractionationPattern", "params": ["ScheduleString", "NumberOfFractionsPerDay"], "method": "EditDefaultPattern", "description": "EditDefaultPattern(..)\r\n  Edit the default pattern of the fractionation pattern.\r\n  The start schedule is specified using a string of 1's and 0's, \r\n  where a 1 represents a fraction to be delivered and a 0 represents \r\n  a skipped fraction, \r\n  and a number that specifies the number of fractions per day in the \r\n  schedule.\r\n  Example:\r\n    Set a default pattern where two fractions are delivered \r\n    every weekday the first week and no fractions are delivered the \r\n    second week.\r\n    fractionationPattern.EditDefaultPattern(ScheduleString='1111111111000000000000000000', NumberOfFractionsPerDay=2)\r\n  Parameters:\r\n    ScheduleString - The schedule string. Must be a multiple \r\n      of 7 and the number of fractions per day.\r\n    NumberOfFractionsPerDay - The number of fractions per day \r\n      in the schedule string.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamSetToCopyFrom", "BeamsToCopy"], "method": "CopyBeamsFromBeamSet", "description": "CopyBeamsFromBeamSet(..)\r\n  Makes beam copies from selected beam set and attaches them to \r\n  the context.\r\n  Parameters:\r\n    BeamSetToCopyFrom - The beam set where the beams are \r\n      copied from.\r\n    BeamsToCopy - Name of beams to copy. If no beams are \r\n      defined, all beams will be copied.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "ReadOnlyPathChecking", "description": "ReadOnlyPathChecking(..)\r\n  Execute a read-only collision check with the IDCAS path checking \r\n  module. Can only be used for approved beam sets and the collision \r\n  result is not saved to the beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ArcStopGantryAngle", "ArcRotationDirection", "Energy", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateArcBeam", "description": "CreateArcBeam(..)\r\n  Creates and adds a beam of VMAT type.\r\n  Parameters:\r\n    ArcStopGantryAngle - Angle unit and direction follow IEC.\r\n    ArcRotationDirection - Rotation direction of the gantry.\r\n      * Clockwise\r\n      * CounterClockwise\r\n    Energy - Energy for this beam (MV).\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseVolume", "PrescriptionType", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToRoi", "description": "AddDosePrescriptionToRoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    RoiName - Name of the roi the prescription will be defined \r\n      on.\r\n    DoseVolume - The relative volume that should recieve at \r\n      least the prescribed dose (percentage). Only applicable for \r\n      prescription type DoseAtVolume.\r\n    PrescriptionType - Available prescription types are:\r\n      * AverageDose: The average dose of the structure volume shall \r\n      receive the prescribed dose.\r\n      * DoseAtVolume: A percentage of the structure volume, set in \r\n      DoseVolume, shall recieve the prescribed dose.\r\n      * MedianDose: 50% of the structure volume shall receive the \r\n      prescribed dose.\r\n      * NearMaximumDose: 2% of the structure volume shall receive \r\n      the prescribed dose.\r\n      * NearMinimumDose: 98% of the structure volume shall receive \r\n      the prescribed dose.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name"], "method": "GetIsocenterData", "description": "GetIsocenterData(..)\r\n  Returns IsocenterData for an existing isocenter.\r\n  Parameters:\r\n    Name - Name of isocenter.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "method": "MultiSpectralThreshold", "description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "SetAlgebraExpression", "description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "ThresholdLevel"], "method": "CreateExternalGeometry", "description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Examination", "Center", "VoxelSize"], "method": "CreateSphereGeometry", "description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "MarginSettings"], "method": "SetMarginExpression", "description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "CustomStatistics", "CustomSettings"], "method": "AdaptMbsMesh", "description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Size", "Examination", "Center", "VoxelSize"], "method": "CreateBoxGeometry", "description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm"], "method": "UpdateDerivedGeometry", "description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Material"], "method": "SetRoiMaterial", "description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "method": "CreateDirectionalMarginGeometry", "description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ExaminationName"], "method": "CreateFieldOfViewROI", "description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "method": "GrayLevelThreshold", "description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "method": "VolumeThreshold", "description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "method": "CreateControllingRoiGeometry", "description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "method": "CreateExternalGeometries", "description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "method": "CreateAlgebraGeometry", "description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "TransformationMatrix"], "method": "TransformROI3D", "description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "SetWallExpression", "description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "method": "CreateCylinderGeometry", "description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "method": "CreateITV", "description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "MarginSettings"], "method": "CreateMarginGeometry", "description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.Prescription.DosePrescriptions.[].OnStructure", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "method": "CreateWallGeometry", "description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NameOfTemplate"], "method": "SetArcTrajectoryFromTemplate", "description": "SetArcTrajectoryFromTemplate(..)\r\n  Sets the arc trajectory on a beam from a template.\r\n  Example:\r\n    \r\n  beam_set.Beams[0].SetArcTrajectoryFromTemplate(NameOfTemplate=\"L5 \r\n  lung\")\r\n  Parameters:\r\n    NameOfTemplate - Name of Wave Arc Template to set to beam.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["X1", "X2", "Y1", "Y2"], "method": "SetInitialJawPositions", "description": "SetInitialJawPositions(..)\r\n  Sets initial jaw positions to the beam.\r\n  Parameters:\r\n    X1 - X1 - Left jaw.\r\n    X2 - X2 - Right jaw.\r\n    Y1 - Y1 - Top jaw.\r\n    Y2 - Y2 - Bottom jaw.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["BolusName"], "method": "SetBolus", "description": "SetBolus(..)\r\n  Sets the bolus with name BolusName on this photon beam. Returns \r\n  the beam.\r\n  Parameters:\r\n    BolusName - Name of the bolus.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetDoseSpecificationPoint", "description": "SetDoseSpecificationPoint(..)\r\n  Select a dose specification point for this beam.\r\n  Parameters:\r\n    Name - The name of an existing dose specification point, \r\n      or \"Isocenter\" to use isocenter.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Width", "Height", "CenterCoordinate", "MoveMLC", "MoveAllMLCLeaves", "MoveJaw", "JawMargins", "DeleteWedge", "PreventExtraLeafPairFromOpening"], "method": "CreateRectangularField", "description": "CreateRectangularField(..)\r\n  Creates rectangular field.\r\n  Parameters:\r\n    Width - The width of the rectangular field in cm. Default \r\n      value is 1.0.\r\n    Height - The height of the rectangular field in cm. \r\n      Default value is 1.0.\r\n    CenterCoordinate - The center point of the rectangular \r\n      field in the beam coordinate system. \r\n      Default value is { 'x': 0, 'y': 0 }.\r\n    MoveMLC - Indicates if the field should be collimated by \r\n      the MLC. Default value is true.\r\n    MoveAllMLCLeaves - Indicates if all leafs should be moved \r\n      when adjusting MLC. Default value is false.\r\n    MoveJaw - Indicates if the field should be collimated by \r\n      the jaws. Default value is true.\r\n    JawMargins - The MLC to jaw margin in cm. Default value is \r\n      { 'x': 0, 'y': 0 }.\r\n    DeleteWedge - Indicates if the wedge of the beam should be \r\n      deleted. Default value is false.\r\n    PreventExtraLeafPairFromOpening - If an extra leafpair \r\n      should be openend, it can be prevented using this property.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["Name"], "method": "SetIsocenter", "description": "SetIsocenter(..)\r\n  Sets an isocenter to a beam. If the name of the isocenter does \r\n  not exist, a new isocenter will be created.\r\n              \r\n  Example:\r\n   beam_set.Beams[0].SetIsocenter(Name=\"New iso\")\r\n  Parameters:\r\n    Name - Name of the isocenter\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["SegmentNumber"], "method": "DeleteSegment", "description": "DeleteSegment(..)\r\n  Deletes a segment.\r\n  Parameters:\r\n    SegmentNumber - The number of the segment that shall be \r\n      deleted.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["NumberOfParticles"], "method": "SetBeamNP", "description": "SetBeamNP(..)\r\n  Method for setting the ion beam meterset in units of Number of \r\n  Particles\r\n  Parameters:\r\n    NumberOfParticles - The number of particles to set for the \r\n      ion beam.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["GantryAngles", "CouchAngles", "CollimatorAngles", "ArcRotationDirection"], "method": "SetArcTrajectory", "description": "SetArcTrajectory(..)\r\n  Sets the arc trajectory on a beam.\r\n  Example: \r\n    beam_set.Beams[0].SetArcTrajectory(GantryAngles=[198, 230, 282, \r\n  ], CouchAngles=[10, 0, 20, ], CollimatorAngles=[0, 0, 0], \r\n  ArcRotationDirection=\"Clockwise\")\r\n  Parameters:\r\n    GantryAngles - Gantry angles defining the wave arc.\r\n    CouchAngles - Couch angles defining the wave arc.\r\n    CollimatorAngles - Collimator angles defining the wave arc.\r\n    ArcRotationDirection - Rotation direction for the wave \r\n      arc. Possible values:\r\n      * None\r\n      * Clockwise\r\n      * CounterClockwise\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource.PatientSetup.SetupBeams.[]", "params": ["ShowFluence"], "method": "GetBEVImage", "description": "GetBEVImage(..)\r\n  Method for retrieving BEV image for a beam.\r\n  Parameters:\r\n    ShowFluence - Show fluence or not.\r\n  Returns:\r\n    Filename for the created image.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[].DrrSettings.[].BeamListSource", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["ModuleType"], "method": "LaunchIdcasSetupModule", "description": "LaunchIdcasSetupModule(..)\r\n  Asynchronuous action for launching the IDCAS patient setup \r\n  module (PS-M) or imaging definition module (ID-M).\r\n  Parameters:\r\n    ModuleType - The module type. Allowed values are \r\n      PatientSetup and ImagingDefinition.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["PoiName", "DoseValue", "RelativePrescriptionLevel", "AutoScaleDose"], "method": "AddDosePrescriptionToPoi", "description": "AddDosePrescriptionToPoi(..)\r\n  Defines a prescription to the beam set dose. If the beamset has \r\n  background dose, the prescription will relate to the plan dose.\r\n  Parameters:\r\n    PoiName - Name of the poi the prescription will be defined \r\n      on.\r\n    DoseValue - The prescribed dose [cGy].\r\n    RelativePrescriptionLevel - The relative prescription \r\n      level, or prescription percentage. \r\n      For default behaviour, set to 1.0. \r\n      If set to for instance 0.95 it shall be interpreted in the \r\n      following way (for PrescriptionType = AverageDose, DoseValue = \r\n      4000 cGy):\r\n                  \r\n      95% of the Average dose in the roi shall be 4000 cGy. \r\n                  \r\n      (The actual average dose in the roi will be the 4000 cGy \r\n      divided by 0.95)\r\n    AutoScaleDose - True if the planning dose should \r\n      automatically be kept scaled to the prescribed dose.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["ApplicatorName", "Energy", "InsertName", "IsAddCutoutChecked", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreateElectronBeam", "description": "CreateElectronBeam(..)\r\n  Creates and adds a beam of electron type.\r\n  Parameters:\r\n    ApplicatorName - Name of the electron applicator.\r\n    Energy - Energy [MeV] of the beam.\r\n    InsertName - Name of the collimating insert in the \r\n      applicator.\r\n    IsAddCutoutChecked - Gets, sets if cutout should be added\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["PhantomName", "PhantomId", "QAPlanName", "IsoCenter", "DoseGrid", "GantryAngle", "CollimatorAngle", "CouchAngle", "ComputeDoseWhenPlanIsCreated", "NumberOfMonteCarloHistories"], "method": "CreateQAPlan", "description": "CreateQAPlan(..)\r\n  Creates a QA plan for a beam set.\r\n  Parameters:\r\n    PhantomName - The name of the phantom used for the QA \r\n      plan. Requierd property.\r\n    PhantomId - The ID of the phantom used for the QA plan. \r\n      Required property.\r\n    QAPlanName - The name of the QA plan. Required property. \r\n      The name of the QA plan must be unique among the QA plans for \r\n      the same treatment plan beam set.\r\n    IsoCenter - The position of the isocenter in the phantom. \r\n      Expressed in the DICOM coordinate system.\r\n    DoseGrid - The resolution of the QA plan dose grid. The \r\n      dose grid is constructed to cover the outline of the phantom.\r\n    GantryAngle - The value of the gantry angle(s) for the \r\n      beams in the plan. Can be null. If a gantry angle is provided, \r\n      all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same gantry \r\n      angle). If a gantry angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same gantry angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CollimatorAngle - The value of the collimator angle(s) for \r\n      the beams in the plan. Can be null. If a collimator angle is \r\n      provided, all beams in the plan will be \r\n      collapsed to this angle (all beams will have the same \r\n      collimator angle). If a collimator angle is not provided, the \r\n      beams in the QA plan will have\r\n      the same collimator angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    CouchAngle - The value of the couch angle(s) for the beams \r\n      in the plan. Can be null. If a couch angle is provided all \r\n      beams in the plan will be \r\n      collapsed to this angle (all beams will have the same couch \r\n      angle). If a couch angle is not provided, the beams in the QA \r\n      plan will have\r\n      the same couch angles as the beams in the treatment plan. \r\n      Angles are defined as in IEC standard.\r\n    ComputeDoseWhenPlanIsCreated - A switch for computing the \r\n      dose for the QA plan when it is created.\r\n    NumberOfMonteCarloHistories - Number of Monte Carlo \r\n      histories (for ElectronMonteCarlo)\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["NominalEnergy", "HighNominalEnergy", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "SeparationThreshold"], "method": "AutoBreastAddRoisAndBeams", "description": "AutoBreastAddRoisAndBeams(..)\r\n  For auto breast planning only.\r\n  Creates beams with initial segments.\r\n  Creates 'aTreated Volume', aAvoid, aBreast, aCTV, modCAVITY, \r\n  CTVcavity, PTVcavity, DEVcavity,\r\n  Creates aHumerus, blockHumerus, blockCavity, blockHEART, \r\n  blockAVOID, evalLTLUNG, evalRTLUNG, aChestwall, blockChestwall, \r\n  blockCOMP, blockWire\r\n  Creates optimization beams, creates optimization problem, creates \r\n  clinical goals.\r\n  Parameters:\r\n    NominalEnergy - Nominal energy for the beams.\r\n    HighNominalEnergy - High nominal energy for the optimized \r\n      beams (optional).\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    SeparationThreshold - Separation threshold.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["DensityPerturbation", "IsocenterShift", "OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputePerturbedDose", "description": "ComputePerturbedDose(..)\r\n  Compute perturbed dose on a beam set.\r\n  Parameters:\r\n    DensityPerturbation - A value of the density perturbation \r\n      in the present fraction. Must be in the interval -0.5 to 0.5.\r\n      Default value is 0.0.\r\n    IsocenterShift - The shift of the isocenter in the present \r\n      fraction in the DICOM coordinate system.\r\n      Default value is { 'x': 0.0, 'y': 0.0, 'z': 0.0 }.\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Beam", "Contour", "Type", "LeafPositioningPolicy"], "method": "AddVirtualBlock", "description": "AddVirtualBlock(..)\r\n  Adds a virtual block to the domainstate.\r\n  Parameters:\r\n    Beam - Beam to add the virtual block to.\r\n    Contour - Contour of the virtual block.\r\n    Type - Type of the virtual block.\r\n    LeafPositioningPolicy - Leaf positioning policy (0..1)\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Position"], "method": "CreateDefaultIsocenterData", "description": "CreateDefaultIsocenterData(..)\r\n  Returns default IsocenterData for a position.\r\n  Parameters:\r\n    Position - Isocenter position.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["IgnoreImagingRing"], "method": "PathChecking", "description": "PathChecking(..)\r\n  Execute a collision check with the IDCAS path checking module \r\n  and update the collision status for the given beam set.\r\n  Parameters:\r\n    IgnoreImagingRing - Defines whether to ignore the imaging \r\n      ring and source from the path checking. \r\n      This option may be used when the positioning of the imaging \r\n      ring can be adjusted at a later stage.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["BeamToCopy", "ResetBeamMu"], "method": "CopyBeamFromBeamSet", "description": "CopyBeamFromBeamSet(..)\r\n   Copy beam from beam set.\r\n  Parameters:\r\n    BeamToCopy - The beam that shall be copied.\r\n    ResetBeamMu - Reset Beam MU to zero.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["BeamName", "IsVisible"], "method": "SetBeamIsVisible", "description": "SetBeamIsVisible(..)\r\n  Setting if beam is visible or not.\r\n  Parameters:\r\n    BeamName - The name of the beam in beam set.\r\n    IsVisible - True if beam is visible.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["Name", "Coordinates"], "method": "CreateDoseSpecificationPoint", "description": "CreateDoseSpecificationPoint(..)\r\n  Action that creates a dose specification point.\r\n  Parameters:\r\n    Name - The name of the dose specification point.\r\n    Coordinates - The coordinates of the dose specification \r\n      point [cm].\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["PatientSetupId", "ImagingProtocolId"], "method": "SetIdcasProperties", "description": "SetIdcasProperties(..)\r\n  Sets the patient setup and imaging protocol ID:s for the current \r\n  beam set \r\n  required for integration with the IDCAS collision avoidance \r\n  modules by medPhoton.\r\n  The id:s are communicated through the following DICOM private tags: \r\n    - medPhoton private creator (30BB,0010) Type 1, VR LO, VM 1 \r\n  Private creator identifier, always \"medPhoton 1.0\".\r\n    - Patient Setup ID          (30BB,1000) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified patient setup.\r\n    - Imaging Protocol ID       (30BB,1001) Type 2, VR SH, VM 1 The \r\n  (unique) identifier to correlate with a specified imaging protocol.\r\n  Parameters:\r\n    PatientSetupId - The patient setup ID. Unique identifier \r\n      to correlate with a specific patient setup.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag Patient Setup ID (30BB,1000).\r\n      If only PatientSetupId is set the ImagingProtocolId will be \r\n      cleared.\r\n    ImagingProtocolId - The imaging protocol ID. Unique \r\n      identifier to correlate with a specific imaging protocol.\r\n      Must not exceed 16 characters and can only contain letters, \r\n      digits, underscores, dashes, or dots.\r\n      DICOM private tag (30BB,1001).\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["OnlyOneDosePerImageSet", "AllowGridExpansion", "ExaminationNames", "FractionNumbers", "ComputeBeamDoses"], "method": "ComputeDoseOnAdditionalSets", "description": "ComputeDoseOnAdditionalSets(..)\r\n  Compute beam set dose on additional image sets.\r\n  Parameters:\r\n    OnlyOneDosePerImageSet - Indicates if only one evaluation \r\n      dose per image set shall be allowed. \r\n      Previously computed evaluation doses on the selected \r\n      examinations will be deleted if this is set to true.\r\n      Default is false.\r\n    AllowGridExpansion - Indicates if expansion of the dose \r\n      grid is allowed if necessary. Default is true.\r\n    ExaminationNames - The names of the examinations to be \r\n      used. This is a required property and the number of items\r\n      in this list must equal the number of items in the \r\n      FractionNumbers property.\r\n    FractionNumbers - The numbers of the fractions for which \r\n      the dose is to be computed. This is a required property\r\n      and the number of items in this list must equal the number of \r\n      items in the ExaminationNames property. \r\n      This property must contain at least one item.\r\n    ComputeBeamDoses - Indicates if beam doses shall be \r\n      computed. Default is true.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["BeamName"], "method": "CopyBeam", "description": "CopyBeam(..)\r\n  Creates a copy of the specified beam and appends the copy to the \r\n  beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be copied.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["SnoutId", "SpotTuneId", "RangeShifter", "MinimumAirGap", "MetersetRateSetting", "IsocenterData", "Name", "Description", "GantryAngle", "CouchAngle", "CollimatorAngle"], "method": "CreatePBSIonBeam", "description": "CreatePBSIonBeam(..)\r\n  Creates and adds a beam of PBS (or Line scanning) ion type.\r\n  Parameters:\r\n    SnoutId - Snout ID of the beam. Must be specified.\r\n    SpotTuneId - Name of the spot tune ID of the beam. Must be \r\n      specified.\r\n    RangeShifter - Name of the range shifter of the beam. \r\n      Default value is null.\r\n    MinimumAirGap - Minimun air gap from snout. Default value \r\n      is null.\r\n    MetersetRateSetting - MetersetRateSetting for the beam. \r\n      Default value is null.\r\n    IsocenterData - Dictionary containing isocenter data. Use \r\n      help functions to create IsocenterData. \r\n      Example: IsocenterData = beam_set.GetIsocenterData(Name=\"Iso \r\n      1\") or IsocenterData = \r\n      beam_set.CreateDefaultIsocenterData(Position={'x':1, 'y':2, \r\n      'z':3} )\r\n    Name - Beam name, must be unique.\r\n    Description - Description.\r\n    GantryAngle - Angle unit and direction follow IEC.\r\n    CouchAngle - Angle unit and direction follow IEC.\r\n    CollimatorAngle - Angle unit and direction follow IEC.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["OutputFormat", "TargetDirectory", "FileName"], "method": "PatientMarkingExport", "description": "PatientMarkingExport(..)\r\n  Export patient marking\r\n  Parameters:\r\n    OutputFormat - Output format.\r\n      Supported formats:\r\n      LAP File format 1.0\r\n    TargetDirectory - Directory to store result to\r\n    FileName - File name\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["ShowBeams", "ShowContour", "ShowCenterLine", "ShowBeamsFromAllBeamSets", "ShowIsocenterNames"], "method": "EditShowBeamVisualization", "description": "EditShowBeamVisualization(..)\r\n  Setting beam related visualization settings.\r\n  Parameters:\r\n    ShowBeams - True if beams shall be displayed.\r\n    ShowContour - True if beam contours shall be displayed.\r\n    ShowCenterLine - True if beam center line shall be \r\n      displayed.\r\n    ShowBeamsFromAllBeamSets - True if all beams in the plan \r\n      shall be displayed.\r\n    ShowIsocenterNames - True if isocenter names shall be \r\n      displayed.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["templateName", "filename", "ignoreWarnings"], "method": "CreateReport", "description": "CreateReport(..)\r\n  Create treatment plan report\r\n  For any clinical report creation, warnings must be handled by \r\n  first exporting with IgnoreWarnings set to False.\r\n  Use a try - except pattern to catch all warnings. After the \r\n  warnings have been handled the export can run again with this \r\n  parameter set to True.\r\n  Code snippet:\r\n  try:\r\n    beam_set.CreateReport(... IgnoreWarnings=False)\r\n  except SystemError as error:\r\n    HandleWarnings(error)\r\n    beam_set.CreateReport(... IgnoreWarnings=True)\r\n  Parameters:\r\n    templateName - Name of treatment plan report template\r\n    filename - Filename for pdf document\r\n    ignoreWarnings - Ignore warnings\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["RoiName", "DoseValue", "DoseVolume", "PrescriptionType", "LockedBeamNames", "EvaluateAfterScaling"], "method": "NormalizeToPrescription", "description": "NormalizeToPrescription(..)\r\n  Scales dose and the MU of the corresponding beam set.\r\n  Parameters:\r\n    RoiName - Name of ROI or POI used for dose scaling.\r\n    DoseValue - Dose value to scale to in cGy. \r\n      Must be in the interval 10 to 100000.\r\n    DoseVolume - Percent volume used for scaling of \r\n      prescription type DoseAtVolume.\r\n      Absolute volume (cm^3) used for scaling of prescription type \r\n      DoseAtAbsoluteVolume.\r\n      Must be in the interval 0 to 100 for prescription type \r\n      DoseAtVolume.\r\n      Must be in the interval 0 to volume of ROI for prescription \r\n      type DoseAtAbsoluteVolume.\r\n    PrescriptionType - Prescription type for scaling. Possible \r\n      values:\r\n      * AverageDose:          The average dose of the selected ROI \r\n      is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      disregarded.\r\n      * DoseAtVolume:         The dose at the given percent volume \r\n      of the select ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtAbsoluteVolume: The dose at the given absolute volume \r\n      (cm^3) of the selected ROI is scaled.\r\n                              Cannot be used for POIs.\r\n      * DoseAtPoint:          The given point dose is scaled.\r\n                              Can only be used for POIs.\r\n      * NearMinimumDose:      The dose at 98 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 98.\r\n      * NearMaximumDose:      The dose at 2 % volume of the selected \r\n      ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 2.\r\n      * MedianDose:           The dose at 50 % volume of the \r\n      selected ROI is scaled.\r\n                              Cannot be used for POIs. DoseVolume is \r\n      set to 50.\r\n    LockedBeamNames - List of names of the beams that should \r\n      not be scaled.\r\n      Default value is null.\r\n    EvaluateAfterScaling - Indicates if the optimization \r\n      function values should be evaluated after scaling.\r\n      Default is false.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["BeamName"], "method": "DeleteBeam", "description": "DeleteBeam(..)\r\n  Deletes a beam from the beam list.\r\n  Parameters:\r\n    BeamName - The name of the beam that shall be deleted.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["MaximumStepLength", "UseFixedFirstSpot", "PreferredDirection", "OfflinePenaltyFactor"], "method": "SortSpots", "description": "SortSpots(..)\r\n  Adds a spot\r\n  Parameters:\r\n    MaximumStepLength - The maximum step length allowed to be \r\n      taken [cm]. Distances above this value will get a penalty of \r\n      1000.\r\n    UseFixedFirstSpot - True if fixing the first spot when \r\n      sorting. Default value is false.\r\n    PreferredDirection - The direction which is preferred by \r\n      the sorting algorithm (X, Y, NoPreference).\r\n    OfflinePenaltyFactor - Distances leaving the \r\n      PreferredScanDirection are multiplied by the \r\n      OfflinePenaltyFactor. A factor of 1 gives no penalty.\r\n"}, {"base": "Case.TreatmentPlans.[].BeamSets.[]", "params": ["BeamName"], "method": "GetArcTrajectory", "description": "GetArcTrajectory(..)\r\n  Returns the arc trajectory of the beam.\r\n  Parameters:\r\n    BeamName - Name of the beam\r\n  Returns:\r\n    The arc trajectory\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["PlanName", "NewBeamSetName"], "method": "CopyPlanAndAddAsNewBeamSet", "description": "CopyPlanAndAddAsNewBeamSet(..)\r\n  Copies a plan (with one beam set) and adds it as new beam set to \r\n  another plan.\r\n  The same prerequisites as when adding a new beam set to the \r\n  current plan, i.e.,\r\n   - same planning image\r\n   - same patient position\r\n   - same dose grid size, corner and resolution\r\n   - supported delivery technique\r\n   - commissioned machine\r\n              \r\n  A deep clone of the radiation set is done. Objective functions are \r\n  not copied over.\r\n  Parameters:\r\n    PlanName - Name of the plan to copy.\r\n    NewBeamSetName - The name of the new beam set.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["BeamSetInfo"], "method": "LoadBeamSet", "description": "LoadBeamSet(..)\r\n  Loads a beam set from a treatment plan. Returns a handle to the \r\n  beam set.\r\n  Example:\r\n    To return a handle to the first beam set in a list retrieved \r\n    from QueryBeamSetInfo:\r\n    infos = treatmentPlan.QueryBeamSetInfo( Filter = {'Name': \r\n    'Plan1'} )\r\n    plan = treatmentPlan.LoadBeamSet( BeamSetInfo = infos[0] )\r\n  Parameters:\r\n    BeamSetInfo - Information about the plan to be selected. \r\n      The beam set info must match one and only one beam set.\r\n  Returns:\r\n    The loaded beam set.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["ImageMETAHdrFileName", "OverwriteExisting"], "method": "SetDensityDistributionFromImportedMetaImage", "description": "SetDensityDistributionFromImportedMetaImage(..)\r\n  Action for set a density distribution from information stored as \r\n  a meta image (http://www.itk.org/Wiki/ITK/MetaIO/Documentation) \r\n  Tags: \r\n   - Offset\r\n   - DimSize\r\n   - ElementSize \r\n  Should correspond to Corner in mm, NrOfVoxels, and VoxelSize in \r\n  mm, respectively, of the dose grid for which the density \r\n  distribution is defined.\r\n  Data is assumed to be stored in dicom coordinate system.\r\n  ElementType should be MET_DOUBLE\r\n  Parameters:\r\n    ImageMETAHdrFileName - \r\n    OverwriteExisting - \r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["Corner", "VoxelSize", "NumberOfVoxels"], "method": "UpdateDoseGrid", "description": "UpdateDoseGrid(..)\r\n  Updates the dose grid of a plan.\r\n  Parameters:\r\n    Corner - The dose grid corner in DICOM patient coordinates.\r\n    VoxelSize - The voxel sizes in DICOM patient coordinate \r\n      directions [cm].\r\n    NumberOfVoxels - The number of voxels in DICOM patient \r\n      coordinate directions.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["TargetLinacName", "TargetPlanBaseName", "TargetOverOARWeights"], "method": "PlanMimic", "description": "PlanMimic(..)\r\n  Setup a BeamSet giving a similar dose to the source TreatmentPlan.\r\n  Parameters:\r\n    TargetLinacName - The name of the linac that the backup \r\n      plan should target.\r\n    TargetPlanBaseName - The name of the new backup plan.\r\n    TargetOverOARWeights - The Target-over-OAR weights to use.\r\n"}, {"base": "Case.TreatmentPlans.[]", "params": ["VoxelSize"], "method": "SetDefaultDoseGrid", "description": "SetDefaultDoseGrid(..)\r\n  Sets the dose grid of the plan to cover the external ROI, the \r\n  plan bolus, and support and fixture ROIs.\r\n  Parameters:\r\n    VoxelSize - The voxel sizes in DICOM patient coordinate \r\n      directions [cm].\r\n"}, {"base": "Case", "params": ["PlanName", "NewExplorationPlanName", "PlanExplorationName"], "method": "CopyPlanToExploration", "description": "CopyPlanToExploration(..)\r\n  Creates a copy of the specified plan, converts it to an \r\n  exploration plan and appends it to the exploration plan list.\r\n  Parameters:\r\n    PlanName - Name of the plan to copy.\r\n    NewExplorationPlanName - Desired name of the new \r\n      exploration plan.\r\n    PlanExplorationName - Name of the exploration that shall \r\n      contain the copied plan.\r\n"}, {"base": "Case", "params": ["PlanName", "PlannedBy", "Comment", "ExaminationName", "AllowDuplicateNames"], "method": "AddNewPlan", "description": "AddNewPlan(..)\r\n  Adds a new treatment plan.\r\n  Parameters:\r\n    PlanName - Name of the new plan.\r\n    PlannedBy - Name of the planner.\r\n    Comment - Comments of the new plan.\r\n    ExaminationName - The name of the planning image set \r\n      defined for the new plan\r\n    AllowDuplicateNames - Skip uniqueness test for name (used \r\n      by fallback plans).\r\n"}, {"base": "Case", "params": ["ReferenceExaminationName", "TargetExaminationName", "DeformableRegistrationGroupName", "AddedRigidTransform", "FrameOfReferenceRigidTransform", "GridCorner", "GridVoxelSize", "GridNrVoxels", "FileNameDisplacementX", "FileNameDisplacementY", "FileNameDisplacementZ"], "method": "ImportDeformableRegistrationFromFile", "description": "ImportDeformableRegistrationFromFile(..)\r\n  Action for reading a deformable registration from file.\r\n  Displacement in x, y, and z should be stored as byte arrays\r\n  Parameters:\r\n    ReferenceExaminationName - Gets or sets the name of the \r\n      reference examination.\r\n    TargetExaminationName - Gets or sets the name of the \r\n      target examination.\r\n    DeformableRegistrationGroupName - Gets or sets the name of \r\n      the deformable registration group that will be created.\r\n    AddedRigidTransform - Gets or sets the rigid transform for \r\n      the deformable registration.\r\n      If null, the identity matrix will be used.\r\n      Note that in RayStation only one additional rigid transform \r\n      can be added between each pair of image set. \r\n      This means that if you have already created an additional \r\n      rigid transform, the same matrix should be given as \r\n      AddedRigidTransform\r\n      Furthermore, rigid transforms (if different than identity) can \r\n      only be added to explicit frame-of-reference registrations\r\n    FrameOfReferenceRigidTransform - Gets or sets the rigid \r\n      transform for the frame-of-reference registration.\r\n      If a frame-of-reference registration already exist between the \r\n      reference and target examination, \r\n      FrameOfReferenceRigidTransform should be null\r\n    GridCorner - Gets or sets the deformation grid corner.\r\n      Note that deformation vectors are defined in the corner points \r\n      of each deformation grid voxels. Hence, GridCorner should \r\n      correspond to position of the first deformation vector in your \r\n      deformation vector field\r\n    GridVoxelSize - Gets or sets the deformation grid voxel \r\n      size.\r\n    GridNrVoxels - Gets or sets the deformation grid size.\r\n      Note that deformation vectors are defined in the corner points \r\n      of each deformation grid voxels. Hence, GridNrVoxels should be \r\n      decreased with one in each direction with respect to the \r\n      number of vectors\r\n    FileNameDisplacementX - Gets or sets the file name for \r\n      displacement field in x.\r\n    FileNameDisplacementY - Gets or sets the file name for \r\n      displacement field in y.\r\n    FileNameDisplacementZ - Gets or sets the file name for \r\n      displacement field in z.\r\n"}, {"base": "Examination", "params": ["TransformationMatrix", "CenterOfRotation"], "method": "GetAffineTransformationParametersGivenCenterOfRotation", "description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n"}, {"base": "Examination", "params": ["MetaFileName"], "method": "ExportExaminationAsMetaImage", "description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n"}, {"base": "Examination", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "method": "CreateTransformedExamination", "description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n"}, {"base": "Examination", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "method": "SetTreatmentPositionAlignmentRegistration", "description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n"}, {"base": "Examination.EquipmentInfo", "params": ["HU", "Rho"], "method": "SetImageSpecificCtToDensityTable", "description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n"}, {"base": "Examination.EquipmentInfo", "params": ["DensityThresholds"], "method": "SetCtToDensityTableForCbctImage", "description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n"}, {"base": "Examination.EquipmentInfo", "params": ["ImagingSystemName"], "method": "SetImagingSystemReference", "description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n"}, {"base": "Examination.EquipmentInfo", "params": ["FromExaminationName"], "method": "CopyCtToDensityTableFromAnotherCbctImage", "description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n"}, {"base": "Examination", "params": ["Group", "Element"], "method": "GetStoredDicomTagValueForVerification", "description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n"}, {"base": "Examination", "params": ["MinCorner", "MaxCorner"], "method": "CropImageStackAndStoreAsNewExamination", "description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n"}, {"base": "Examination", "params": ["FileName"], "method": "WriteStoredDicomDataSetToFileForVerification", "description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n"}, {"base": "Examination.Series.[].ImageStack", "params": ["RoiName"], "method": "GetIntensityStatistics", "description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n"}, {"base": "Examination.Series.[].ImageStack", "params": ["DoseGrid", "Scaling"], "method": "GetResampledPETValues", "description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n"}, {"base": "Examination.Series.[].ImageStack", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "method": "GetImageStackHistogram", "description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n"}, {"base": "Examination.Series.[].ImageStack", "params": ["DoseGrid", "Reference", "LookUp"], "method": "GetResampledAndScaledPixelData", "description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n"}, {"base": "Examination.Series.[].ImageStack", "params": ["DoseGrid"], "method": "GetResampledPixelData", "description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n"}]